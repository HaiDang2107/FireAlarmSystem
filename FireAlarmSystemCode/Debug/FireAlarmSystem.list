
FireAlarmSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005de0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  08005ef0  08005ef0  00006ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060bc  080060bc  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080060bc  080060bc  000070bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060c4  080060c4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060c4  080060c4  000070c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060c8  080060c8  000070c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080060cc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  20000060  0800612c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf0  0800612c  00008bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012954  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300a  00000000  00000000  0001a9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3c  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a82  00000000  00000000  0001f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012359  00000000  00000000  00023096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b2d  00000000  00000000  000353ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6f1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004628  00000000  00000000  000c6f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000cb588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ed8 	.word	0x08005ed8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005ed8 	.word	0x08005ed8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fc84 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f850 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f950 	bl	8000410 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f8a8 	bl	80002c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000174:	f000 f8e4 	bl	8000340 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000178:	f000 f920 	bl	80003bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017c:	f002 faa0 	bl	80026c0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (3, sizeof(uint16_t), &temperatureQueue_attributes);
 8000180:	4a15      	ldr	r2, [pc, #84]	@ (80001d8 <main+0x78>)
 8000182:	2102      	movs	r1, #2
 8000184:	2003      	movs	r0, #3
 8000186:	f002 fb90 	bl	80028aa <osMessageQueueNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a13      	ldr	r2, [pc, #76]	@ (80001dc <main+0x7c>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of airQualityQueue */
  airQualityQueueHandle = osMessageQueueNew (3, sizeof(uint16_t), &airQualityQueue_attributes);
 8000190:	4a13      	ldr	r2, [pc, #76]	@ (80001e0 <main+0x80>)
 8000192:	2102      	movs	r1, #2
 8000194:	2003      	movs	r0, #3
 8000196:	f002 fb88 	bl	80028aa <osMessageQueueNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a11      	ldr	r2, [pc, #68]	@ (80001e4 <main+0x84>)
 800019e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80001a0:	4a11      	ldr	r2, [pc, #68]	@ (80001e8 <main+0x88>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	4811      	ldr	r0, [pc, #68]	@ (80001ec <main+0x8c>)
 80001a6:	f002 fad3 	bl	8002750 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a10      	ldr	r2, [pc, #64]	@ (80001f0 <main+0x90>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001b0:	4a10      	ldr	r2, [pc, #64]	@ (80001f4 <main+0x94>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4810      	ldr	r0, [pc, #64]	@ (80001f8 <main+0x98>)
 80001b6:	f002 facb 	bl	8002750 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <main+0x9c>)
 80001be:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80001c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <main+0xa0>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	480f      	ldr	r0, [pc, #60]	@ (8000204 <main+0xa4>)
 80001c6:	f002 fac3 	bl	8002750 <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000208 <main+0xa8>)
 80001ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d0:	f002 fa98 	bl	8002704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d4:	bf00      	nop
 80001d6:	e7fd      	b.n	80001d4 <main+0x74>
 80001d8:	0800602c 	.word	0x0800602c
 80001dc:	20000130 	.word	0x20000130
 80001e0:	08006044 	.word	0x08006044
 80001e4:	20000134 	.word	0x20000134
 80001e8:	08005fc0 	.word	0x08005fc0
 80001ec:	080004a5 	.word	0x080004a5
 80001f0:	20000124 	.word	0x20000124
 80001f4:	08005fe4 	.word	0x08005fe4
 80001f8:	080005b5 	.word	0x080005b5
 80001fc:	20000128 	.word	0x20000128
 8000200:	08006008 	.word	0x08006008
 8000204:	08000619 	.word	0x08000619
 8000208:	2000012c 	.word	0x2000012c

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b094      	sub	sp, #80	@ 0x50
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f005 f9ce 	bl	80055bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000256:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000258:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800025c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fb0e 	bl	8001884 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026e:	f000 fa37 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000282:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000288:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2102      	movs	r1, #2
 8000290:	4618      	mov	r0, r3
 8000292:	f001 fd79 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800029c:	f000 fa20 	bl	80006e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002a0:	2302      	movs	r3, #2
 80002a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 fef9 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002b8:	f000 fa12 	bl	80006e0 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3750      	adds	r7, #80	@ 0x50
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002d6:	4a19      	ldr	r2, [pc, #100]	@ (800033c <MX_ADC1_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f4:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <MX_ADC1_Init+0x74>)
 8000302:	f000 fc17 	bl	8000b34 <HAL_ADC_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 f9e8 	bl	80006e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000310:	2301      	movs	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000314:	2301      	movs	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_ADC1_Init+0x74>)
 8000322:	f000 fe69 	bl	8000ff8 <HAL_ADC_ConfigChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800032c:	f000 f9d8 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000007c 	.word	0x2000007c
 800033c:	40012400 	.word	0x40012400

08000340 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000352:	4a19      	ldr	r2, [pc, #100]	@ (80003b8 <MX_ADC2_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000356:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800036a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800036e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000370:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800037e:	f000 fbd9 	bl	8000b34 <HAL_ADC_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000388:	f000 f9aa 	bl	80006e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800038c:	2302      	movs	r3, #2
 800038e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000390:	2301      	movs	r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800039e:	f000 fe2b 	bl	8000ff8 <HAL_ADC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003a8:	f000 f99a 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000ac 	.word	0x200000ac
 80003b8:	40012800 	.word	0x40012800

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	@ (800040c <MX_USART1_UART_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f001 ff0c 	bl	8002210 <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 f96f 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000dc 	.word	0x200000dc
 800040c:	40013800 	.word	0x40013800

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <MX_GPIO_Init+0x8c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <MX_GPIO_Init+0x8c>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_GPIO_Init+0x8c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_GPIO_Init+0x8c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a16      	ldr	r2, [pc, #88]	@ (800049c <MX_GPIO_Init+0x8c>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_GPIO_Init+0x8c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2130      	movs	r1, #48	@ 0x30
 8000458:	4811      	ldr	r0, [pc, #68]	@ (80004a0 <MX_GPIO_Init+0x90>)
 800045a:	f001 f9fb 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800045e:	2308      	movs	r3, #8
 8000460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4619      	mov	r1, r3
 8000470:	480b      	ldr	r0, [pc, #44]	@ (80004a0 <MX_GPIO_Init+0x90>)
 8000472:	f001 f86b 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000476:	2330      	movs	r3, #48	@ 0x30
 8000478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	4619      	mov	r1, r3
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <MX_GPIO_Init+0x90>)
 800048e:	f001 f85d 	bl	800154c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b092      	sub	sp, #72	@ 0x48
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_ADC_Start_IT(&hadc1);
 80004ac:	4836      	ldr	r0, [pc, #216]	@ (8000588 <StartTask01+0xe4>)
 80004ae:	f000 fc19 	bl	8000ce4 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 80004b2:	4836      	ldr	r0, [pc, #216]	@ (800058c <StartTask01+0xe8>)
 80004b4:	f000 fc16 	bl	8000ce4 <HAL_ADC_Start_IT>
	for (;;) {
		//HAL_UART_Transmit(&huart1, (uint8_t*) "Task 3\n", strlen("Task 3\n"), 100);
		if (isAirReady == 1) {
 80004b8:	4b35      	ldr	r3, [pc, #212]	@ (8000590 <StartTask01+0xec>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d12c      	bne.n	800051a <StartTask01+0x76>
			isAirReady = 0;
 80004c0:	4b33      	ldr	r3, [pc, #204]	@ (8000590 <StartTask01+0xec>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
			if (osMessageQueueGetCount(airQualityQueueHandle) < 3) {
 80004c6:	4b33      	ldr	r3, [pc, #204]	@ (8000594 <StartTask01+0xf0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fb1e 	bl	8002b0c <osMessageQueueGetCount>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d81e      	bhi.n	8000514 <StartTask01+0x70>
				osStatus_t status = osMessageQueuePut(airQualityQueueHandle,
 80004d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000594 <StartTask01+0xf0>)
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	230a      	movs	r3, #10
 80004dc:	2200      	movs	r2, #0
 80004de:	492e      	ldr	r1, [pc, #184]	@ (8000598 <StartTask01+0xf4>)
 80004e0:	f002 fa56 	bl	8002990 <osMessageQueuePut>
 80004e4:	6478      	str	r0, [r7, #68]	@ 0x44
						&airValue, 0, 10);
				if (status != osOK) {
 80004e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <StartTask01+0x70>
					// In ra lỗi nếu việc đưa vào queue thất bại
					char error_msg[50];
					sprintf(error_msg, "Queue 1 Put Error: %d\n", status);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80004f2:	492a      	ldr	r1, [pc, #168]	@ (800059c <StartTask01+0xf8>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f005 f83f 	bl	8005578 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
							strlen(error_msg), 100);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe26 	bl	8000150 <strlen>
 8000504:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
 8000506:	b29a      	uxth	r2, r3
 8000508:	f107 010c 	add.w	r1, r7, #12
 800050c:	2364      	movs	r3, #100	@ 0x64
 800050e:	4824      	ldr	r0, [pc, #144]	@ (80005a0 <StartTask01+0xfc>)
 8000510:	f001 fece 	bl	80022b0 <HAL_UART_Transmit>
				}
			}
			HAL_ADC_Start_IT(&hadc1);
 8000514:	481c      	ldr	r0, [pc, #112]	@ (8000588 <StartTask01+0xe4>)
 8000516:	f000 fbe5 	bl	8000ce4 <HAL_ADC_Start_IT>
		}

		if (isTemperatureReady == 1) {
 800051a:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <StartTask01+0x100>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d12c      	bne.n	800057c <StartTask01+0xd8>
			isTemperatureReady = 0;
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <StartTask01+0x100>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
			if (osMessageQueueGetCount(temperatureQueueHandle) < 3) {
 8000528:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <StartTask01+0x104>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f002 faed 	bl	8002b0c <osMessageQueueGetCount>
 8000532:	4603      	mov	r3, r0
 8000534:	2b02      	cmp	r3, #2
 8000536:	d81e      	bhi.n	8000576 <StartTask01+0xd2>
				osStatus_t status = osMessageQueuePut(temperatureQueueHandle,
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <StartTask01+0x104>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230a      	movs	r3, #10
 800053e:	2200      	movs	r2, #0
 8000540:	491a      	ldr	r1, [pc, #104]	@ (80005ac <StartTask01+0x108>)
 8000542:	f002 fa25 	bl	8002990 <osMessageQueuePut>
 8000546:	6438      	str	r0, [r7, #64]	@ 0x40
						&temperatureValue, 0, 10);
				if (status != osOK) {
 8000548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800054a:	2b00      	cmp	r3, #0
 800054c:	d013      	beq.n	8000576 <StartTask01+0xd2>
					// In ra lỗi nếu việc đưa vào queue thất bại
					char error_msg[50];
					sprintf(error_msg, "Queue 2 Put Error: %d\n", status);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000554:	4916      	ldr	r1, [pc, #88]	@ (80005b0 <StartTask01+0x10c>)
 8000556:	4618      	mov	r0, r3
 8000558:	f005 f80e 	bl	8005578 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
							strlen(error_msg), 100);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fdf5 	bl	8000150 <strlen>
 8000566:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
 8000568:	b29a      	uxth	r2, r3
 800056a:	f107 010c 	add.w	r1, r7, #12
 800056e:	2364      	movs	r3, #100	@ 0x64
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <StartTask01+0xfc>)
 8000572:	f001 fe9d 	bl	80022b0 <HAL_UART_Transmit>
				}
			}
			HAL_ADC_Start_IT(&hadc2);
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <StartTask01+0xe8>)
 8000578:	f000 fbb4 	bl	8000ce4 <HAL_ADC_Start_IT>
		}
		osDelay(500);
 800057c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000580:	f002 f978 	bl	8002874 <osDelay>
		if (isAirReady == 1) {
 8000584:	e798      	b.n	80004b8 <StartTask01+0x14>
 8000586:	bf00      	nop
 8000588:	2000007c 	.word	0x2000007c
 800058c:	200000ac 	.word	0x200000ac
 8000590:	20000140 	.word	0x20000140
 8000594:	20000134 	.word	0x20000134
 8000598:	20000148 	.word	0x20000148
 800059c:	08005f38 	.word	0x08005f38
 80005a0:	200000dc 	.word	0x200000dc
 80005a4:	20000144 	.word	0x20000144
 80005a8:	20000130 	.word	0x20000130
 80005ac:	2000014c 	.word	0x2000014c
 80005b0:	08005f50 	.word	0x08005f50

080005b4 <StartTask02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if (threshold1 == 1 && threshold2 == 1) {
 80005bc:	4b13      	ldr	r3, [pc, #76]	@ (800060c <StartTask02+0x58>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d10e      	bne.n	80005e2 <StartTask02+0x2e>
 80005c4:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <StartTask02+0x5c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d10a      	bne.n	80005e2 <StartTask02+0x2e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2110      	movs	r1, #16
 80005d0:	4810      	ldr	r0, [pc, #64]	@ (8000614 <StartTask02+0x60>)
 80005d2:	f001 f93f 	bl	8001854 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005d6:	2201      	movs	r2, #1
 80005d8:	2120      	movs	r1, #32
 80005da:	480e      	ldr	r0, [pc, #56]	@ (8000614 <StartTask02+0x60>)
 80005dc:	f001 f93a 	bl	8001854 <HAL_GPIO_WritePin>
 80005e0:	e00f      	b.n	8000602 <StartTask02+0x4e>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2110      	movs	r1, #16
 80005e6:	480b      	ldr	r0, [pc, #44]	@ (8000614 <StartTask02+0x60>)
 80005e8:	f001 f934 	bl	8001854 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2120      	movs	r1, #32
 80005f0:	4808      	ldr	r0, [pc, #32]	@ (8000614 <StartTask02+0x60>)
 80005f2:	f001 f92f 	bl	8001854 <HAL_GPIO_WritePin>
		  threshold1 = 0;
 80005f6:	4b05      	ldr	r3, [pc, #20]	@ (800060c <StartTask02+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
		  threshold2 = 0;
 80005fc:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <StartTask02+0x5c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
	  }
      osDelay(500);
 8000602:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000606:	f002 f935 	bl	8002874 <osDelay>
	  if (threshold1 == 1 && threshold2 == 1) {
 800060a:	e7d7      	b.n	80005bc <StartTask02+0x8>
 800060c:	20000138 	.word	0x20000138
 8000610:	2000013c 	.word	0x2000013c
 8000614:	40010800 	.word	0x40010800

08000618 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b09e      	sub	sp, #120	@ 0x78
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	for (;;) {
		if (osMessageQueueGetCount(airQualityQueueHandle) > 0 && osMessageQueueGetCount(temperatureQueueHandle) > 0) {
 8000620:	4b2b      	ldr	r3, [pc, #172]	@ (80006d0 <StartTask03+0xb8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4618      	mov	r0, r3
 8000626:	f002 fa71 	bl	8002b0c <osMessageQueueGetCount>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d049      	beq.n	80006c4 <StartTask03+0xac>
 8000630:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <StartTask03+0xbc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4618      	mov	r0, r3
 8000636:	f002 fa69 	bl	8002b0c <osMessageQueueGetCount>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d041      	beq.n	80006c4 <StartTask03+0xac>
			char buffer[100];
			uint16_t air, tem, airConvert, temConvert;
			osMessageQueueGet(airQualityQueueHandle, &air, NULL, 100);
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <StartTask03+0xb8>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8000648:	2364      	movs	r3, #100	@ 0x64
 800064a:	2200      	movs	r2, #0
 800064c:	f002 fa00 	bl	8002a50 <osMessageQueueGet>
			osMessageQueueGet(temperatureQueueHandle, &tem, NULL, 100);
 8000650:	4b20      	ldr	r3, [pc, #128]	@ (80006d4 <StartTask03+0xbc>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000658:	2364      	movs	r3, #100	@ 0x64
 800065a:	2200      	movs	r2, #0
 800065c:	f002 f9f8 	bl	8002a50 <osMessageQueueGet>

			// Convert to millivoltage
			//airConvert = (int) 3300 * air / 4096.f;
			airConvert = air * 3300 / 4096;
 8000660:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8000664:	461a      	mov	r2, r3
 8000666:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800066a:	fb02 f303 	mul.w	r3, r2, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	da01      	bge.n	8000676 <StartTask03+0x5e>
 8000672:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000676:	131b      	asrs	r3, r3, #12
 8000678:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			temConvert = tem * 330 / 4096;
 800067c:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8000680:	461a      	mov	r2, r3
 8000682:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8000686:	fb02 f303 	mul.w	r3, r2, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	da01      	bge.n	8000692 <StartTask03+0x7a>
 800068e:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000692:	131b      	asrs	r3, r3, #12
 8000694:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
			sprintf(buffer,
 8000698:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800069c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80006a0:	f107 000c 	add.w	r0, r7, #12
 80006a4:	490c      	ldr	r1, [pc, #48]	@ (80006d8 <StartTask03+0xc0>)
 80006a6:	f004 ff67 	bl	8005578 <siprintf>
					"Air quality sensor: %d (mV).\nTemperature: %d (*C).\n==========\n",
					airConvert, temConvert);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd4e 	bl	8000150 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 010c 	add.w	r1, r7, #12
 80006bc:	2364      	movs	r3, #100	@ 0x64
 80006be:	4807      	ldr	r0, [pc, #28]	@ (80006dc <StartTask03+0xc4>)
 80006c0:	f001 fdf6 	bl	80022b0 <HAL_UART_Transmit>
		 // Convert to temperature: 10mV ~ 1 Cencius degree
		 //temConvert = (int) 330 * temperature / 4096.0f;
		 temConvert = temperature;
		 }
		 */
		osDelay(2000);
 80006c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c8:	f002 f8d4 	bl	8002874 <osDelay>
		if (osMessageQueueGetCount(airQualityQueueHandle) > 0 && osMessageQueueGetCount(temperatureQueueHandle) > 0) {
 80006cc:	e7a8      	b.n	8000620 <StartTask03+0x8>
 80006ce:	bf00      	nop
 80006d0:	20000134 	.word	0x20000134
 80006d4:	20000130 	.word	0x20000130
 80006d8:	08005f68 	.word	0x08005f68
 80006dc:	200000dc 	.word	0x200000dc

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006f2:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <HAL_MspInit+0x68>)
 80006f4:	699b      	ldr	r3, [r3, #24]
 80006f6:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <HAL_MspInit+0x68>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6193      	str	r3, [r2, #24]
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <HAL_MspInit+0x68>)
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b12      	ldr	r3, [pc, #72]	@ (8000754 <HAL_MspInit+0x68>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a11      	ldr	r2, [pc, #68]	@ (8000754 <HAL_MspInit+0x68>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <HAL_MspInit+0x68>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	210f      	movs	r1, #15
 8000726:	f06f 0001 	mvn.w	r0, #1
 800072a:	f000 fed8 	bl	80014de <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800072e:	4b0a      	ldr	r3, [pc, #40]	@ (8000758 <HAL_MspInit+0x6c>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	4a04      	ldr	r2, [pc, #16]	@ (8000758 <HAL_MspInit+0x6c>)
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	40010000 	.word	0x40010000

0800075c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	@ 0x28
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000764:	f107 0318 	add.w	r3, r7, #24
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a30      	ldr	r2, [pc, #192]	@ (8000838 <HAL_ADC_MspInit+0xdc>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d12a      	bne.n	80007d2 <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800077c:	4b2f      	ldr	r3, [pc, #188]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2e      	ldr	r2, [pc, #184]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2c      	ldr	r3, [pc, #176]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000790:	617b      	str	r3, [r7, #20]
 8000792:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000794:	4b29      	ldr	r3, [pc, #164]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a28      	ldr	r2, [pc, #160]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b26      	ldr	r3, [pc, #152]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007ac:	2302      	movs	r3, #2
 80007ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0318 	add.w	r3, r7, #24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4821      	ldr	r0, [pc, #132]	@ (8000840 <HAL_ADC_MspInit+0xe4>)
 80007bc:	f000 fec6 	bl	800154c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2105      	movs	r1, #5
 80007c4:	2012      	movs	r0, #18
 80007c6:	f000 fe8a 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007ca:	2012      	movs	r0, #18
 80007cc:	f000 fea3 	bl	8001516 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007d0:	e02e      	b.n	8000830 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000844 <HAL_ADC_MspInit+0xe8>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d129      	bne.n	8000830 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a16      	ldr	r2, [pc, #88]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a10      	ldr	r2, [pc, #64]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_ADC_MspInit+0xe0>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0304 	and.w	r3, r3, #4
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800080c:	2304      	movs	r3, #4
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	@ (8000840 <HAL_ADC_MspInit+0xe4>)
 800081c:	f000 fe96 	bl	800154c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000820:	2200      	movs	r2, #0
 8000822:	2105      	movs	r1, #5
 8000824:	2012      	movs	r0, #18
 8000826:	f000 fe5a 	bl	80014de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800082a:	2012      	movs	r0, #18
 800082c:	f000 fe73 	bl	8001516 <HAL_NVIC_EnableIRQ>
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	@ 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40012400 	.word	0x40012400
 800083c:	40021000 	.word	0x40021000
 8000840:	40010800 	.word	0x40010800
 8000844:	40012800 	.word	0x40012800

08000848 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0310 	add.w	r3, r7, #16
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a1c      	ldr	r2, [pc, #112]	@ (80008d4 <HAL_UART_MspInit+0x8c>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d131      	bne.n	80008cc <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000868:	4b1b      	ldr	r3, [pc, #108]	@ (80008d8 <HAL_UART_MspInit+0x90>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a1a      	ldr	r2, [pc, #104]	@ (80008d8 <HAL_UART_MspInit+0x90>)
 800086e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b18      	ldr	r3, [pc, #96]	@ (80008d8 <HAL_UART_MspInit+0x90>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000880:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_UART_MspInit+0x90>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <HAL_UART_MspInit+0x90>)
 8000886:	f043 0304 	orr.w	r3, r3, #4
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_UART_MspInit+0x90>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000898:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800089c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0310 	add.w	r3, r7, #16
 80008aa:	4619      	mov	r1, r3
 80008ac:	480b      	ldr	r0, [pc, #44]	@ (80008dc <HAL_UART_MspInit+0x94>)
 80008ae:	f000 fe4d 	bl	800154c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <HAL_UART_MspInit+0x94>)
 80008c8:	f000 fe40 	bl	800154c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013800 	.word	0x40013800
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	bc80      	pop	{r7}
 8000912:	4770      	bx	lr

08000914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000918:	f000 f8f0 	bl	8000afc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800091c:	f003 fe14 	bl	8004548 <xTaskGetSchedulerState>
 8000920:	4603      	mov	r3, r0
 8000922:	2b01      	cmp	r3, #1
 8000924:	d001      	beq.n	800092a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000926:	f004 fbb7 	bl	8005098 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000934:	4803      	ldr	r0, [pc, #12]	@ (8000944 <ADC1_2_IRQHandler+0x14>)
 8000936:	f000 fa97 	bl	8000e68 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800093a:	4803      	ldr	r0, [pc, #12]	@ (8000948 <ADC1_2_IRQHandler+0x18>)
 800093c:	f000 fa94 	bl	8000e68 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	2000007c 	.word	0x2000007c
 8000948:	200000ac 	.word	0x200000ac

0800094c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  // for each successful conversion
	if (hadc == &hadc1) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_ADC_ConvCpltCallback+0x48>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d109      	bne.n	8000970 <HAL_ADC_ConvCpltCallback+0x24>
		isAirReady = 1;
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <HAL_ADC_ConvCpltCallback+0x4c>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
		airValue = HAL_ADC_GetValue(&hadc1);
 8000962:	480c      	ldr	r0, [pc, #48]	@ (8000994 <HAL_ADC_ConvCpltCallback+0x48>)
 8000964:	f000 fa74 	bl	8000e50 <HAL_ADC_GetValue>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_ADC_ConvCpltCallback+0x50>)
 800096e:	601a      	str	r2, [r3, #0]
	}

	if (hadc == &hadc2) {
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d109      	bne.n	800098c <HAL_ADC_ConvCpltCallback+0x40>
		isTemperatureReady = 1;
 8000978:	4b0a      	ldr	r3, [pc, #40]	@ (80009a4 <HAL_ADC_ConvCpltCallback+0x58>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
		temperatureValue = HAL_ADC_GetValue(&hadc2);
 800097e:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <HAL_ADC_ConvCpltCallback+0x54>)
 8000980:	f000 fa66 	bl	8000e50 <HAL_ADC_GetValue>
 8000984:	4603      	mov	r3, r0
 8000986:	461a      	mov	r2, r3
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <HAL_ADC_ConvCpltCallback+0x5c>)
 800098a:	601a      	str	r2, [r3, #0]
	}
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000007c 	.word	0x2000007c
 8000998:	20000140 	.word	0x20000140
 800099c:	20000148 	.word	0x20000148
 80009a0:	200000ac 	.word	0x200000ac
 80009a4:	20000144 	.word	0x20000144
 80009a8:	2000014c 	.word	0x2000014c

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	@ (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	@ (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	@ (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f004 fdf6 	bl	80055cc <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	@ (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	@ (8000a10 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20005000 	.word	0x20005000
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	20000150 	.word	0x20000150
 8000a14:	20001bf0 	.word	0x20001bf0

08000a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fff8 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	@ (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	@ (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	@ (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f004 fdc3 	bl	80055d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fb85 	bl	8000160 <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a60:	080060cc 	.word	0x080060cc
  ldr r2, =_sbss
 8000a64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a68:	20001bf0 	.word	0x20001bf0

08000a6c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <CAN1_RX1_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	@ (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 fd21 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fe2e 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fd39 	bl	8001532 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 fd01 	bl	80014de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	@ (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	@ (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000154 	.word	0x20000154

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000154 	.word	0x20000154

08000b34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d101      	bne.n	8000b56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e0be      	b.n	8000cd4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d109      	bne.n	8000b78 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff fdf2 	bl	800075c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 fb8f 	bl	800129c <ADC_ConversionStop_Disable>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b86:	f003 0310 	and.w	r3, r3, #16
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f040 8099 	bne.w	8000cc2 <HAL_ADC_Init+0x18e>
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8095 	bne.w	8000cc2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ba0:	f023 0302 	bic.w	r3, r3, #2
 8000ba4:	f043 0202 	orr.w	r2, r3, #2
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bb4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7b1b      	ldrb	r3, [r3, #12]
 8000bba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bbc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bbe:	68ba      	ldr	r2, [r7, #8]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bcc:	d003      	beq.n	8000bd6 <HAL_ADC_Init+0xa2>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d102      	bne.n	8000bdc <HAL_ADC_Init+0xa8>
 8000bd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bda:	e000      	b.n	8000bde <HAL_ADC_Init+0xaa>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	7d1b      	ldrb	r3, [r3, #20]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d119      	bne.n	8000c20 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7b1b      	ldrb	r3, [r3, #12]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d109      	bne.n	8000c08 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	035a      	lsls	r2, r3, #13
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	e00b      	b.n	8000c20 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0c:	f043 0220 	orr.w	r2, r3, #32
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c18:	f043 0201 	orr.w	r2, r3, #1
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	430a      	orrs	r2, r1
 8000c32:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	689a      	ldr	r2, [r3, #8]
 8000c3a:	4b28      	ldr	r3, [pc, #160]	@ (8000cdc <HAL_ADC_Init+0x1a8>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	68b9      	ldr	r1, [r7, #8]
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c50:	d003      	beq.n	8000c5a <HAL_ADC_Init+0x126>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d104      	bne.n	8000c64 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	691b      	ldr	r3, [r3, #16]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	051b      	lsls	r3, r3, #20
 8000c62:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	430a      	orrs	r2, r1
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_ADC_Init+0x1ac>)
 8000c80:	4013      	ands	r3, r2
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d10b      	bne.n	8000ca0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c92:	f023 0303 	bic.w	r3, r3, #3
 8000c96:	f043 0201 	orr.w	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c9e:	e018      	b.n	8000cd2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca4:	f023 0312 	bic.w	r3, r3, #18
 8000ca8:	f043 0210 	orr.w	r2, r3, #16
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb4:	f043 0201 	orr.w	r2, r3, #1
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc0:	e007      	b.n	8000cd2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f043 0210 	orr.w	r2, r3, #16
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	ffe1f7fd 	.word	0xffe1f7fd
 8000ce0:	ff1f0efe 	.word	0xff1f0efe

08000ce4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d101      	bne.n	8000cfe <HAL_ADC_Start_IT+0x1a>
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	e0a0      	b.n	8000e40 <HAL_ADC_Start_IT+0x15c>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2201      	movs	r2, #1
 8000d02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f000 fa6e 	bl	80011e8 <ADC_Enable>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 808f 	bne.w	8000e36 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d20:	f023 0301 	bic.w	r3, r3, #1
 8000d24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a45      	ldr	r2, [pc, #276]	@ (8000e48 <HAL_ADC_Start_IT+0x164>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d105      	bne.n	8000d42 <HAL_ADC_Start_IT+0x5e>
 8000d36:	4b45      	ldr	r3, [pc, #276]	@ (8000e4c <HAL_ADC_Start_IT+0x168>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d115      	bne.n	8000d6e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d46:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d026      	beq.n	8000daa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d60:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000d64:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d6c:	e01d      	b.n	8000daa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a33      	ldr	r2, [pc, #204]	@ (8000e4c <HAL_ADC_Start_IT+0x168>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d004      	beq.n	8000d8e <HAL_ADC_Start_IT+0xaa>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a2f      	ldr	r2, [pc, #188]	@ (8000e48 <HAL_ADC_Start_IT+0x164>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d10d      	bne.n	8000daa <HAL_ADC_Start_IT+0xc6>
 8000d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <HAL_ADC_Start_IT+0x168>)
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000da2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d006      	beq.n	8000dc4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dba:	f023 0206 	bic.w	r2, r3, #6
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dc2:	e002      	b.n	8000dca <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f06f 0202 	mvn.w	r2, #2
 8000dda:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0220 	orr.w	r2, r2, #32
 8000dea:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000df6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000dfa:	d113      	bne.n	8000e24 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e00:	4a11      	ldr	r2, [pc, #68]	@ (8000e48 <HAL_ADC_Start_IT+0x164>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d105      	bne.n	8000e12 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <HAL_ADC_Start_IT+0x168>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	e00c      	b.n	8000e3e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	e003      	b.n	8000e3e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40012800 	.word	0x40012800
 8000e4c:	40012400 	.word	0x40012400

08000e50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	f003 0320 	and.w	r3, r3, #32
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d03e      	beq.n	8000f08 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f003 0302 	and.w	r3, r3, #2
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d039      	beq.n	8000f08 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d105      	bne.n	8000eac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000eb6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000eba:	d11d      	bne.n	8000ef8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d119      	bne.n	8000ef8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0220 	bic.w	r2, r2, #32
 8000ed2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef0:	f043 0201 	orr.w	r2, r3, #1
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff fd27 	bl	800094c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f06f 0212 	mvn.w	r2, #18
 8000f06:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d04d      	beq.n	8000fae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d048      	beq.n	8000fae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	f003 0310 	and.w	r3, r3, #16
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000f3e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000f42:	d012      	beq.n	8000f6a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d125      	bne.n	8000f9e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f5c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f60:	d11d      	bne.n	8000f9e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d119      	bne.n	8000f9e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f78:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d105      	bne.n	8000f9e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f9bd 	bl	800131e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f06f 020c 	mvn.w	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d012      	beq.n	8000fde <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d00d      	beq.n	8000fde <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f809 	bl	8000fe6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f06f 0201 	mvn.w	r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001010:	2b01      	cmp	r3, #1
 8001012:	d101      	bne.n	8001018 <HAL_ADC_ConfigChannel+0x20>
 8001014:	2302      	movs	r3, #2
 8001016:	e0dc      	b.n	80011d2 <HAL_ADC_ConfigChannel+0x1da>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b06      	cmp	r3, #6
 8001026:	d81c      	bhi.n	8001062 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	3b05      	subs	r3, #5
 800103a:	221f      	movs	r2, #31
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	4019      	ands	r1, r3
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	4613      	mov	r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	4413      	add	r3, r2
 8001052:	3b05      	subs	r3, #5
 8001054:	fa00 f203 	lsl.w	r2, r0, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001060:	e03c      	b.n	80010dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b0c      	cmp	r3, #12
 8001068:	d81c      	bhi.n	80010a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4613      	mov	r3, r2
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	3b23      	subs	r3, #35	@ 0x23
 800107c:	221f      	movs	r2, #31
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	4019      	ands	r1, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	3b23      	subs	r3, #35	@ 0x23
 8001096:	fa00 f203 	lsl.w	r2, r0, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	430a      	orrs	r2, r1
 80010a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80010a2:	e01b      	b.n	80010dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	3b41      	subs	r3, #65	@ 0x41
 80010b6:	221f      	movs	r2, #31
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	3b41      	subs	r3, #65	@ 0x41
 80010d0:	fa00 f203 	lsl.w	r2, r0, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d91c      	bls.n	800111e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68d9      	ldr	r1, [r3, #12]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4613      	mov	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	3b1e      	subs	r3, #30
 80010f6:	2207      	movs	r2, #7
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	4019      	ands	r1, r3
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	6898      	ldr	r0, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	3b1e      	subs	r3, #30
 8001110:	fa00 f203 	lsl.w	r2, r0, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	e019      	b.n	8001152 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6919      	ldr	r1, [r3, #16]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	2207      	movs	r2, #7
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4019      	ands	r1, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6898      	ldr	r0, [r3, #8]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	4613      	mov	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	fa00 f203 	lsl.w	r2, r0, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2b10      	cmp	r3, #16
 8001158:	d003      	beq.n	8001162 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800115e:	2b11      	cmp	r3, #17
 8001160:	d132      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_ADC_ConfigChannel+0x1e4>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d125      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d126      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689a      	ldr	r2, [r3, #8]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001188:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	2b10      	cmp	r3, #16
 8001190:	d11a      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001198:	fba2 2303 	umull	r2, r3, r2, r3
 800119c:	0c9a      	lsrs	r2, r3, #18
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011a8:	e002      	b.n	80011b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	3b01      	subs	r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d1f9      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x1b2>
 80011b6:	e007      	b.n	80011c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011bc:	f043 0220 	orr.w	r2, r3, #32
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr
 80011dc:	40012400 	.word	0x40012400
 80011e0:	20000000 	.word	0x20000000
 80011e4:	431bde83 	.word	0x431bde83

080011e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b01      	cmp	r3, #1
 8001204:	d040      	beq.n	8001288 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0201 	orr.w	r2, r2, #1
 8001214:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001216:	4b1f      	ldr	r3, [pc, #124]	@ (8001294 <ADC_Enable+0xac>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a1f      	ldr	r2, [pc, #124]	@ (8001298 <ADC_Enable+0xb0>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001224:	e002      	b.n	800122c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001232:	f7ff fc75 	bl	8000b20 <HAL_GetTick>
 8001236:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001238:	e01f      	b.n	800127a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800123a:	f7ff fc71 	bl	8000b20 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d918      	bls.n	800127a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b01      	cmp	r3, #1
 8001254:	d011      	beq.n	800127a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	f043 0210 	orr.w	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001266:	f043 0201 	orr.w	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e007      	b.n	800128a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	d1d8      	bne.n	800123a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83

0800129c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d12e      	bne.n	8001314 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012c6:	f7ff fc2b 	bl	8000b20 <HAL_GetTick>
 80012ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012cc:	e01b      	b.n	8001306 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80012ce:	f7ff fc27 	bl	8000b20 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d914      	bls.n	8001306 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d10d      	bne.n	8001306 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ee:	f043 0210 	orr.w	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e007      	b.n	8001316 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d0dc      	beq.n	80012ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f003 0307 	and.w	r3, r3, #7
 800133e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800134c:	4013      	ands	r3, r2
 800134e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001358:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800135c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001362:	4a04      	ldr	r2, [pc, #16]	@ (8001374 <__NVIC_SetPriorityGrouping+0x44>)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	60d3      	str	r3, [r2, #12]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <__NVIC_GetPriorityGrouping+0x18>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	0a1b      	lsrs	r3, r3, #8
 8001382:	f003 0307 	and.w	r3, r3, #7
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db0b      	blt.n	80013be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	f003 021f 	and.w	r2, r3, #31
 80013ac:	4906      	ldr	r1, [pc, #24]	@ (80013c8 <__NVIC_EnableIRQ+0x34>)
 80013ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b2:	095b      	lsrs	r3, r3, #5
 80013b4:	2001      	movs	r0, #1
 80013b6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	@ (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	@ (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	@ 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	@ 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001494:	d301      	bcc.n	800149a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001496:	2301      	movs	r3, #1
 8001498:	e00f      	b.n	80014ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <SysTick_Config+0x40>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a2:	210f      	movs	r1, #15
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f7ff ff90 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ac:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <SysTick_Config+0x40>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <SysTick_Config+0x40>)
 80014b4:	2207      	movs	r2, #7
 80014b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	e000e010 	.word	0xe000e010

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff2d 	bl	8001330 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff42 	bl	8001378 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff35 	bl	8001394 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa2 	bl	8001484 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b08b      	sub	sp, #44	@ 0x2c
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155e:	e169      	b.n	8001834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001560:	2201      	movs	r2, #1
 8001562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	429a      	cmp	r2, r3
 800157a:	f040 8158 	bne.w	800182e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4a9a      	ldr	r2, [pc, #616]	@ (80017ec <HAL_GPIO_Init+0x2a0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d05e      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001588:	4a98      	ldr	r2, [pc, #608]	@ (80017ec <HAL_GPIO_Init+0x2a0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d875      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800158e:	4a98      	ldr	r2, [pc, #608]	@ (80017f0 <HAL_GPIO_Init+0x2a4>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d058      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 8001594:	4a96      	ldr	r2, [pc, #600]	@ (80017f0 <HAL_GPIO_Init+0x2a4>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d86f      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 800159a:	4a96      	ldr	r2, [pc, #600]	@ (80017f4 <HAL_GPIO_Init+0x2a8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d052      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015a0:	4a94      	ldr	r2, [pc, #592]	@ (80017f4 <HAL_GPIO_Init+0x2a8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d869      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015a6:	4a94      	ldr	r2, [pc, #592]	@ (80017f8 <HAL_GPIO_Init+0x2ac>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d04c      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015ac:	4a92      	ldr	r2, [pc, #584]	@ (80017f8 <HAL_GPIO_Init+0x2ac>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d863      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015b2:	4a92      	ldr	r2, [pc, #584]	@ (80017fc <HAL_GPIO_Init+0x2b0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d046      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
 80015b8:	4a90      	ldr	r2, [pc, #576]	@ (80017fc <HAL_GPIO_Init+0x2b0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d85d      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015be:	2b12      	cmp	r3, #18
 80015c0:	d82a      	bhi.n	8001618 <HAL_GPIO_Init+0xcc>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d859      	bhi.n	800167a <HAL_GPIO_Init+0x12e>
 80015c6:	a201      	add	r2, pc, #4	@ (adr r2, 80015cc <HAL_GPIO_Init+0x80>)
 80015c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015cc:	08001647 	.word	0x08001647
 80015d0:	08001621 	.word	0x08001621
 80015d4:	08001633 	.word	0x08001633
 80015d8:	08001675 	.word	0x08001675
 80015dc:	0800167b 	.word	0x0800167b
 80015e0:	0800167b 	.word	0x0800167b
 80015e4:	0800167b 	.word	0x0800167b
 80015e8:	0800167b 	.word	0x0800167b
 80015ec:	0800167b 	.word	0x0800167b
 80015f0:	0800167b 	.word	0x0800167b
 80015f4:	0800167b 	.word	0x0800167b
 80015f8:	0800167b 	.word	0x0800167b
 80015fc:	0800167b 	.word	0x0800167b
 8001600:	0800167b 	.word	0x0800167b
 8001604:	0800167b 	.word	0x0800167b
 8001608:	0800167b 	.word	0x0800167b
 800160c:	0800167b 	.word	0x0800167b
 8001610:	08001629 	.word	0x08001629
 8001614:	0800163d 	.word	0x0800163d
 8001618:	4a79      	ldr	r2, [pc, #484]	@ (8001800 <HAL_GPIO_Init+0x2b4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800161e:	e02c      	b.n	800167a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	623b      	str	r3, [r7, #32]
          break;
 8001626:	e029      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	3304      	adds	r3, #4
 800162e:	623b      	str	r3, [r7, #32]
          break;
 8001630:	e024      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	3308      	adds	r3, #8
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e01f      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	330c      	adds	r3, #12
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e01a      	b.n	800167c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800164e:	2304      	movs	r3, #4
 8001650:	623b      	str	r3, [r7, #32]
          break;
 8001652:	e013      	b.n	800167c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800165c:	2308      	movs	r3, #8
 800165e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	611a      	str	r2, [r3, #16]
          break;
 8001666:	e009      	b.n	800167c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001668:	2308      	movs	r3, #8
 800166a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	615a      	str	r2, [r3, #20]
          break;
 8001672:	e003      	b.n	800167c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001674:	2300      	movs	r3, #0
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e000      	b.n	800167c <HAL_GPIO_Init+0x130>
          break;
 800167a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	2bff      	cmp	r3, #255	@ 0xff
 8001680:	d801      	bhi.n	8001686 <HAL_GPIO_Init+0x13a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	e001      	b.n	800168a <HAL_GPIO_Init+0x13e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3304      	adds	r3, #4
 800168a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	d802      	bhi.n	8001698 <HAL_GPIO_Init+0x14c>
 8001692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x152>
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	3b08      	subs	r3, #8
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	210f      	movs	r1, #15
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	401a      	ands	r2, r3
 80016b0:	6a39      	ldr	r1, [r7, #32]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80b1 	beq.w	800182e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <HAL_GPIO_Init+0x2b8>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001804 <HAL_GPIO_Init+0x2b8>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6193      	str	r3, [r2, #24]
 80016d8:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_GPIO_Init+0x2b8>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e4:	4a48      	ldr	r2, [pc, #288]	@ (8001808 <HAL_GPIO_Init+0x2bc>)
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a40      	ldr	r2, [pc, #256]	@ (800180c <HAL_GPIO_Init+0x2c0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d013      	beq.n	8001738 <HAL_GPIO_Init+0x1ec>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3f      	ldr	r2, [pc, #252]	@ (8001810 <HAL_GPIO_Init+0x2c4>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d00d      	beq.n	8001734 <HAL_GPIO_Init+0x1e8>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3e      	ldr	r2, [pc, #248]	@ (8001814 <HAL_GPIO_Init+0x2c8>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d007      	beq.n	8001730 <HAL_GPIO_Init+0x1e4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3d      	ldr	r2, [pc, #244]	@ (8001818 <HAL_GPIO_Init+0x2cc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d101      	bne.n	800172c <HAL_GPIO_Init+0x1e0>
 8001728:	2303      	movs	r3, #3
 800172a:	e006      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 800172c:	2304      	movs	r3, #4
 800172e:	e004      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001730:	2302      	movs	r3, #2
 8001732:	e002      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001734:	2301      	movs	r3, #1
 8001736:	e000      	b.n	800173a <HAL_GPIO_Init+0x1ee>
 8001738:	2300      	movs	r3, #0
 800173a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800173c:	f002 0203 	and.w	r2, r2, #3
 8001740:	0092      	lsls	r2, r2, #2
 8001742:	4093      	lsls	r3, r2
 8001744:	68fa      	ldr	r2, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174a:	492f      	ldr	r1, [pc, #188]	@ (8001808 <HAL_GPIO_Init+0x2bc>)
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b2d      	ldr	r3, [pc, #180]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	492c      	ldr	r1, [pc, #176]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001772:	4b2a      	ldr	r3, [pc, #168]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4928      	ldr	r1, [pc, #160]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 800177c:	4013      	ands	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d006      	beq.n	800179a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b23      	ldr	r3, [pc, #140]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4922      	ldr	r1, [pc, #136]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e006      	b.n	80017a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	491e      	ldr	r1, [pc, #120]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d006      	beq.n	80017c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4918      	ldr	r1, [pc, #96]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c2:	4b16      	ldr	r3, [pc, #88]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	43db      	mvns	r3, r3
 80017ca:	4914      	ldr	r1, [pc, #80]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d021      	beq.n	8001820 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	490e      	ldr	r1, [pc, #56]	@ (800181c <HAL_GPIO_Init+0x2d0>)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e021      	b.n	800182e <HAL_GPIO_Init+0x2e2>
 80017ea:	bf00      	nop
 80017ec:	10320000 	.word	0x10320000
 80017f0:	10310000 	.word	0x10310000
 80017f4:	10220000 	.word	0x10220000
 80017f8:	10210000 	.word	0x10210000
 80017fc:	10120000 	.word	0x10120000
 8001800:	10110000 	.word	0x10110000
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000
 800180c:	40010800 	.word	0x40010800
 8001810:	40010c00 	.word	0x40010c00
 8001814:	40011000 	.word	0x40011000
 8001818:	40011400 	.word	0x40011400
 800181c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_GPIO_Init+0x304>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	43db      	mvns	r3, r3
 8001828:	4909      	ldr	r1, [pc, #36]	@ (8001850 <HAL_GPIO_Init+0x304>)
 800182a:	4013      	ands	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f ae8e 	bne.w	8001560 <HAL_GPIO_Init+0x14>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	372c      	adds	r7, #44	@ 0x2c
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e272      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8087 	beq.w	80019b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a4:	4b92      	ldr	r3, [pc, #584]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 030c 	and.w	r3, r3, #12
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00c      	beq.n	80018ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018b0:	4b8f      	ldr	r3, [pc, #572]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	d112      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
 80018bc:	4b8c      	ldr	r3, [pc, #560]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c8:	d10b      	bne.n	80018e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ca:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d06c      	beq.n	80019b0 <HAL_RCC_OscConfig+0x12c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d168      	bne.n	80019b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e24c      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x76>
 80018ec:	4b80      	ldr	r3, [pc, #512]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a7f      	ldr	r2, [pc, #508]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02e      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b7b      	ldr	r3, [pc, #492]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7a      	ldr	r2, [pc, #488]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b78      	ldr	r3, [pc, #480]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a77      	ldr	r2, [pc, #476]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e01d      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0xbc>
 8001926:	4b72      	ldr	r3, [pc, #456]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a71      	ldr	r2, [pc, #452]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6e      	ldr	r2, [pc, #440]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e00b      	b.n	8001958 <HAL_RCC_OscConfig+0xd4>
 8001940:	4b6b      	ldr	r3, [pc, #428]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a6a      	ldr	r2, [pc, #424]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001946:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b68      	ldr	r3, [pc, #416]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a67      	ldr	r2, [pc, #412]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d013      	beq.n	8001988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f8de 	bl	8000b20 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f8da 	bl	8000b20 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	@ 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e200      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	4b5d      	ldr	r3, [pc, #372]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0f0      	beq.n	8001968 <HAL_RCC_OscConfig+0xe4>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001988:	f7ff f8ca 	bl	8000b20 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001990:	f7ff f8c6 	bl	8000b20 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b64      	cmp	r3, #100	@ 0x64
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e1ec      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	4b53      	ldr	r3, [pc, #332]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x10c>
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d063      	beq.n	8001a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019be:	4b4c      	ldr	r3, [pc, #304]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f003 030c 	and.w	r3, r3, #12
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00b      	beq.n	80019e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019ca:	4b49      	ldr	r3, [pc, #292]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d11c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
 80019d6:	4b46      	ldr	r3, [pc, #280]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d116      	bne.n	8001a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019e2:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e1c0      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fa:	4b3d      	ldr	r3, [pc, #244]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4939      	ldr	r1, [pc, #228]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a0e:	e03a      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a18:	4b36      	ldr	r3, [pc, #216]	@ (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f87f 	bl	8000b20 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a26:	f7ff f87b 	bl	8000b20 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1a1      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	4b2d      	ldr	r3, [pc, #180]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0f0      	beq.n	8001a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b2a      	ldr	r3, [pc, #168]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4927      	ldr	r1, [pc, #156]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	600b      	str	r3, [r1, #0]
 8001a58:	e015      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff f85e 	bl	8000b20 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a68:	f7ff f85a 	bl	8000b20 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e180      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d03a      	beq.n	8001b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d019      	beq.n	8001ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b17      	ldr	r3, [pc, #92]	@ (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff f83e 	bl	8000b20 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f83a 	bl	8000b20 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e160      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	@ (8001af0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f000 face 	bl	8002068 <RCC_Delay>
 8001acc:	e01c      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f824 	bl	8000b20 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	e00f      	b.n	8001afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f820 	bl	8000b20 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d908      	bls.n	8001afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e146      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	42420000 	.word	0x42420000
 8001af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	4b92      	ldr	r3, [pc, #584]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1e9      	bne.n	8001adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a6 	beq.w	8001c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b88      	ldr	r3, [pc, #544]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a87      	ldr	r2, [pc, #540]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b82      	ldr	r3, [pc, #520]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7e      	ldr	r2, [pc, #504]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe ffe1 	bl	8000b20 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe ffdd 	bl	8000b20 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	@ 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e103      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b75      	ldr	r3, [pc, #468]	@ (8001d4c <HAL_RCC_OscConfig+0x4c8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x312>
 8001b88:	4b6f      	ldr	r3, [pc, #444]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x334>
 8001b9e:	4b6a      	ldr	r3, [pc, #424]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a69      	ldr	r2, [pc, #420]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b67      	ldr	r3, [pc, #412]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a66      	ldr	r2, [pc, #408]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x356>
 8001bc0:	4b61      	ldr	r3, [pc, #388]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a60      	ldr	r2, [pc, #384]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b5e      	ldr	r3, [pc, #376]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a5d      	ldr	r2, [pc, #372]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x36e>
 8001bda:	4b5b      	ldr	r3, [pc, #364]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a5a      	ldr	r2, [pc, #360]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b58      	ldr	r3, [pc, #352]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a57      	ldr	r2, [pc, #348]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe ff91 	bl	8000b20 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ff8d 	bl	8000b20 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0b1      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b4b      	ldr	r3, [pc, #300]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x37e>
 8001c24:	e014      	b.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe ff7b 	bl	8000b20 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e00a      	b.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe ff77 	bl	8000b20 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e09b      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	4b40      	ldr	r3, [pc, #256]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1ee      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c56:	4b3c      	ldr	r3, [pc, #240]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8087 	beq.w	8001d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c6c:	4b36      	ldr	r3, [pc, #216]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d061      	beq.n	8001d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d146      	bne.n	8001d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c80:	4b33      	ldr	r3, [pc, #204]	@ (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7fe ff4b 	bl	8000b20 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe ff47 	bl	8000b20 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e06d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a1b      	ldr	r3, [r3, #32]
 8001cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cb4:	d108      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4921      	ldr	r1, [pc, #132]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a19      	ldr	r1, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	491b      	ldr	r1, [pc, #108]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7fe ff1b 	bl	8000b20 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7fe ff17 	bl	8000b20 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e03d      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x46a>
 8001d0c:	e035      	b.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0e:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <HAL_RCC_OscConfig+0x4cc>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff04 	bl	8000b20 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe ff00 	bl	8000b20 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e026      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_RCC_OscConfig+0x4c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x498>
 8001d3a:	e01e      	b.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e019      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_OscConfig+0x500>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d0      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d910      	bls.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b67      	ldr	r3, [pc, #412]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f023 0207 	bic.w	r2, r3, #7
 8001db2:	4965      	ldr	r1, [pc, #404]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	4b63      	ldr	r3, [pc, #396]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0b8      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d020      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de4:	4b59      	ldr	r3, [pc, #356]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dfc:	4b53      	ldr	r3, [pc, #332]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a52      	ldr	r2, [pc, #328]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b50      	ldr	r3, [pc, #320]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	494d      	ldr	r1, [pc, #308]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d040      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d107      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07f      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b41      	ldr	r3, [pc, #260]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e073      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3d      	ldr	r3, [pc, #244]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e06b      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b39      	ldr	r3, [pc, #228]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4936      	ldr	r1, [pc, #216]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7fe fe52 	bl	8000b20 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7fe fe4e 	bl	8000b20 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e053      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d210      	bcs.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4922      	ldr	r1, [pc, #136]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e032      	b.n	8001f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d008      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4916      	ldr	r1, [pc, #88]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d009      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f16:	f000 f821 	bl	8001f5c <HAL_RCC_GetSysClockFreq>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	490a      	ldr	r1, [pc, #40]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f28:	5ccb      	ldrb	r3, [r1, r3]
 8001f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <HAL_RCC_ClockConfig+0x1cc>)
 8001f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1d0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fdb0 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	0800605c 	.word	0x0800605c
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d002      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x30>
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d003      	beq.n	8001f92 <HAL_RCC_GetSysClockFreq+0x36>
 8001f8a:	e027      	b.n	8001fdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f8e:	613b      	str	r3, [r7, #16]
      break;
 8001f90:	e027      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a17      	ldr	r2, [pc, #92]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001faa:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	0c5b      	lsrs	r3, r3, #17
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	fb03 f202 	mul.w	r2, r3, r2
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	e004      	b.n	8001fd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fd0:	fb02 f303 	mul.w	r3, r2, r3
 8001fd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
      break;
 8001fda:	e002      	b.n	8001fe2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fde:	613b      	str	r3, [r7, #16]
      break;
 8001fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fe2:	693b      	ldr	r3, [r7, #16]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	007a1200 	.word	0x007a1200
 8001ff8:	08006074 	.word	0x08006074
 8001ffc:	08006084 	.word	0x08006084
 8002000:	003d0900 	.word	0x003d0900

08002004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002008:	4b02      	ldr	r3, [pc, #8]	@ (8002014 <HAL_RCC_GetHCLKFreq+0x10>)
 800200a:	681b      	ldr	r3, [r3, #0]
}
 800200c:	4618      	mov	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	20000000 	.word	0x20000000

08002018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800201c:	f7ff fff2 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002020:	4602      	mov	r2, r0
 8002022:	4b05      	ldr	r3, [pc, #20]	@ (8002038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	0a1b      	lsrs	r3, r3, #8
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	4903      	ldr	r1, [pc, #12]	@ (800203c <HAL_RCC_GetPCLK1Freq+0x24>)
 800202e:	5ccb      	ldrb	r3, [r1, r3]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40021000 	.word	0x40021000
 800203c:	0800606c 	.word	0x0800606c

08002040 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002044:	f7ff ffde 	bl	8002004 <HAL_RCC_GetHCLKFreq>
 8002048:	4602      	mov	r2, r0
 800204a:	4b05      	ldr	r3, [pc, #20]	@ (8002060 <HAL_RCC_GetPCLK2Freq+0x20>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	0adb      	lsrs	r3, r3, #11
 8002050:	f003 0307 	and.w	r3, r3, #7
 8002054:	4903      	ldr	r1, [pc, #12]	@ (8002064 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40021000 	.word	0x40021000
 8002064:	0800606c 	.word	0x0800606c

08002068 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002070:	4b0a      	ldr	r3, [pc, #40]	@ (800209c <RCC_Delay+0x34>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <RCC_Delay+0x38>)
 8002076:	fba2 2303 	umull	r2, r3, r2, r3
 800207a:	0a5b      	lsrs	r3, r3, #9
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002084:	bf00      	nop
  }
  while (Delay --);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1e5a      	subs	r2, r3, #1
 800208a:	60fa      	str	r2, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f9      	bne.n	8002084 <RCC_Delay+0x1c>
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr
 800209c:	20000000 	.word	0x20000000
 80020a0:	10624dd3 	.word	0x10624dd3

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d07d      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c4:	4b4f      	ldr	r3, [pc, #316]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10d      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020da:	61d3      	str	r3, [r2, #28]
 80020dc:	4b49      	ldr	r3, [pc, #292]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e8:	2301      	movs	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b46      	ldr	r3, [pc, #280]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d118      	bne.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f8:	4b43      	ldr	r3, [pc, #268]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a42      	ldr	r2, [pc, #264]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002104:	f7fe fd0c 	bl	8000b20 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	e008      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe fd08 	bl	8000b20 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	@ 0x64
 8002118:	d901      	bls.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e06d      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211e:	4b3a      	ldr	r3, [pc, #232]	@ (8002208 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800212a:	4b36      	ldr	r3, [pc, #216]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002132:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d02e      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d027      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002148:	4b2e      	ldr	r3, [pc, #184]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002150:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002152:	4b2e      	ldr	r3, [pc, #184]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800215e:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d014      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216e:	f7fe fcd7 	bl	8000b20 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	e00a      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002176:	f7fe fcd3 	bl	8000b20 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002184:	4293      	cmp	r3, r2
 8002186:	d901      	bls.n	800218c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e036      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ee      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002198:	4b1a      	ldr	r3, [pc, #104]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4917      	ldr	r1, [pc, #92]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	4a13      	ldr	r2, [pc, #76]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	490b      	ldr	r1, [pc, #44]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4904      	ldr	r1, [pc, #16]	@ (8002204 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	40007000 	.word	0x40007000
 800220c:	42420440 	.word	0x42420440

08002210 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e042      	b.n	80022a8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7fe fb06 	bl	8000848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2224      	movs	r2, #36	@ 0x24
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002252:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f971 	bl	800253c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002268:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	695a      	ldr	r2, [r3, #20]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002278:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68da      	ldr	r2, [r3, #12]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002288:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2220      	movs	r2, #32
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	4613      	mov	r3, r2
 80022be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b20      	cmp	r3, #32
 80022ce:	d175      	bne.n	80023bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <HAL_UART_Transmit+0x2c>
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e06e      	b.n	80023be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2221      	movs	r2, #33	@ 0x21
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022ee:	f7fe fc17 	bl	8000b20 <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	88fa      	ldrh	r2, [r7, #6]
 80022f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	88fa      	ldrh	r2, [r7, #6]
 80022fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002308:	d108      	bne.n	800231c <HAL_UART_Transmit+0x6c>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d104      	bne.n	800231c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	e003      	b.n	8002324 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002324:	e02e      	b.n	8002384 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f848 	bl	80023c6 <UART_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e03a      	b.n	80023be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10b      	bne.n	8002366 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800235c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	3302      	adds	r3, #2
 8002362:	61bb      	str	r3, [r7, #24]
 8002364:	e007      	b.n	8002376 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	3301      	adds	r3, #1
 8002374:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002388:	b29b      	uxth	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1cb      	bne.n	8002326 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2200      	movs	r2, #0
 8002396:	2140      	movs	r1, #64	@ 0x40
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f814 	bl	80023c6 <UART_WaitOnFlagUntilTimeout>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e006      	b.n	80023be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023b8:	2300      	movs	r3, #0
 80023ba:	e000      	b.n	80023be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023bc:	2302      	movs	r3, #2
  }
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	60f8      	str	r0, [r7, #12]
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	4613      	mov	r3, r2
 80023d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d6:	e03b      	b.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023de:	d037      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7fe fb9e 	bl	8000b20 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	6a3a      	ldr	r2, [r7, #32]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e03a      	b.n	8002470 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b80      	cmp	r3, #128	@ 0x80
 800240c:	d020      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2b40      	cmp	r3, #64	@ 0x40
 8002412:	d01d      	beq.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d116      	bne.n	8002450 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f81d 	bl	8002478 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2208      	movs	r2, #8
 8002442:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e00f      	b.n	8002470 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d0b4      	beq.n	80023d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002478:	b480      	push	{r7}
 800247a:	b095      	sub	sp, #84	@ 0x54
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	e853 3f00 	ldrex	r3, [r3]
 800248e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80024a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e5      	bne.n	8002480 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3314      	adds	r3, #20
 80024ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	e853 3f00 	ldrex	r3, [r3]
 80024c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	3314      	adds	r3, #20
 80024d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024dc:	e841 2300 	strex	r3, r2, [r1]
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1e5      	bne.n	80024b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d119      	bne.n	8002524 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	e853 3f00 	ldrex	r3, [r3]
 80024fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	f023 0310 	bic.w	r3, r3, #16
 8002506:	647b      	str	r3, [r7, #68]	@ 0x44
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002510:	61ba      	str	r2, [r7, #24]
 8002512:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002514:	6979      	ldr	r1, [r7, #20]
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	e841 2300 	strex	r3, r2, [r1]
 800251c:	613b      	str	r3, [r7, #16]
   return(result);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e5      	bne.n	80024f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002532:	bf00      	nop
 8002534:	3754      	adds	r7, #84	@ 0x54
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr

0800253c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	691b      	ldr	r3, [r3, #16]
 800254a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002576:	f023 030c 	bic.w	r3, r3, #12
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	430b      	orrs	r3, r1
 8002582:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2c      	ldr	r2, [pc, #176]	@ (8002650 <UART_SetConfig+0x114>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d103      	bne.n	80025ac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025a4:	f7ff fd4c 	bl	8002040 <HAL_RCC_GetPCLK2Freq>
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	e002      	b.n	80025b2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025ac:	f7ff fd34 	bl	8002018 <HAL_RCC_GetPCLK1Freq>
 80025b0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <UART_SetConfig+0x118>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	0119      	lsls	r1, r3, #4
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <UART_SetConfig+0x118>)
 80025ea:	fba3 0302 	umull	r0, r3, r3, r2
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2064      	movs	r0, #100	@ 0x64
 80025f2:	fb00 f303 	mul.w	r3, r0, r3
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	3332      	adds	r3, #50	@ 0x32
 80025fc:	4a15      	ldr	r2, [pc, #84]	@ (8002654 <UART_SetConfig+0x118>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002608:	4419      	add	r1, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <UART_SetConfig+0x118>)
 8002622:	fba3 0302 	umull	r0, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2064      	movs	r0, #100	@ 0x64
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	@ 0x32
 8002634:	4a07      	ldr	r2, [pc, #28]	@ (8002654 <UART_SetConfig+0x118>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 020f 	and.w	r2, r3, #15
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	440a      	add	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002648:	bf00      	nop
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40013800 	.word	0x40013800
 8002654:	51eb851f 	.word	0x51eb851f

08002658 <__NVIC_SetPriority>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	6039      	str	r1, [r7, #0]
 8002662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	2b00      	cmp	r3, #0
 800266a:	db0a      	blt.n	8002682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	b2da      	uxtb	r2, r3
 8002670:	490c      	ldr	r1, [pc, #48]	@ (80026a4 <__NVIC_SetPriority+0x4c>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	0112      	lsls	r2, r2, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	440b      	add	r3, r1
 800267c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002680:	e00a      	b.n	8002698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	4908      	ldr	r1, [pc, #32]	@ (80026a8 <__NVIC_SetPriority+0x50>)
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	3b04      	subs	r3, #4
 8002690:	0112      	lsls	r2, r2, #4
 8002692:	b2d2      	uxtb	r2, r2
 8002694:	440b      	add	r3, r1
 8002696:	761a      	strb	r2, [r3, #24]
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	bc80      	pop	{r7}
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026b0:	2100      	movs	r1, #0
 80026b2:	f06f 0004 	mvn.w	r0, #4
 80026b6:	f7ff ffcf 	bl	8002658 <__NVIC_SetPriority>
#endif
}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026c6:	f3ef 8305 	mrs	r3, IPSR
 80026ca:	603b      	str	r3, [r7, #0]
  return(result);
 80026cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80026d2:	f06f 0305 	mvn.w	r3, #5
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	e00c      	b.n	80026f4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80026da:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <osKernelInitialize+0x40>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <osKernelInitialize+0x40>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	e002      	b.n	80026f4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20000158 	.word	0x20000158

08002704 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800270a:	f3ef 8305 	mrs	r3, IPSR
 800270e:	603b      	str	r3, [r7, #0]
  return(result);
 8002710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002716:	f06f 0305 	mvn.w	r3, #5
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	e010      	b.n	8002740 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800271e:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <osKernelStart+0x48>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d109      	bne.n	800273a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002726:	f7ff ffc1 	bl	80026ac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <osKernelStart+0x48>)
 800272c:	2202      	movs	r2, #2
 800272e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002730:	f001 fabe 	bl	8003cb0 <vTaskStartScheduler>
      stat = osOK;
 8002734:	2300      	movs	r3, #0
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e002      	b.n	8002740 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800273a:	f04f 33ff 	mov.w	r3, #4294967295
 800273e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000158 	.word	0x20000158

08002750 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	@ 0x38
 8002754:	af04      	add	r7, sp, #16
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002760:	f3ef 8305 	mrs	r3, IPSR
 8002764:	617b      	str	r3, [r7, #20]
  return(result);
 8002766:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002768:	2b00      	cmp	r3, #0
 800276a:	d17e      	bne.n	800286a <osThreadNew+0x11a>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d07b      	beq.n	800286a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002772:	2380      	movs	r3, #128	@ 0x80
 8002774:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002776:	2318      	movs	r3, #24
 8002778:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295
 8002782:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d045      	beq.n	8002816 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d002      	beq.n	8002798 <osThreadNew+0x48>
        name = attr->name;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d008      	beq.n	80027be <osThreadNew+0x6e>
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b38      	cmp	r3, #56	@ 0x38
 80027b0:	d805      	bhi.n	80027be <osThreadNew+0x6e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <osThreadNew+0x72>
        return (NULL);
 80027be:	2300      	movs	r3, #0
 80027c0:	e054      	b.n	800286c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00e      	beq.n	80027f8 <osThreadNew+0xa8>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	2b5b      	cmp	r3, #91	@ 0x5b
 80027e0:	d90a      	bls.n	80027f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <osThreadNew+0xa8>
        mem = 1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	61bb      	str	r3, [r7, #24]
 80027f6:	e010      	b.n	800281a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10c      	bne.n	800281a <osThreadNew+0xca>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d108      	bne.n	800281a <osThreadNew+0xca>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <osThreadNew+0xca>
          mem = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e001      	b.n	800281a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d110      	bne.n	8002842 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002828:	9202      	str	r2, [sp, #8]
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	6a3a      	ldr	r2, [r7, #32]
 8002834:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f001 f85e 	bl	80038f8 <xTaskCreateStatic>
 800283c:	4603      	mov	r3, r0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e013      	b.n	800286a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d110      	bne.n	800286a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	b29a      	uxth	r2, r3
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f001 f8ac 	bl	80039b8 <xTaskCreate>
 8002860:	4603      	mov	r3, r0
 8002862:	2b01      	cmp	r3, #1
 8002864:	d001      	beq.n	800286a <osThreadNew+0x11a>
            hTask = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800286a:	693b      	ldr	r3, [r7, #16]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3728      	adds	r7, #40	@ 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287c:	f3ef 8305 	mrs	r3, IPSR
 8002880:	60bb      	str	r3, [r7, #8]
  return(result);
 8002882:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <osDelay+0x1c>
    stat = osErrorISR;
 8002888:	f06f 0305 	mvn.w	r3, #5
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	e007      	b.n	80028a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f001 f9d2 	bl	8003c44 <vTaskDelay>
    }
  }

  return (stat);
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b08a      	sub	sp, #40	@ 0x28
 80028ae:	af02      	add	r7, sp, #8
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ba:	f3ef 8305 	mrs	r3, IPSR
 80028be:	613b      	str	r3, [r7, #16]
  return(result);
 80028c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d15f      	bne.n	8002986 <osMessageQueueNew+0xdc>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d05c      	beq.n	8002986 <osMessageQueueNew+0xdc>
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d059      	beq.n	8002986 <osMessageQueueNew+0xdc>
    mem = -1;
 80028d2:	f04f 33ff 	mov.w	r3, #4294967295
 80028d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d029      	beq.n	8002932 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d012      	beq.n	800290c <osMessageQueueNew+0x62>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80028ec:	d90e      	bls.n	800290c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695a      	ldr	r2, [r3, #20]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	429a      	cmp	r2, r3
 8002904:	d302      	bcc.n	800290c <osMessageQueueNew+0x62>
        mem = 1;
 8002906:	2301      	movs	r3, #1
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e014      	b.n	8002936 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d110      	bne.n	8002936 <osMessageQueueNew+0x8c>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d108      	bne.n	8002936 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <osMessageQueueNew+0x8c>
          mem = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	61bb      	str	r3, [r7, #24]
 8002930:	e001      	b.n	8002936 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d10b      	bne.n	8002954 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2100      	movs	r1, #0
 8002946:	9100      	str	r1, [sp, #0]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fa4a 	bl	8002de4 <xQueueGenericCreateStatic>
 8002950:	61f8      	str	r0, [r7, #28]
 8002952:	e008      	b.n	8002966 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800295a:	2200      	movs	r2, #0
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f000 fabd 	bl	8002ede <xQueueGenericCreate>
 8002964:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00c      	beq.n	8002986 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <osMessageQueueNew+0xd0>
        name = attr->name;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	e001      	b.n	800297e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800297e:	6979      	ldr	r1, [r7, #20]
 8002980:	69f8      	ldr	r0, [r7, #28]
 8002982:	f000 ff5d 	bl	8003840 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002986:	69fb      	ldr	r3, [r7, #28]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029a8:	f3ef 8305 	mrs	r3, IPSR
 80029ac:	617b      	str	r3, [r7, #20]
  return(result);
 80029ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d028      	beq.n	8002a06 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d005      	beq.n	80029c6 <osMessageQueuePut+0x36>
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <osMessageQueuePut+0x36>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80029c6:	f06f 0303 	mvn.w	r3, #3
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	e038      	b.n	8002a40 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80029d2:	f107 0210 	add.w	r2, r7, #16
 80029d6:	2300      	movs	r3, #0
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	69b8      	ldr	r0, [r7, #24]
 80029dc:	f000 fbe0 	bl	80031a0 <xQueueGenericSendFromISR>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d003      	beq.n	80029ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80029e6:	f06f 0302 	mvn.w	r3, #2
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	e028      	b.n	8002a40 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d025      	beq.n	8002a40 <osMessageQueuePut+0xb0>
 80029f4:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <osMessageQueuePut+0xbc>)
 80029f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	f3bf 8f6f 	isb	sy
 8002a04:	e01c      	b.n	8002a40 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <osMessageQueuePut+0x82>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d103      	bne.n	8002a1a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002a12:	f06f 0303 	mvn.w	r3, #3
 8002a16:	61fb      	str	r3, [r7, #28]
 8002a18:	e012      	b.n	8002a40 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	69b8      	ldr	r0, [r7, #24]
 8002a22:	f000 fabb 	bl	8002f9c <xQueueGenericSend>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d009      	beq.n	8002a40 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002a32:	f06f 0301 	mvn.w	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	e002      	b.n	8002a40 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002a3a:	f06f 0302 	mvn.w	r3, #2
 8002a3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002a40:	69fb      	ldr	r3, [r7, #28]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a66:	f3ef 8305 	mrs	r3, IPSR
 8002a6a:	617b      	str	r3, [r7, #20]
  return(result);
 8002a6c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d028      	beq.n	8002ac4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <osMessageQueueGet+0x34>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <osMessageQueueGet+0x34>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d003      	beq.n	8002a8c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002a84:	f06f 0303 	mvn.w	r3, #3
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e037      	b.n	8002afc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002a90:	f107 0310 	add.w	r3, r7, #16
 8002a94:	461a      	mov	r2, r3
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	69b8      	ldr	r0, [r7, #24]
 8002a9a:	f000 fd01 	bl	80034a0 <xQueueReceiveFromISR>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d003      	beq.n	8002aac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002aa4:	f06f 0302 	mvn.w	r3, #2
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e027      	b.n	8002afc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d024      	beq.n	8002afc <osMessageQueueGet+0xac>
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <osMessageQueueGet+0xb8>)
 8002ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f3bf 8f4f 	dsb	sy
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	e01b      	b.n	8002afc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <osMessageQueueGet+0x80>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d103      	bne.n	8002ad8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002ad0:	f06f 0303 	mvn.w	r3, #3
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e011      	b.n	8002afc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	68b9      	ldr	r1, [r7, #8]
 8002adc:	69b8      	ldr	r0, [r7, #24]
 8002ade:	f000 fbfd 	bl	80032dc <xQueueReceive>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d009      	beq.n	8002afc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002aee:	f06f 0301 	mvn.w	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
 8002af4:	e002      	b.n	8002afc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002af6:	f06f 0302 	mvn.w	r3, #2
 8002afa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002afc:	69fb      	ldr	r3, [r7, #28]
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3720      	adds	r7, #32
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000ed04 	.word	0xe000ed04

08002b0c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d102      	bne.n	8002b24 <osMessageQueueGetCount+0x18>
    count = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e00e      	b.n	8002b42 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b24:	f3ef 8305 	mrs	r3, IPSR
 8002b28:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002b30:	6938      	ldr	r0, [r7, #16]
 8002b32:	f000 fd56 	bl	80035e2 <uxQueueMessagesWaitingFromISR>
 8002b36:	6178      	str	r0, [r7, #20]
 8002b38:	e003      	b.n	8002b42 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002b3a:	6938      	ldr	r0, [r7, #16]
 8002b3c:	f000 fd32 	bl	80035a4 <uxQueueMessagesWaiting>
 8002b40:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8002b42:	697b      	ldr	r3, [r7, #20]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4a06      	ldr	r2, [pc, #24]	@ (8002b74 <vApplicationGetIdleTaskMemory+0x28>)
 8002b5c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	4a05      	ldr	r2, [pc, #20]	@ (8002b78 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b62:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2280      	movs	r2, #128	@ 0x80
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	2000015c 	.word	0x2000015c
 8002b78:	200001b8 	.word	0x200001b8

08002b7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ba8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4a06      	ldr	r2, [pc, #24]	@ (8002bac <vApplicationGetTimerTaskMemory+0x30>)
 8002b92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b9a:	601a      	str	r2, [r3, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200003b8 	.word	0x200003b8
 8002bac:	20000414 	.word	0x20000414

08002bb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f103 0208 	add.w	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f103 0208 	add.w	r2, r3, #8
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f103 0208 	add.w	r2, r3, #8
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	601a      	str	r2, [r3, #0]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c62:	d103      	bne.n	8002c6c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e00c      	b.n	8002c86 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e002      	b.n	8002c7a <vListInsert+0x2e>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d2f6      	bcs.n	8002c74 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr

08002cbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6892      	ldr	r2, [r2, #8]
 8002cd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6852      	ldr	r2, [r2, #4]
 8002cdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d103      	bne.n	8002cf0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1e5a      	subs	r2, r3, #1
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr
	...

08002d10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	e7fd      	b.n	8002d38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d3c:	f002 f92e 	bl	8004f9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d48:	68f9      	ldr	r1, [r7, #12]
 8002d4a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d4c:	fb01 f303 	mul.w	r3, r1, r3
 8002d50:	441a      	add	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	441a      	add	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	22ff      	movs	r2, #255	@ 0xff
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	22ff      	movs	r2, #255	@ 0xff
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d114      	bne.n	8002dbc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d01a      	beq.n	8002dd0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	3310      	adds	r3, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f001 fa12 	bl	80041c8 <xTaskRemoveFromEventList>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d012      	beq.n	8002dd0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002daa:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <xQueueGenericReset+0xd0>)
 8002dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	f3bf 8f6f 	isb	sy
 8002dba:	e009      	b.n	8002dd0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	3310      	adds	r3, #16
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fef5 	bl	8002bb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3324      	adds	r3, #36	@ 0x24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fef0 	bl	8002bb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002dd0:	f002 f914 	bl	8004ffc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002dd4:	2301      	movs	r3, #1
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	e000ed04 	.word	0xe000ed04

08002de4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b08e      	sub	sp, #56	@ 0x38
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10b      	bne.n	8002e10 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e0a:	bf00      	nop
 8002e0c:	bf00      	nop
 8002e0e:	e7fd      	b.n	8002e0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10b      	bne.n	8002e2e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1a:	f383 8811 	msr	BASEPRI, r3
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	f3bf 8f4f 	dsb	sy
 8002e26:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e28:	bf00      	nop
 8002e2a:	bf00      	nop
 8002e2c:	e7fd      	b.n	8002e2a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <xQueueGenericCreateStatic+0x56>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <xQueueGenericCreateStatic+0x5a>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <xQueueGenericCreateStatic+0x5c>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e48:	f383 8811 	msr	BASEPRI, r3
 8002e4c:	f3bf 8f6f 	isb	sy
 8002e50:	f3bf 8f4f 	dsb	sy
 8002e54:	623b      	str	r3, [r7, #32]
}
 8002e56:	bf00      	nop
 8002e58:	bf00      	nop
 8002e5a:	e7fd      	b.n	8002e58 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <xQueueGenericCreateStatic+0x84>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <xQueueGenericCreateStatic+0x88>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e000      	b.n	8002e6e <xQueueGenericCreateStatic+0x8a>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	61fb      	str	r3, [r7, #28]
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	e7fd      	b.n	8002e86 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e8a:	2350      	movs	r3, #80	@ 0x50
 8002e8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b50      	cmp	r3, #80	@ 0x50
 8002e92:	d00b      	beq.n	8002eac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61bb      	str	r3, [r7, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002eac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00d      	beq.n	8002ed4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ec0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 f840 	bl	8002f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3730      	adds	r7, #48	@ 0x30
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b08a      	sub	sp, #40	@ 0x28
 8002ee2:	af02      	add	r7, sp, #8
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <xQueueGenericCreate+0x2c>
	__asm volatile
 8002ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef6:	f383 8811 	msr	BASEPRI, r3
 8002efa:	f3bf 8f6f 	isb	sy
 8002efe:	f3bf 8f4f 	dsb	sy
 8002f02:	613b      	str	r3, [r7, #16]
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	e7fd      	b.n	8002f06 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	fb02 f303 	mul.w	r3, r2, r3
 8002f12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3350      	adds	r3, #80	@ 0x50
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 f941 	bl	80051a0 <pvPortMalloc>
 8002f1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d011      	beq.n	8002f4a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3350      	adds	r3, #80	@ 0x50
 8002f2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f38:	79fa      	ldrb	r2, [r7, #7]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 f805 	bl	8002f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e002      	b.n	8002f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f82:	2101      	movs	r1, #1
 8002f84:	69b8      	ldr	r0, [r7, #24]
 8002f86:	f7ff fec3 	bl	8002d10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	@ 0x38
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <xQueueGenericSend+0x34>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d103      	bne.n	8002fde <xQueueGenericSend+0x42>
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <xQueueGenericSend+0x46>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <xQueueGenericSend+0x48>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <xQueueGenericSend+0x64>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d103      	bne.n	800300e <xQueueGenericSend+0x72>
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <xQueueGenericSend+0x76>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <xQueueGenericSend+0x78>
 8003012:	2300      	movs	r3, #0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <xQueueGenericSend+0x94>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	623b      	str	r3, [r7, #32]
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003030:	f001 fa8a 	bl	8004548 <xTaskGetSchedulerState>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d102      	bne.n	8003040 <xQueueGenericSend+0xa4>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <xQueueGenericSend+0xa8>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <xQueueGenericSend+0xaa>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <xQueueGenericSend+0xc6>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	61fb      	str	r3, [r7, #28]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003062:	f001 ff9b 	bl	8004f9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <xQueueGenericSend+0xdc>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2b02      	cmp	r3, #2
 8003076:	d129      	bne.n	80030cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800307e:	f000 face 	bl	800361e <prvCopyDataToQueue>
 8003082:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003088:	2b00      	cmp	r3, #0
 800308a:	d010      	beq.n	80030ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308e:	3324      	adds	r3, #36	@ 0x24
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f899 	bl	80041c8 <xTaskRemoveFromEventList>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800309c:	4b3f      	ldr	r3, [pc, #252]	@ (800319c <xQueueGenericSend+0x200>)
 800309e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	f3bf 8f4f 	dsb	sy
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	e00a      	b.n	80030c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d007      	beq.n	80030c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030b4:	4b39      	ldr	r3, [pc, #228]	@ (800319c <xQueueGenericSend+0x200>)
 80030b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030c4:	f001 ff9a 	bl	8004ffc <vPortExitCritical>
				return pdPASS;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e063      	b.n	8003194 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030d2:	f001 ff93 	bl	8004ffc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e05c      	b.n	8003194 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d106      	bne.n	80030ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030e0:	f107 0314 	add.w	r3, r7, #20
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 f8d3 	bl	8004290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030ea:	2301      	movs	r3, #1
 80030ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030ee:	f001 ff85 	bl	8004ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030f2:	f000 fe45 	bl	8003d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030f6:	f001 ff51 	bl	8004f9c <vPortEnterCritical>
 80030fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003100:	b25b      	sxtb	r3, r3
 8003102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003106:	d103      	bne.n	8003110 <xQueueGenericSend+0x174>
 8003108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003116:	b25b      	sxtb	r3, r3
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d103      	bne.n	8003126 <xQueueGenericSend+0x18a>
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003126:	f001 ff69 	bl	8004ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800312a:	1d3a      	adds	r2, r7, #4
 800312c:	f107 0314 	add.w	r3, r7, #20
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f001 f8c2 	bl	80042bc <xTaskCheckForTimeOut>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d124      	bne.n	8003188 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800313e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003140:	f000 fb65 	bl	800380e <prvIsQueueFull>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d018      	beq.n	800317c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800314a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314c:	3310      	adds	r3, #16
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f000 ffe6 	bl	8004124 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800315a:	f000 faf0 	bl	800373e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800315e:	f000 fe1d 	bl	8003d9c <xTaskResumeAll>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af7c 	bne.w	8003062 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800316a:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <xQueueGenericSend+0x200>)
 800316c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	f3bf 8f6f 	isb	sy
 800317a:	e772      	b.n	8003062 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800317c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800317e:	f000 fade 	bl	800373e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003182:	f000 fe0b 	bl	8003d9c <xTaskResumeAll>
 8003186:	e76c      	b.n	8003062 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800318a:	f000 fad8 	bl	800373e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800318e:	f000 fe05 	bl	8003d9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003192:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003194:	4618      	mov	r0, r3
 8003196:	3738      	adds	r7, #56	@ 0x38
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	e000ed04 	.word	0xe000ed04

080031a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b090      	sub	sp, #64	@ 0x40
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
 80031ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10b      	bne.n	80031d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <xQueueGenericSendFromISR+0x3e>
 80031d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <xQueueGenericSendFromISR+0x42>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <xQueueGenericSendFromISR+0x44>
 80031e2:	2300      	movs	r3, #0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10b      	bne.n	8003200 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d103      	bne.n	800320e <xQueueGenericSendFromISR+0x6e>
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <xQueueGenericSendFromISR+0x72>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <xQueueGenericSendFromISR+0x74>
 8003212:	2300      	movs	r3, #0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	623b      	str	r3, [r7, #32]
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003230:	f001 ff76 	bl	8005120 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003234:	f3ef 8211 	mrs	r2, BASEPRI
 8003238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323c:	f383 8811 	msr	BASEPRI, r3
 8003240:	f3bf 8f6f 	isb	sy
 8003244:	f3bf 8f4f 	dsb	sy
 8003248:	61fa      	str	r2, [r7, #28]
 800324a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800324c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003258:	429a      	cmp	r2, r3
 800325a:	d302      	bcc.n	8003262 <xQueueGenericSendFromISR+0xc2>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d12f      	bne.n	80032c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800326c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800326e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003278:	f000 f9d1 	bl	800361e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800327c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d112      	bne.n	80032ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	3324      	adds	r3, #36	@ 0x24
 8003292:	4618      	mov	r0, r3
 8003294:	f000 ff98 	bl	80041c8 <xTaskRemoveFromEventList>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e007      	b.n	80032bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032b0:	3301      	adds	r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	b25a      	sxtb	r2, r3
 80032b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032bc:	2301      	movs	r3, #1
 80032be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80032c0:	e001      	b.n	80032c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3740      	adds	r7, #64	@ 0x40
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	@ 0x30
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032e8:	2300      	movs	r3, #0
 80032ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <xQueueReceive+0x32>
	__asm volatile
 80032f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	623b      	str	r3, [r7, #32]
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	e7fd      	b.n	800330a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d103      	bne.n	800331c <xQueueReceive+0x40>
 8003314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <xQueueReceive+0x44>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <xQueueReceive+0x46>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <xQueueReceive+0x62>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f3bf 8f4f 	dsb	sy
 8003336:	61fb      	str	r3, [r7, #28]
}
 8003338:	bf00      	nop
 800333a:	bf00      	nop
 800333c:	e7fd      	b.n	800333a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800333e:	f001 f903 	bl	8004548 <xTaskGetSchedulerState>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <xQueueReceive+0x72>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <xQueueReceive+0x76>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <xQueueReceive+0x78>
 8003352:	2300      	movs	r3, #0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10b      	bne.n	8003370 <xQueueReceive+0x94>
	__asm volatile
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	61bb      	str	r3, [r7, #24]
}
 800336a:	bf00      	nop
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003370:	f001 fe14 	bl	8004f9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01f      	beq.n	80033c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003380:	68b9      	ldr	r1, [r7, #8]
 8003382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003384:	f000 f9b5 	bl	80036f2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	1e5a      	subs	r2, r3, #1
 800338c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00f      	beq.n	80033b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339a:	3310      	adds	r3, #16
 800339c:	4618      	mov	r0, r3
 800339e:	f000 ff13 	bl	80041c8 <xTaskRemoveFromEventList>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033a8:	4b3c      	ldr	r3, [pc, #240]	@ (800349c <xQueueReceive+0x1c0>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033b8:	f001 fe20 	bl	8004ffc <vPortExitCritical>
				return pdPASS;
 80033bc:	2301      	movs	r3, #1
 80033be:	e069      	b.n	8003494 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033c6:	f001 fe19 	bl	8004ffc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e062      	b.n	8003494 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d106      	bne.n	80033e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 ff59 	bl	8004290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033de:	2301      	movs	r3, #1
 80033e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033e2:	f001 fe0b 	bl	8004ffc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033e6:	f000 fccb 	bl	8003d80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033ea:	f001 fdd7 	bl	8004f9c <vPortEnterCritical>
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fa:	d103      	bne.n	8003404 <xQueueReceive+0x128>
 80033fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800340a:	b25b      	sxtb	r3, r3
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d103      	bne.n	800341a <xQueueReceive+0x13e>
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800341a:	f001 fdef 	bl	8004ffc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800341e:	1d3a      	adds	r2, r7, #4
 8003420:	f107 0310 	add.w	r3, r7, #16
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f000 ff48 	bl	80042bc <xTaskCheckForTimeOut>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d123      	bne.n	800347a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003434:	f000 f9d5 	bl	80037e2 <prvIsQueueEmpty>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d017      	beq.n	800346e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	3324      	adds	r3, #36	@ 0x24
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f000 fe6c 	bl	8004124 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800344c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800344e:	f000 f976 	bl	800373e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003452:	f000 fca3 	bl	8003d9c <xTaskResumeAll>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d189      	bne.n	8003370 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <xQueueReceive+0x1c0>)
 800345e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	e780      	b.n	8003370 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800346e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003470:	f000 f965 	bl	800373e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003474:	f000 fc92 	bl	8003d9c <xTaskResumeAll>
 8003478:	e77a      	b.n	8003370 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800347a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800347c:	f000 f95f 	bl	800373e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003480:	f000 fc8c 	bl	8003d9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003486:	f000 f9ac 	bl	80037e2 <prvIsQueueEmpty>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	f43f af6f 	beq.w	8003370 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003494:	4618      	mov	r0, r3
 8003496:	3730      	adds	r7, #48	@ 0x30
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	e000ed04 	.word	0xe000ed04

080034a0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08e      	sub	sp, #56	@ 0x38
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	623b      	str	r3, [r7, #32]
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <xQueueReceiveFromISR+0x3c>
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <xQueueReceiveFromISR+0x40>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <xQueueReceiveFromISR+0x42>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	61fb      	str	r3, [r7, #28]
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	e7fd      	b.n	80034fa <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034fe:	f001 fe0f 	bl	8005120 <vPortValidateInterruptPriority>
	__asm volatile
 8003502:	f3ef 8211 	mrs	r2, BASEPRI
 8003506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350a:	f383 8811 	msr	BASEPRI, r3
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f3bf 8f4f 	dsb	sy
 8003516:	61ba      	str	r2, [r7, #24]
 8003518:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800351a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800351c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800351e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003520:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003522:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02f      	beq.n	800358a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003538:	f000 f8db 	bl	80036f2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	1e5a      	subs	r2, r3, #1
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003544:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d112      	bne.n	8003574 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d016      	beq.n	8003584 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003558:	3310      	adds	r3, #16
 800355a:	4618      	mov	r0, r3
 800355c:	f000 fe34 	bl	80041c8 <xTaskRemoveFromEventList>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00e      	beq.n	8003584 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	e007      	b.n	8003584 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003578:	3301      	adds	r3, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	b25a      	sxtb	r2, r3
 800357e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003584:	2301      	movs	r3, #1
 8003586:	637b      	str	r3, [r7, #52]	@ 0x34
 8003588:	e001      	b.n	800358e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800358a:	2300      	movs	r3, #0
 800358c:	637b      	str	r3, [r7, #52]	@ 0x34
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	f383 8811 	msr	BASEPRI, r3
}
 8003598:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800359a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800359c:	4618      	mov	r0, r3
 800359e:	3738      	adds	r7, #56	@ 0x38
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	e7fd      	b.n	80035c6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80035ca:	f001 fce7 	bl	8004f9c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80035d4:	f001 fd12 	bl	8004ffc <vPortExitCritical>

	return uxReturn;
 80035d8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	60fb      	str	r3, [r7, #12]
}
 8003606:	bf00      	nop
 8003608:	bf00      	nop
 800360a:	e7fd      	b.n	8003608 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003610:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8003612:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	60f8      	str	r0, [r7, #12]
 8003626:	60b9      	str	r1, [r7, #8]
 8003628:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003632:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10d      	bne.n	8003658 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d14d      	bne.n	80036e0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	4618      	mov	r0, r3
 800364a:	f000 ff9b 	bl	8004584 <xTaskPriorityDisinherit>
 800364e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	e043      	b.n	80036e0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6858      	ldr	r0, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	461a      	mov	r2, r3
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	f001 ffdb 	bl	8005624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	441a      	add	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	429a      	cmp	r2, r3
 8003686:	d32b      	bcc.n	80036e0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e026      	b.n	80036e0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68d8      	ldr	r0, [r3, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	461a      	mov	r2, r3
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	f001 ffc1 	bl	8005624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	425b      	negs	r3, r3
 80036ac:	441a      	add	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d207      	bcs.n	80036ce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	425b      	negs	r3, r3
 80036c8:	441a      	add	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d105      	bne.n	80036e0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3b01      	subs	r3, #1
 80036de:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036e8:	697b      	ldr	r3, [r7, #20]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	441a      	add	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	d303      	bcc.n	8003726 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68d9      	ldr	r1, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	461a      	mov	r2, r3
 8003730:	6838      	ldr	r0, [r7, #0]
 8003732:	f001 ff77 	bl	8005624 <memcpy>
	}
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003746:	f001 fc29 	bl	8004f9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003750:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003752:	e011      	b.n	8003778 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003758:	2b00      	cmp	r3, #0
 800375a:	d012      	beq.n	8003782 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3324      	adds	r3, #36	@ 0x24
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fd31 	bl	80041c8 <xTaskRemoveFromEventList>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800376c:	f000 fe0a 	bl	8004384 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	3b01      	subs	r3, #1
 8003774:	b2db      	uxtb	r3, r3
 8003776:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800377c:	2b00      	cmp	r3, #0
 800377e:	dce9      	bgt.n	8003754 <prvUnlockQueue+0x16>
 8003780:	e000      	b.n	8003784 <prvUnlockQueue+0x46>
					break;
 8003782:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	22ff      	movs	r2, #255	@ 0xff
 8003788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800378c:	f001 fc36 	bl	8004ffc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003790:	f001 fc04 	bl	8004f9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800379a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800379c:	e011      	b.n	80037c2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3310      	adds	r3, #16
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fd0c 	bl	80041c8 <xTaskRemoveFromEventList>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037b6:	f000 fde5 	bl	8004384 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037ba:	7bbb      	ldrb	r3, [r7, #14]
 80037bc:	3b01      	subs	r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	dce9      	bgt.n	800379e <prvUnlockQueue+0x60>
 80037ca:	e000      	b.n	80037ce <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037cc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	22ff      	movs	r2, #255	@ 0xff
 80037d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037d6:	f001 fc11 	bl	8004ffc <vPortExitCritical>
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037ea:	f001 fbd7 	bl	8004f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037f6:	2301      	movs	r3, #1
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	e001      	b.n	8003800 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003800:	f001 fbfc 	bl	8004ffc <vPortExitCritical>

	return xReturn;
 8003804:	68fb      	ldr	r3, [r7, #12]
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003816:	f001 fbc1 	bl	8004f9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003822:	429a      	cmp	r2, r3
 8003824:	d102      	bne.n	800382c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	60fb      	str	r3, [r7, #12]
 800382a:	e001      	b.n	8003830 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003830:	f001 fbe4 	bl	8004ffc <vPortExitCritical>

	return xReturn;
 8003834:	68fb      	ldr	r3, [r7, #12]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e014      	b.n	800387a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003850:	4a0e      	ldr	r2, [pc, #56]	@ (800388c <vQueueAddToRegistry+0x4c>)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10b      	bne.n	8003874 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800385c:	490b      	ldr	r1, [pc, #44]	@ (800388c <vQueueAddToRegistry+0x4c>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003866:	4a09      	ldr	r2, [pc, #36]	@ (800388c <vQueueAddToRegistry+0x4c>)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003872:	e006      	b.n	8003882 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3301      	adds	r3, #1
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b07      	cmp	r3, #7
 800387e:	d9e7      	bls.n	8003850 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	bc80      	pop	{r7}
 800388a:	4770      	bx	lr
 800388c:	20000814 	.word	0x20000814

08003890 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038a0:	f001 fb7c 	bl	8004f9c <vPortEnterCritical>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038aa:	b25b      	sxtb	r3, r3
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b0:	d103      	bne.n	80038ba <vQueueWaitForMessageRestricted+0x2a>
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038c0:	b25b      	sxtb	r3, r3
 80038c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c6:	d103      	bne.n	80038d0 <vQueueWaitForMessageRestricted+0x40>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038d0:	f001 fb94 	bl	8004ffc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	3324      	adds	r3, #36	@ 0x24
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fc43 	bl	8004170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff27 	bl	800373e <prvUnlockQueue>
	}
 80038f0:	bf00      	nop
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b08e      	sub	sp, #56	@ 0x38
 80038fc:	af04      	add	r7, sp, #16
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003906:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <xTaskCreateStatic+0x2c>
	__asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	623b      	str	r3, [r7, #32]
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <xTaskCreateStatic+0x4a>
	__asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	61fb      	str	r3, [r7, #28]
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	e7fd      	b.n	800393e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003942:	235c      	movs	r3, #92	@ 0x5c
 8003944:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b5c      	cmp	r3, #92	@ 0x5c
 800394a:	d00b      	beq.n	8003964 <xTaskCreateStatic+0x6c>
	__asm volatile
 800394c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	61bb      	str	r3, [r7, #24]
}
 800395e:	bf00      	nop
 8003960:	bf00      	nop
 8003962:	e7fd      	b.n	8003960 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	d01e      	beq.n	80039aa <xTaskCreateStatic+0xb2>
 800396c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01b      	beq.n	80039aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	2202      	movs	r2, #2
 8003980:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003984:	2300      	movs	r3, #0
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	f107 0314 	add.w	r3, r7, #20
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f850 	bl	8003a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039a4:	f000 f8de 	bl	8003b64 <prvAddNewTaskToReadyList>
 80039a8:	e001      	b.n	80039ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ae:	697b      	ldr	r3, [r7, #20]
	}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3728      	adds	r7, #40	@ 0x28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08c      	sub	sp, #48	@ 0x30
 80039bc:	af04      	add	r7, sp, #16
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	4613      	mov	r3, r2
 80039c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039c8:	88fb      	ldrh	r3, [r7, #6]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f001 fbe7 	bl	80051a0 <pvPortMalloc>
 80039d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039da:	205c      	movs	r0, #92	@ 0x5c
 80039dc:	f001 fbe0 	bl	80051a0 <pvPortMalloc>
 80039e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80039ee:	e005      	b.n	80039fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f001 fca3 	bl	800533c <vPortFree>
 80039f6:	e001      	b.n	80039fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d017      	beq.n	8003a32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a0a:	88fa      	ldrh	r2, [r7, #6]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9303      	str	r3, [sp, #12]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	9302      	str	r3, [sp, #8]
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f80e 	bl	8003a42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a26:	69f8      	ldr	r0, [r7, #28]
 8003a28:	f000 f89c 	bl	8003b64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e002      	b.n	8003a38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a38:	69bb      	ldr	r3, [r7, #24]
	}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b088      	sub	sp, #32
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	461a      	mov	r2, r3
 8003a5a:	21a5      	movs	r1, #165	@ 0xa5
 8003a5c:	f001 fdae 	bl	80055bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	f023 0307 	bic.w	r3, r3, #7
 8003a78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00b      	beq.n	8003a9c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	617b      	str	r3, [r7, #20]
}
 8003a96:	bf00      	nop
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d01f      	beq.n	8003ae2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e012      	b.n	8003ace <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	7819      	ldrb	r1, [r3, #0]
 8003ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3334      	adds	r3, #52	@ 0x34
 8003ab8:	460a      	mov	r2, r1
 8003aba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d9e9      	bls.n	8003aa8 <prvInitialiseNewTask+0x66>
 8003ad4:	e000      	b.n	8003ad8 <prvInitialiseNewTask+0x96>
			{
				break;
 8003ad6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ae0:	e003      	b.n	8003aea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aec:	2b37      	cmp	r3, #55	@ 0x37
 8003aee:	d901      	bls.n	8003af4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003af0:	2337      	movs	r3, #55	@ 0x37
 8003af2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003af8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003afe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	2200      	movs	r2, #0
 8003b04:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b08:	3304      	adds	r3, #4
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f7ff f86f 	bl	8002bee <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	3318      	adds	r3, #24
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7ff f86a 	bl	8002bee <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b2e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	2200      	movs	r2, #0
 8003b34:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b3e:	683a      	ldr	r2, [r7, #0]
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	69b8      	ldr	r0, [r7, #24]
 8003b44:	f001 f93a 	bl	8004dbc <pxPortInitialiseStack>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b6c:	f001 fa16 	bl	8004f9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b70:	4b2d      	ldr	r3, [pc, #180]	@ (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003b78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b82:	4a2a      	ldr	r2, [pc, #168]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b88:	4b27      	ldr	r3, [pc, #156]	@ (8003c28 <prvAddNewTaskToReadyList+0xc4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d110      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b90:	f000 fc1c 	bl	80043cc <prvInitialiseTaskLists>
 8003b94:	e00d      	b.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b96:	4b26      	ldr	r3, [pc, #152]	@ (8003c30 <prvAddNewTaskToReadyList+0xcc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b9e:	4b23      	ldr	r3, [pc, #140]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d802      	bhi.n	8003bb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bac:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bb2:	4b20      	ldr	r3, [pc, #128]	@ (8003c34 <prvAddNewTaskToReadyList+0xd0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c34 <prvAddNewTaskToReadyList+0xd0>)
 8003bba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <prvAddNewTaskToReadyList+0xd0>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <prvAddNewTaskToReadyList+0xd4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d903      	bls.n	8003bd8 <prvAddNewTaskToReadyList+0x74>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a18      	ldr	r2, [pc, #96]	@ (8003c38 <prvAddNewTaskToReadyList+0xd4>)
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4a15      	ldr	r2, [pc, #84]	@ (8003c3c <prvAddNewTaskToReadyList+0xd8>)
 8003be6:	441a      	add	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f7ff f809 	bl	8002c06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003bf4:	f001 fa02 	bl	8004ffc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <prvAddNewTaskToReadyList+0xcc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00e      	beq.n	8003c1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c00:	4b0a      	ldr	r3, [pc, #40]	@ (8003c2c <prvAddNewTaskToReadyList+0xc8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d207      	bcs.n	8003c1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <prvAddNewTaskToReadyList+0xdc>)
 8003c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000d28 	.word	0x20000d28
 8003c2c:	20000854 	.word	0x20000854
 8003c30:	20000d34 	.word	0x20000d34
 8003c34:	20000d44 	.word	0x20000d44
 8003c38:	20000d30 	.word	0x20000d30
 8003c3c:	20000858 	.word	0x20000858
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c56:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <vTaskDelay+0x64>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <vTaskDelay+0x32>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	60bb      	str	r3, [r7, #8]
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	e7fd      	b.n	8003c72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c76:	f000 f883 	bl	8003d80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fcf1 	bl	8004664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c82:	f000 f88b 	bl	8003d9c <xTaskResumeAll>
 8003c86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d107      	bne.n	8003c9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003c8e:	4b07      	ldr	r3, [pc, #28]	@ (8003cac <vTaskDelay+0x68>)
 8003c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	20000d50 	.word	0x20000d50
 8003cac:	e000ed04 	.word	0xe000ed04

08003cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08a      	sub	sp, #40	@ 0x28
 8003cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cbe:	463a      	mov	r2, r7
 8003cc0:	1d39      	adds	r1, r7, #4
 8003cc2:	f107 0308 	add.w	r3, r7, #8
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe ff40 	bl	8002b4c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ccc:	6839      	ldr	r1, [r7, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	9202      	str	r2, [sp, #8]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	460a      	mov	r2, r1
 8003cde:	4922      	ldr	r1, [pc, #136]	@ (8003d68 <vTaskStartScheduler+0xb8>)
 8003ce0:	4822      	ldr	r0, [pc, #136]	@ (8003d6c <vTaskStartScheduler+0xbc>)
 8003ce2:	f7ff fe09 	bl	80038f8 <xTaskCreateStatic>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4a21      	ldr	r2, [pc, #132]	@ (8003d70 <vTaskStartScheduler+0xc0>)
 8003cea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003cec:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <vTaskStartScheduler+0xc0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	e001      	b.n	8003cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d04:	f000 fd02 	bl	800470c <xTimerCreateTimerTask>
 8003d08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d116      	bne.n	8003d3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	613b      	str	r3, [r7, #16]
}
 8003d22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d24:	4b13      	ldr	r3, [pc, #76]	@ (8003d74 <vTaskStartScheduler+0xc4>)
 8003d26:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d2c:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <vTaskStartScheduler+0xc8>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d32:	4b12      	ldr	r3, [pc, #72]	@ (8003d7c <vTaskStartScheduler+0xcc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d38:	f001 f8be 	bl	8004eb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d3c:	e00f      	b.n	8003d5e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d44:	d10b      	bne.n	8003d5e <vTaskStartScheduler+0xae>
	__asm volatile
 8003d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	60fb      	str	r3, [r7, #12]
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	e7fd      	b.n	8003d5a <vTaskStartScheduler+0xaa>
}
 8003d5e:	bf00      	nop
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08005fa8 	.word	0x08005fa8
 8003d6c:	0800439d 	.word	0x0800439d
 8003d70:	20000d4c 	.word	0x20000d4c
 8003d74:	20000d48 	.word	0x20000d48
 8003d78:	20000d34 	.word	0x20000d34
 8003d7c:	20000d2c 	.word	0x20000d2c

08003d80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d84:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <vTaskSuspendAll+0x18>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	4a03      	ldr	r2, [pc, #12]	@ (8003d98 <vTaskSuspendAll+0x18>)
 8003d8c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000d50 	.word	0x20000d50

08003d9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003daa:	4b42      	ldr	r3, [pc, #264]	@ (8003eb4 <xTaskResumeAll+0x118>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10b      	bne.n	8003dca <xTaskResumeAll+0x2e>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	603b      	str	r3, [r7, #0]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dca:	f001 f8e7 	bl	8004f9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dce:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <xTaskResumeAll+0x118>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	4a37      	ldr	r2, [pc, #220]	@ (8003eb4 <xTaskResumeAll+0x118>)
 8003dd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd8:	4b36      	ldr	r3, [pc, #216]	@ (8003eb4 <xTaskResumeAll+0x118>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d162      	bne.n	8003ea6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003de0:	4b35      	ldr	r3, [pc, #212]	@ (8003eb8 <xTaskResumeAll+0x11c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d05e      	beq.n	8003ea6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de8:	e02f      	b.n	8003e4a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dea:	4b34      	ldr	r3, [pc, #208]	@ (8003ebc <xTaskResumeAll+0x120>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3318      	adds	r3, #24
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe ff60 	bl	8002cbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3304      	adds	r3, #4
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe ff5b 	bl	8002cbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec0 <xTaskResumeAll+0x124>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d903      	bls.n	8003e1a <xTaskResumeAll+0x7e>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	4a2a      	ldr	r2, [pc, #168]	@ (8003ec0 <xTaskResumeAll+0x124>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4a27      	ldr	r2, [pc, #156]	@ (8003ec4 <xTaskResumeAll+0x128>)
 8003e28:	441a      	add	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f7fe fee8 	bl	8002c06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e3a:	4b23      	ldr	r3, [pc, #140]	@ (8003ec8 <xTaskResumeAll+0x12c>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e44:	4b21      	ldr	r3, [pc, #132]	@ (8003ecc <xTaskResumeAll+0x130>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ebc <xTaskResumeAll+0x120>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1cb      	bne.n	8003dea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e58:	f000 fb56 	bl	8004508 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <xTaskResumeAll+0x134>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d010      	beq.n	8003e8a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e68:	f000 f844 	bl	8003ef4 <xTaskIncrementTick>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e72:	4b16      	ldr	r3, [pc, #88]	@ (8003ecc <xTaskResumeAll+0x130>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1f1      	bne.n	8003e68 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003e84:	4b12      	ldr	r3, [pc, #72]	@ (8003ed0 <xTaskResumeAll+0x134>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ecc <xTaskResumeAll+0x130>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e96:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed4 <xTaskResumeAll+0x138>)
 8003e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ea6:	f001 f8a9 	bl	8004ffc <vPortExitCritical>

	return xAlreadyYielded;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	20000d50 	.word	0x20000d50
 8003eb8:	20000d28 	.word	0x20000d28
 8003ebc:	20000ce8 	.word	0x20000ce8
 8003ec0:	20000d30 	.word	0x20000d30
 8003ec4:	20000858 	.word	0x20000858
 8003ec8:	20000854 	.word	0x20000854
 8003ecc:	20000d3c 	.word	0x20000d3c
 8003ed0:	20000d38 	.word	0x20000d38
 8003ed4:	e000ed04 	.word	0xe000ed04

08003ed8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ede:	4b04      	ldr	r3, [pc, #16]	@ (8003ef0 <xTaskGetTickCount+0x18>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ee4:	687b      	ldr	r3, [r7, #4]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	20000d2c 	.word	0x20000d2c

08003ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003efe:	4b4f      	ldr	r3, [pc, #316]	@ (800403c <xTaskIncrementTick+0x148>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f040 8090 	bne.w	8004028 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f08:	4b4d      	ldr	r3, [pc, #308]	@ (8004040 <xTaskIncrementTick+0x14c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f10:	4a4b      	ldr	r2, [pc, #300]	@ (8004040 <xTaskIncrementTick+0x14c>)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d121      	bne.n	8003f60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f1c:	4b49      	ldr	r3, [pc, #292]	@ (8004044 <xTaskIncrementTick+0x150>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	603b      	str	r3, [r7, #0]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <xTaskIncrementTick+0x46>
 8003f3e:	4b41      	ldr	r3, [pc, #260]	@ (8004044 <xTaskIncrementTick+0x150>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	4b40      	ldr	r3, [pc, #256]	@ (8004048 <xTaskIncrementTick+0x154>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a3e      	ldr	r2, [pc, #248]	@ (8004044 <xTaskIncrementTick+0x150>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	4a3e      	ldr	r2, [pc, #248]	@ (8004048 <xTaskIncrementTick+0x154>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <xTaskIncrementTick+0x158>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3301      	adds	r3, #1
 8003f58:	4a3c      	ldr	r2, [pc, #240]	@ (800404c <xTaskIncrementTick+0x158>)
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	f000 fad4 	bl	8004508 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f60:	4b3b      	ldr	r3, [pc, #236]	@ (8004050 <xTaskIncrementTick+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d349      	bcc.n	8003ffe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f6a:	4b36      	ldr	r3, [pc, #216]	@ (8004044 <xTaskIncrementTick+0x150>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f74:	4b36      	ldr	r3, [pc, #216]	@ (8004050 <xTaskIncrementTick+0x15c>)
 8003f76:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7a:	601a      	str	r2, [r3, #0]
					break;
 8003f7c:	e03f      	b.n	8003ffe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f7e:	4b31      	ldr	r3, [pc, #196]	@ (8004044 <xTaskIncrementTick+0x150>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d203      	bcs.n	8003f9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003f96:	4a2e      	ldr	r2, [pc, #184]	@ (8004050 <xTaskIncrementTick+0x15c>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f9c:	e02f      	b.n	8003ffe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fe fe8a 	bl	8002cbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d004      	beq.n	8003fba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe fe81 	bl	8002cbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fbe:	4b25      	ldr	r3, [pc, #148]	@ (8004054 <xTaskIncrementTick+0x160>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d903      	bls.n	8003fce <xTaskIncrementTick+0xda>
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	4a22      	ldr	r2, [pc, #136]	@ (8004054 <xTaskIncrementTick+0x160>)
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4a1f      	ldr	r2, [pc, #124]	@ (8004058 <xTaskIncrementTick+0x164>)
 8003fdc:	441a      	add	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7fe fe0e 	bl	8002c06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fee:	4b1b      	ldr	r3, [pc, #108]	@ (800405c <xTaskIncrementTick+0x168>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d3b8      	bcc.n	8003f6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ffc:	e7b5      	b.n	8003f6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ffe:	4b17      	ldr	r3, [pc, #92]	@ (800405c <xTaskIncrementTick+0x168>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004004:	4914      	ldr	r1, [pc, #80]	@ (8004058 <xTaskIncrementTick+0x164>)
 8004006:	4613      	mov	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d901      	bls.n	800401a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004016:	2301      	movs	r3, #1
 8004018:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800401a:	4b11      	ldr	r3, [pc, #68]	@ (8004060 <xTaskIncrementTick+0x16c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004022:	2301      	movs	r3, #1
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	e004      	b.n	8004032 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004028:	4b0e      	ldr	r3, [pc, #56]	@ (8004064 <xTaskIncrementTick+0x170>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	4a0d      	ldr	r2, [pc, #52]	@ (8004064 <xTaskIncrementTick+0x170>)
 8004030:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004032:	697b      	ldr	r3, [r7, #20]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3718      	adds	r7, #24
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000d50 	.word	0x20000d50
 8004040:	20000d2c 	.word	0x20000d2c
 8004044:	20000ce0 	.word	0x20000ce0
 8004048:	20000ce4 	.word	0x20000ce4
 800404c:	20000d40 	.word	0x20000d40
 8004050:	20000d48 	.word	0x20000d48
 8004054:	20000d30 	.word	0x20000d30
 8004058:	20000858 	.word	0x20000858
 800405c:	20000854 	.word	0x20000854
 8004060:	20000d3c 	.word	0x20000d3c
 8004064:	20000d38 	.word	0x20000d38

08004068 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800406e:	4b28      	ldr	r3, [pc, #160]	@ (8004110 <vTaskSwitchContext+0xa8>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004076:	4b27      	ldr	r3, [pc, #156]	@ (8004114 <vTaskSwitchContext+0xac>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800407c:	e042      	b.n	8004104 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800407e:	4b25      	ldr	r3, [pc, #148]	@ (8004114 <vTaskSwitchContext+0xac>)
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004084:	4b24      	ldr	r3, [pc, #144]	@ (8004118 <vTaskSwitchContext+0xb0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e011      	b.n	80040b0 <vTaskSwitchContext+0x48>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <vTaskSwitchContext+0x42>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	607b      	str	r3, [r7, #4]
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	e7fd      	b.n	80040a6 <vTaskSwitchContext+0x3e>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	60fb      	str	r3, [r7, #12]
 80040b0:	491a      	ldr	r1, [pc, #104]	@ (800411c <vTaskSwitchContext+0xb4>)
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4613      	mov	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4413      	add	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	440b      	add	r3, r1
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0e3      	beq.n	800408c <vTaskSwitchContext+0x24>
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4a13      	ldr	r2, [pc, #76]	@ (800411c <vTaskSwitchContext+0xb4>)
 80040d0:	4413      	add	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3308      	adds	r3, #8
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d104      	bne.n	80040f4 <vTaskSwitchContext+0x8c>
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4a09      	ldr	r2, [pc, #36]	@ (8004120 <vTaskSwitchContext+0xb8>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	4a06      	ldr	r2, [pc, #24]	@ (8004118 <vTaskSwitchContext+0xb0>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000d50 	.word	0x20000d50
 8004114:	20000d3c 	.word	0x20000d3c
 8004118:	20000d30 	.word	0x20000d30
 800411c:	20000858 	.word	0x20000858
 8004120:	20000854 	.word	0x20000854

08004124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	60fb      	str	r3, [r7, #12]
}
 8004146:	bf00      	nop
 8004148:	bf00      	nop
 800414a:	e7fd      	b.n	8004148 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800414c:	4b07      	ldr	r3, [pc, #28]	@ (800416c <vTaskPlaceOnEventList+0x48>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3318      	adds	r3, #24
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7fe fd79 	bl	8002c4c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800415a:	2101      	movs	r1, #1
 800415c:	6838      	ldr	r0, [r7, #0]
 800415e:	f000 fa81 	bl	8004664 <prvAddCurrentTaskToDelayedList>
}
 8004162:	bf00      	nop
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000854 	.word	0x20000854

08004170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10b      	bne.n	800419a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	617b      	str	r3, [r7, #20]
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	e7fd      	b.n	8004196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800419a:	4b0a      	ldr	r3, [pc, #40]	@ (80041c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3318      	adds	r3, #24
 80041a0:	4619      	mov	r1, r3
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fe fd2f 	bl	8002c06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041ae:	f04f 33ff 	mov.w	r3, #4294967295
 80041b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	68b8      	ldr	r0, [r7, #8]
 80041b8:	f000 fa54 	bl	8004664 <prvAddCurrentTaskToDelayedList>
	}
 80041bc:	bf00      	nop
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000854 	.word	0x20000854

080041c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10b      	bne.n	80041f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60fb      	str	r3, [r7, #12]
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	e7fd      	b.n	80041f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3318      	adds	r3, #24
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fd5e 	bl	8002cbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004200:	4b1d      	ldr	r3, [pc, #116]	@ (8004278 <xTaskRemoveFromEventList+0xb0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11d      	bne.n	8004244 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fd55 	bl	8002cbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004216:	4b19      	ldr	r3, [pc, #100]	@ (800427c <xTaskRemoveFromEventList+0xb4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <xTaskRemoveFromEventList+0x5e>
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004222:	4a16      	ldr	r2, [pc, #88]	@ (800427c <xTaskRemoveFromEventList+0xb4>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4a13      	ldr	r2, [pc, #76]	@ (8004280 <xTaskRemoveFromEventList+0xb8>)
 8004234:	441a      	add	r2, r3
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7fe fce2 	bl	8002c06 <vListInsertEnd>
 8004242:	e005      	b.n	8004250 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3318      	adds	r3, #24
 8004248:	4619      	mov	r1, r3
 800424a:	480e      	ldr	r0, [pc, #56]	@ (8004284 <xTaskRemoveFromEventList+0xbc>)
 800424c:	f7fe fcdb 	bl	8002c06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004254:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <xTaskRemoveFromEventList+0xc0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	429a      	cmp	r2, r3
 800425c:	d905      	bls.n	800426a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800425e:	2301      	movs	r3, #1
 8004260:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <xTaskRemoveFromEventList+0xc4>)
 8004264:	2201      	movs	r2, #1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e001      	b.n	800426e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800426e:	697b      	ldr	r3, [r7, #20]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000d50 	.word	0x20000d50
 800427c:	20000d30 	.word	0x20000d30
 8004280:	20000858 	.word	0x20000858
 8004284:	20000ce8 	.word	0x20000ce8
 8004288:	20000854 	.word	0x20000854
 800428c:	20000d3c 	.word	0x20000d3c

08004290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004298:	4b06      	ldr	r3, [pc, #24]	@ (80042b4 <vTaskInternalSetTimeOutState+0x24>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <vTaskInternalSetTimeOutState+0x28>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	605a      	str	r2, [r3, #4]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000d40 	.word	0x20000d40
 80042b8:	20000d2c 	.word	0x20000d2c

080042bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	613b      	str	r3, [r7, #16]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	60fb      	str	r3, [r7, #12]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004302:	f000 fe4b 	bl	8004f9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004306:	4b1d      	ldr	r3, [pc, #116]	@ (800437c <xTaskCheckForTimeOut+0xc0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d102      	bne.n	8004326 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004320:	2300      	movs	r3, #0
 8004322:	61fb      	str	r3, [r7, #28]
 8004324:	e023      	b.n	800436e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <xTaskCheckForTimeOut+0xc4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d007      	beq.n	8004342 <xTaskCheckForTimeOut+0x86>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d302      	bcc.n	8004342 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800433c:	2301      	movs	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	e015      	b.n	800436e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	429a      	cmp	r2, r3
 800434a:	d20b      	bcs.n	8004364 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	1ad2      	subs	r2, r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f7ff ff99 	bl	8004290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	e004      	b.n	800436e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800436a:	2301      	movs	r3, #1
 800436c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800436e:	f000 fe45 	bl	8004ffc <vPortExitCritical>

	return xReturn;
 8004372:	69fb      	ldr	r3, [r7, #28]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000d2c 	.word	0x20000d2c
 8004380:	20000d40 	.word	0x20000d40

08004384 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004388:	4b03      	ldr	r3, [pc, #12]	@ (8004398 <vTaskMissedYield+0x14>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	20000d3c 	.word	0x20000d3c

0800439c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043a4:	f000 f852 	bl	800444c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <prvIdleTask+0x28>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d9f9      	bls.n	80043a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043b0:	4b05      	ldr	r3, [pc, #20]	@ (80043c8 <prvIdleTask+0x2c>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043c0:	e7f0      	b.n	80043a4 <prvIdleTask+0x8>
 80043c2:	bf00      	nop
 80043c4:	20000858 	.word	0x20000858
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043d2:	2300      	movs	r3, #0
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	e00c      	b.n	80043f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4a12      	ldr	r2, [pc, #72]	@ (800442c <prvInitialiseTaskLists+0x60>)
 80043e4:	4413      	add	r3, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fbe2 	bl	8002bb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3301      	adds	r3, #1
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2b37      	cmp	r3, #55	@ 0x37
 80043f6:	d9ef      	bls.n	80043d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043f8:	480d      	ldr	r0, [pc, #52]	@ (8004430 <prvInitialiseTaskLists+0x64>)
 80043fa:	f7fe fbd9 	bl	8002bb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043fe:	480d      	ldr	r0, [pc, #52]	@ (8004434 <prvInitialiseTaskLists+0x68>)
 8004400:	f7fe fbd6 	bl	8002bb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004404:	480c      	ldr	r0, [pc, #48]	@ (8004438 <prvInitialiseTaskLists+0x6c>)
 8004406:	f7fe fbd3 	bl	8002bb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800440a:	480c      	ldr	r0, [pc, #48]	@ (800443c <prvInitialiseTaskLists+0x70>)
 800440c:	f7fe fbd0 	bl	8002bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004410:	480b      	ldr	r0, [pc, #44]	@ (8004440 <prvInitialiseTaskLists+0x74>)
 8004412:	f7fe fbcd 	bl	8002bb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004416:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <prvInitialiseTaskLists+0x78>)
 8004418:	4a05      	ldr	r2, [pc, #20]	@ (8004430 <prvInitialiseTaskLists+0x64>)
 800441a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <prvInitialiseTaskLists+0x7c>)
 800441e:	4a05      	ldr	r2, [pc, #20]	@ (8004434 <prvInitialiseTaskLists+0x68>)
 8004420:	601a      	str	r2, [r3, #0]
}
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000858 	.word	0x20000858
 8004430:	20000cb8 	.word	0x20000cb8
 8004434:	20000ccc 	.word	0x20000ccc
 8004438:	20000ce8 	.word	0x20000ce8
 800443c:	20000cfc 	.word	0x20000cfc
 8004440:	20000d14 	.word	0x20000d14
 8004444:	20000ce0 	.word	0x20000ce0
 8004448:	20000ce4 	.word	0x20000ce4

0800444c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004452:	e019      	b.n	8004488 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004454:	f000 fda2 	bl	8004f9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004458:	4b10      	ldr	r3, [pc, #64]	@ (800449c <prvCheckTasksWaitingTermination+0x50>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fe fc29 	bl	8002cbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3b01      	subs	r3, #1
 8004470:	4a0b      	ldr	r2, [pc, #44]	@ (80044a0 <prvCheckTasksWaitingTermination+0x54>)
 8004472:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004474:	4b0b      	ldr	r3, [pc, #44]	@ (80044a4 <prvCheckTasksWaitingTermination+0x58>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3b01      	subs	r3, #1
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <prvCheckTasksWaitingTermination+0x58>)
 800447c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800447e:	f000 fdbd 	bl	8004ffc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f810 	bl	80044a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004488:	4b06      	ldr	r3, [pc, #24]	@ (80044a4 <prvCheckTasksWaitingTermination+0x58>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e1      	bne.n	8004454 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004490:	bf00      	nop
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000cfc 	.word	0x20000cfc
 80044a0:	20000d28 	.word	0x20000d28
 80044a4:	20000d10 	.word	0x20000d10

080044a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 ff3c 	bl	800533c <vPortFree>
				vPortFree( pxTCB );
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 ff39 	bl	800533c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ca:	e019      	b.n	8004500 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d103      	bne.n	80044de <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 ff30 	bl	800533c <vPortFree>
	}
 80044dc:	e010      	b.n	8004500 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d00b      	beq.n	8004500 <prvDeleteTCB+0x58>
	__asm volatile
 80044e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ec:	f383 8811 	msr	BASEPRI, r3
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <prvDeleteTCB+0x54>
	}
 8004500:	bf00      	nop
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800450e:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <prvResetNextTaskUnblockTime+0x38>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <prvResetNextTaskUnblockTime+0x3c>)
 800451a:	f04f 32ff 	mov.w	r2, #4294967295
 800451e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004520:	e008      	b.n	8004534 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <prvResetNextTaskUnblockTime+0x38>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	4a04      	ldr	r2, [pc, #16]	@ (8004544 <prvResetNextTaskUnblockTime+0x3c>)
 8004532:	6013      	str	r3, [r2, #0]
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000ce0 	.word	0x20000ce0
 8004544:	20000d48 	.word	0x20000d48

08004548 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800454e:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <xTaskGetSchedulerState+0x34>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004556:	2301      	movs	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
 800455a:	e008      	b.n	800456e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800455c:	4b08      	ldr	r3, [pc, #32]	@ (8004580 <xTaskGetSchedulerState+0x38>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004564:	2302      	movs	r3, #2
 8004566:	607b      	str	r3, [r7, #4]
 8004568:	e001      	b.n	800456e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800456e:	687b      	ldr	r3, [r7, #4]
	}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000d34 	.word	0x20000d34
 8004580:	20000d50 	.word	0x20000d50

08004584 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d058      	beq.n	800464c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800459a:	4b2f      	ldr	r3, [pc, #188]	@ (8004658 <xTaskPriorityDisinherit+0xd4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d00b      	beq.n	80045bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	60fb      	str	r3, [r7, #12]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10b      	bne.n	80045dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	60bb      	str	r3, [r7, #8]
}
 80045d6:	bf00      	nop
 80045d8:	bf00      	nop
 80045da:	e7fd      	b.n	80045d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d02c      	beq.n	800464c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d128      	bne.n	800464c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fb5c 	bl	8002cbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004610:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461c:	4b0f      	ldr	r3, [pc, #60]	@ (800465c <xTaskPriorityDisinherit+0xd8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d903      	bls.n	800462c <xTaskPriorityDisinherit+0xa8>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	4a0c      	ldr	r2, [pc, #48]	@ (800465c <xTaskPriorityDisinherit+0xd8>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <xTaskPriorityDisinherit+0xdc>)
 800463a:	441a      	add	r2, r3
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7fe fadf 	bl	8002c06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800464c:	697b      	ldr	r3, [r7, #20]
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000854 	.word	0x20000854
 800465c:	20000d30 	.word	0x20000d30
 8004660:	20000858 	.word	0x20000858

08004664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800466e:	4b21      	ldr	r3, [pc, #132]	@ (80046f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004674:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	3304      	adds	r3, #4
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fb1e 	bl	8002cbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004686:	d10a      	bne.n	800469e <prvAddCurrentTaskToDelayedList+0x3a>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d007      	beq.n	800469e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800468e:	4b1a      	ldr	r3, [pc, #104]	@ (80046f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3304      	adds	r3, #4
 8004694:	4619      	mov	r1, r3
 8004696:	4819      	ldr	r0, [pc, #100]	@ (80046fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004698:	f7fe fab5 	bl	8002c06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800469c:	e026      	b.n	80046ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4413      	add	r3, r2
 80046a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046a6:	4b14      	ldr	r3, [pc, #80]	@ (80046f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d209      	bcs.n	80046ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046b6:	4b12      	ldr	r3, [pc, #72]	@ (8004700 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3304      	adds	r3, #4
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7fe fac2 	bl	8002c4c <vListInsert>
}
 80046c8:	e010      	b.n	80046ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004704 <prvAddCurrentTaskToDelayedList+0xa0>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4b0a      	ldr	r3, [pc, #40]	@ (80046f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f7fe fab8 	bl	8002c4c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d202      	bcs.n	80046ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046e6:	4a08      	ldr	r2, [pc, #32]	@ (8004708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20000d2c 	.word	0x20000d2c
 80046f8:	20000854 	.word	0x20000854
 80046fc:	20000d14 	.word	0x20000d14
 8004700:	20000ce4 	.word	0x20000ce4
 8004704:	20000ce0 	.word	0x20000ce0
 8004708:	20000d48 	.word	0x20000d48

0800470c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	@ 0x28
 8004710:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004716:	f000 fb11 	bl	8004d3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800471a:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <xTimerCreateTimerTask+0x84>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d021      	beq.n	8004766 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800472a:	1d3a      	adds	r2, r7, #4
 800472c:	f107 0108 	add.w	r1, r7, #8
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe fa21 	bl	8002b7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	9202      	str	r2, [sp, #8]
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	2302      	movs	r3, #2
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	2300      	movs	r3, #0
 800474a:	460a      	mov	r2, r1
 800474c:	4911      	ldr	r1, [pc, #68]	@ (8004794 <xTimerCreateTimerTask+0x88>)
 800474e:	4812      	ldr	r0, [pc, #72]	@ (8004798 <xTimerCreateTimerTask+0x8c>)
 8004750:	f7ff f8d2 	bl	80038f8 <xTaskCreateStatic>
 8004754:	4603      	mov	r3, r0
 8004756:	4a11      	ldr	r2, [pc, #68]	@ (800479c <xTimerCreateTimerTask+0x90>)
 8004758:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800475a:	4b10      	ldr	r3, [pc, #64]	@ (800479c <xTimerCreateTimerTask+0x90>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	613b      	str	r3, [r7, #16]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004784:	697b      	ldr	r3, [r7, #20]
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20000d84 	.word	0x20000d84
 8004794:	08005fb0 	.word	0x08005fb0
 8004798:	080048d9 	.word	0x080048d9
 800479c:	20000d88 	.word	0x20000d88

080047a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	@ 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	623b      	str	r3, [r7, #32]
}
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047d0:	4b19      	ldr	r3, [pc, #100]	@ (8004838 <xTimerGenericCommand+0x98>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d02a      	beq.n	800482e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b05      	cmp	r3, #5
 80047e8:	dc18      	bgt.n	800481c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80047ea:	f7ff fead 	bl	8004548 <xTaskGetSchedulerState>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d109      	bne.n	8004808 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80047f4:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <xTimerGenericCommand+0x98>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	f107 0110 	add.w	r1, r7, #16
 80047fc:	2300      	movs	r3, #0
 80047fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004800:	f7fe fbcc 	bl	8002f9c <xQueueGenericSend>
 8004804:	6278      	str	r0, [r7, #36]	@ 0x24
 8004806:	e012      	b.n	800482e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004808:	4b0b      	ldr	r3, [pc, #44]	@ (8004838 <xTimerGenericCommand+0x98>)
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	f107 0110 	add.w	r1, r7, #16
 8004810:	2300      	movs	r3, #0
 8004812:	2200      	movs	r2, #0
 8004814:	f7fe fbc2 	bl	8002f9c <xQueueGenericSend>
 8004818:	6278      	str	r0, [r7, #36]	@ 0x24
 800481a:	e008      	b.n	800482e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800481c:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <xTimerGenericCommand+0x98>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	f107 0110 	add.w	r1, r7, #16
 8004824:	2300      	movs	r3, #0
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	f7fe fcba 	bl	80031a0 <xQueueGenericSendFromISR>
 800482c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004830:	4618      	mov	r0, r3
 8004832:	3728      	adds	r7, #40	@ 0x28
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20000d84 	.word	0x20000d84

0800483c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af02      	add	r7, sp, #8
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004846:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <prvProcessExpiredTimer+0x98>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe fa31 	bl	8002cbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d023      	beq.n	80048b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	699a      	ldr	r2, [r3, #24]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	18d1      	adds	r1, r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	6978      	ldr	r0, [r7, #20]
 8004876:	f000 f8d3 	bl	8004a20 <prvInsertTimerInActiveList>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d020      	beq.n	80048c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004880:	2300      	movs	r3, #0
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	2100      	movs	r1, #0
 800488a:	6978      	ldr	r0, [r7, #20]
 800488c:	f7ff ff88 	bl	80047a0 <xTimerGenericCommand>
 8004890:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d114      	bne.n	80048c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	4798      	blx	r3
}
 80048ca:	bf00      	nop
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000d7c 	.word	0x20000d7c

080048d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048e0:	f107 0308 	add.w	r3, r7, #8
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 f859 	bl	800499c <prvGetNextExpireTime>
 80048ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4619      	mov	r1, r3
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f805 	bl	8004900 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80048f6:	f000 f8d5 	bl	8004aa4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048fa:	bf00      	nop
 80048fc:	e7f0      	b.n	80048e0 <prvTimerTask+0x8>
	...

08004900 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800490a:	f7ff fa39 	bl	8003d80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800490e:	f107 0308 	add.w	r3, r7, #8
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f864 	bl	80049e0 <prvSampleTimeNow>
 8004918:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d130      	bne.n	8004982 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <prvProcessTimerOrBlockTask+0x3c>
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	429a      	cmp	r2, r3
 800492c:	d806      	bhi.n	800493c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800492e:	f7ff fa35 	bl	8003d9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f7ff ff81 	bl	800483c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800493a:	e024      	b.n	8004986 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004942:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <prvProcessTimerOrBlockTask+0x90>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <prvProcessTimerOrBlockTask+0x50>
 800494c:	2301      	movs	r3, #1
 800494e:	e000      	b.n	8004952 <prvProcessTimerOrBlockTask+0x52>
 8004950:	2300      	movs	r3, #0
 8004952:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004954:	4b0f      	ldr	r3, [pc, #60]	@ (8004994 <prvProcessTimerOrBlockTask+0x94>)
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	4619      	mov	r1, r3
 8004962:	f7fe ff95 	bl	8003890 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004966:	f7ff fa19 	bl	8003d9c <xTaskResumeAll>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10a      	bne.n	8004986 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004970:	4b09      	ldr	r3, [pc, #36]	@ (8004998 <prvProcessTimerOrBlockTask+0x98>)
 8004972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004976:	601a      	str	r2, [r3, #0]
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	f3bf 8f6f 	isb	sy
}
 8004980:	e001      	b.n	8004986 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004982:	f7ff fa0b 	bl	8003d9c <xTaskResumeAll>
}
 8004986:	bf00      	nop
 8004988:	3710      	adds	r7, #16
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000d80 	.word	0x20000d80
 8004994:	20000d84 	.word	0x20000d84
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <prvGetNextExpireTime+0x40>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <prvGetNextExpireTime+0x16>
 80049ae:	2201      	movs	r2, #1
 80049b0:	e000      	b.n	80049b4 <prvGetNextExpireTime+0x18>
 80049b2:	2200      	movs	r2, #0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d105      	bne.n	80049cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <prvGetNextExpireTime+0x40>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e001      	b.n	80049d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049d0:	68fb      	ldr	r3, [r7, #12]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	20000d7c 	.word	0x20000d7c

080049e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80049e8:	f7ff fa76 	bl	8003ed8 <xTaskGetTickCount>
 80049ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80049ee:	4b0b      	ldr	r3, [pc, #44]	@ (8004a1c <prvSampleTimeNow+0x3c>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d205      	bcs.n	8004a04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80049f8:	f000 f93a 	bl	8004c70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e002      	b.n	8004a0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a0a:	4a04      	ldr	r2, [pc, #16]	@ (8004a1c <prvSampleTimeNow+0x3c>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a10:	68fb      	ldr	r3, [r7, #12]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000d8c 	.word	0x20000d8c

08004a20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b086      	sub	sp, #24
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d812      	bhi.n	8004a6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	1ad2      	subs	r2, r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d302      	bcc.n	8004a5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	617b      	str	r3, [r7, #20]
 8004a58:	e01b      	b.n	8004a92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <prvInsertTimerInActiveList+0x7c>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3304      	adds	r3, #4
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f7fe f8f1 	bl	8002c4c <vListInsert>
 8004a6a:	e012      	b.n	8004a92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d206      	bcs.n	8004a82 <prvInsertTimerInActiveList+0x62>
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d302      	bcc.n	8004a82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e007      	b.n	8004a92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a82:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <prvInsertTimerInActiveList+0x80>)
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f7fe f8dd 	bl	8002c4c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004a92:	697b      	ldr	r3, [r7, #20]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	20000d80 	.word	0x20000d80
 8004aa0:	20000d7c 	.word	0x20000d7c

08004aa4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08e      	sub	sp, #56	@ 0x38
 8004aa8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aaa:	e0ce      	b.n	8004c4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da19      	bge.n	8004ae6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ab2:	1d3b      	adds	r3, r7, #4
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10b      	bne.n	8004ad6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	61fb      	str	r3, [r7, #28]
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	e7fd      	b.n	8004ad2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004adc:	6850      	ldr	r0, [r2, #4]
 8004ade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ae0:	6892      	ldr	r2, [r2, #8]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f2c0 80ae 	blt.w	8004c4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d004      	beq.n	8004b04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afc:	3304      	adds	r3, #4
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fe f8dc 	bl	8002cbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b04:	463b      	mov	r3, r7
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff ff6a 	bl	80049e0 <prvSampleTimeNow>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b09      	cmp	r3, #9
 8004b12:	f200 8097 	bhi.w	8004c44 <prvProcessReceivedCommands+0x1a0>
 8004b16:	a201      	add	r2, pc, #4	@ (adr r2, 8004b1c <prvProcessReceivedCommands+0x78>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b45 	.word	0x08004b45
 8004b24:	08004b45 	.word	0x08004b45
 8004b28:	08004bbb 	.word	0x08004bbb
 8004b2c:	08004bcf 	.word	0x08004bcf
 8004b30:	08004c1b 	.word	0x08004c1b
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b45 	.word	0x08004b45
 8004b3c:	08004bbb 	.word	0x08004bbb
 8004b40:	08004bcf 	.word	0x08004bcf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b4a:	f043 0301 	orr.w	r3, r3, #1
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	18d1      	adds	r1, r2, r3
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b64:	f7ff ff5c 	bl	8004a20 <prvInsertTimerInActiveList>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d06c      	beq.n	8004c48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d061      	beq.n	8004c48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	441a      	add	r2, r3
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	2100      	movs	r1, #0
 8004b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b96:	f7ff fe03 	bl	80047a0 <xTimerGenericCommand>
 8004b9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d152      	bne.n	8004c48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba6:	f383 8811 	msr	BASEPRI, r3
 8004baa:	f3bf 8f6f 	isb	sy
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	61bb      	str	r3, [r7, #24]
}
 8004bb4:	bf00      	nop
 8004bb6:	bf00      	nop
 8004bb8:	e7fd      	b.n	8004bb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004bcc:	e03d      	b.n	8004c4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	617b      	str	r3, [r7, #20]
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	18d1      	adds	r1, r2, r3
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c14:	f7ff ff04 	bl	8004a20 <prvInsertTimerInActiveList>
					break;
 8004c18:	e017      	b.n	8004c4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d103      	bne.n	8004c30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c2a:	f000 fb87 	bl	800533c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c2e:	e00c      	b.n	8004c4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c36:	f023 0301 	bic.w	r3, r3, #1
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c42:	e002      	b.n	8004c4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c44:	bf00      	nop
 8004c46:	e000      	b.n	8004c4a <prvProcessReceivedCommands+0x1a6>
					break;
 8004c48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c4a:	4b08      	ldr	r3, [pc, #32]	@ (8004c6c <prvProcessReceivedCommands+0x1c8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	1d39      	adds	r1, r7, #4
 8004c50:	2200      	movs	r2, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe fb42 	bl	80032dc <xQueueReceive>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f47f af26 	bne.w	8004aac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop
 8004c64:	3730      	adds	r7, #48	@ 0x30
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000d84 	.word	0x20000d84

08004c70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c76:	e049      	b.n	8004d0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c78:	4b2e      	ldr	r3, [pc, #184]	@ (8004d34 <prvSwitchTimerLists+0xc4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c82:	4b2c      	ldr	r3, [pc, #176]	@ (8004d34 <prvSwitchTimerLists+0xc4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	3304      	adds	r3, #4
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe f813 	bl	8002cbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d02f      	beq.n	8004d0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d90e      	bls.n	8004cdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cca:	4b1a      	ldr	r3, [pc, #104]	@ (8004d34 <prvSwitchTimerLists+0xc4>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7fd ffb9 	bl	8002c4c <vListInsert>
 8004cda:	e017      	b.n	8004d0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cdc:	2300      	movs	r3, #0
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f7ff fd5a 	bl	80047a0 <xTimerGenericCommand>
 8004cec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	603b      	str	r3, [r7, #0]
}
 8004d06:	bf00      	nop
 8004d08:	bf00      	nop
 8004d0a:	e7fd      	b.n	8004d08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d0c:	4b09      	ldr	r3, [pc, #36]	@ (8004d34 <prvSwitchTimerLists+0xc4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1b0      	bne.n	8004c78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d16:	4b07      	ldr	r3, [pc, #28]	@ (8004d34 <prvSwitchTimerLists+0xc4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <prvSwitchTimerLists+0xc8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a04      	ldr	r2, [pc, #16]	@ (8004d34 <prvSwitchTimerLists+0xc4>)
 8004d22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d24:	4a04      	ldr	r2, [pc, #16]	@ (8004d38 <prvSwitchTimerLists+0xc8>)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	6013      	str	r3, [r2, #0]
}
 8004d2a:	bf00      	nop
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	20000d7c 	.word	0x20000d7c
 8004d38:	20000d80 	.word	0x20000d80

08004d3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d42:	f000 f92b 	bl	8004f9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d46:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <prvCheckForValidListAndQueue+0x60>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d120      	bne.n	8004d90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d4e:	4814      	ldr	r0, [pc, #80]	@ (8004da0 <prvCheckForValidListAndQueue+0x64>)
 8004d50:	f7fd ff2e 	bl	8002bb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d54:	4813      	ldr	r0, [pc, #76]	@ (8004da4 <prvCheckForValidListAndQueue+0x68>)
 8004d56:	f7fd ff2b 	bl	8002bb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d5a:	4b13      	ldr	r3, [pc, #76]	@ (8004da8 <prvCheckForValidListAndQueue+0x6c>)
 8004d5c:	4a10      	ldr	r2, [pc, #64]	@ (8004da0 <prvCheckForValidListAndQueue+0x64>)
 8004d5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d60:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <prvCheckForValidListAndQueue+0x70>)
 8004d62:	4a10      	ldr	r2, [pc, #64]	@ (8004da4 <prvCheckForValidListAndQueue+0x68>)
 8004d64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d66:	2300      	movs	r3, #0
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	4b11      	ldr	r3, [pc, #68]	@ (8004db0 <prvCheckForValidListAndQueue+0x74>)
 8004d6c:	4a11      	ldr	r2, [pc, #68]	@ (8004db4 <prvCheckForValidListAndQueue+0x78>)
 8004d6e:	2110      	movs	r1, #16
 8004d70:	200a      	movs	r0, #10
 8004d72:	f7fe f837 	bl	8002de4 <xQueueGenericCreateStatic>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <prvCheckForValidListAndQueue+0x60>)
 8004d7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d7c:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <prvCheckForValidListAndQueue+0x60>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d005      	beq.n	8004d90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d84:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <prvCheckForValidListAndQueue+0x60>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	490b      	ldr	r1, [pc, #44]	@ (8004db8 <prvCheckForValidListAndQueue+0x7c>)
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fd58 	bl	8003840 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d90:	f000 f934 	bl	8004ffc <vPortExitCritical>
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20000d84 	.word	0x20000d84
 8004da0:	20000d54 	.word	0x20000d54
 8004da4:	20000d68 	.word	0x20000d68
 8004da8:	20000d7c 	.word	0x20000d7c
 8004dac:	20000d80 	.word	0x20000d80
 8004db0:	20000e30 	.word	0x20000e30
 8004db4:	20000d90 	.word	0x20000d90
 8004db8:	08005fb8 	.word	0x08005fb8

08004dbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b04      	subs	r3, #4
 8004dcc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004dd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	3b04      	subs	r3, #4
 8004dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f023 0201 	bic.w	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004dec:	4a08      	ldr	r2, [pc, #32]	@ (8004e10 <pxPortInitialiseStack+0x54>)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b14      	subs	r3, #20
 8004df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	3b20      	subs	r3, #32
 8004e02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bc80      	pop	{r7}
 8004e0e:	4770      	bx	lr
 8004e10:	08004e15 	.word	0x08004e15

08004e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e1e:	4b12      	ldr	r3, [pc, #72]	@ (8004e68 <prvTaskExitError+0x54>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e26:	d00b      	beq.n	8004e40 <prvTaskExitError+0x2c>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60fb      	str	r3, [r7, #12]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <prvTaskExitError+0x28>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	60bb      	str	r3, [r7, #8]
}
 8004e52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e54:	bf00      	nop
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0fc      	beq.n	8004e56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e5c:	bf00      	nop
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr
 8004e68:	2000000c 	.word	0x2000000c
 8004e6c:	00000000 	.word	0x00000000

08004e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004e70:	4b07      	ldr	r3, [pc, #28]	@ (8004e90 <pxCurrentTCBConst2>)
 8004e72:	6819      	ldr	r1, [r3, #0]
 8004e74:	6808      	ldr	r0, [r1, #0]
 8004e76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e7a:	f380 8809 	msr	PSP, r0
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f04f 0000 	mov.w	r0, #0
 8004e86:	f380 8811 	msr	BASEPRI, r0
 8004e8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e8e:	4770      	bx	lr

08004e90 <pxCurrentTCBConst2>:
 8004e90:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004e98:	4806      	ldr	r0, [pc, #24]	@ (8004eb4 <prvPortStartFirstTask+0x1c>)
 8004e9a:	6800      	ldr	r0, [r0, #0]
 8004e9c:	6800      	ldr	r0, [r0, #0]
 8004e9e:	f380 8808 	msr	MSP, r0
 8004ea2:	b662      	cpsie	i
 8004ea4:	b661      	cpsie	f
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	df00      	svc	0
 8004eb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eb2:	bf00      	nop
 8004eb4:	e000ed08 	.word	0xe000ed08

08004eb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ebe:	4b32      	ldr	r3, [pc, #200]	@ (8004f88 <xPortStartScheduler+0xd0>)
 8004ec0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	22ff      	movs	r2, #255	@ 0xff
 8004ece:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <xPortStartScheduler+0xd4>)
 8004ee4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004ee8:	2207      	movs	r2, #7
 8004eea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eec:	e009      	b.n	8004f02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004eee:	4b28      	ldr	r3, [pc, #160]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	4a26      	ldr	r2, [pc, #152]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004ef6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	2b80      	cmp	r3, #128	@ 0x80
 8004f0c:	d0ef      	beq.n	8004eee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f0e:	4b20      	ldr	r3, [pc, #128]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f1c3 0307 	rsb	r3, r3, #7
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d00b      	beq.n	8004f32 <xPortStartScheduler+0x7a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60bb      	str	r3, [r7, #8]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f32:	4b17      	ldr	r3, [pc, #92]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	021b      	lsls	r3, r3, #8
 8004f38:	4a15      	ldr	r2, [pc, #84]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004f3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f3c:	4b14      	ldr	r3, [pc, #80]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f44:	4a12      	ldr	r2, [pc, #72]	@ (8004f90 <xPortStartScheduler+0xd8>)
 8004f46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f50:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <xPortStartScheduler+0xdc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a0f      	ldr	r2, [pc, #60]	@ (8004f94 <xPortStartScheduler+0xdc>)
 8004f56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004f94 <xPortStartScheduler+0xdc>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a0c      	ldr	r2, [pc, #48]	@ (8004f94 <xPortStartScheduler+0xdc>)
 8004f62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f68:	f000 f8b8 	bl	80050dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <xPortStartScheduler+0xe0>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f72:	f7ff ff91 	bl	8004e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f76:	f7ff f877 	bl	8004068 <vTaskSwitchContext>
	prvTaskExitError();
 8004f7a:	f7ff ff4b 	bl	8004e14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000e400 	.word	0xe000e400
 8004f8c:	20000e80 	.word	0x20000e80
 8004f90:	20000e84 	.word	0x20000e84
 8004f94:	e000ed20 	.word	0xe000ed20
 8004f98:	2000000c 	.word	0x2000000c

08004f9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	607b      	str	r3, [r7, #4]
}
 8004fb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff4 <vPortEnterCritical+0x58>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ff4 <vPortEnterCritical+0x58>)
 8004fbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <vPortEnterCritical+0x58>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d110      	bne.n	8004fea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <vPortEnterCritical+0x5c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00b      	beq.n	8004fea <vPortEnterCritical+0x4e>
	__asm volatile
 8004fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd6:	f383 8811 	msr	BASEPRI, r3
 8004fda:	f3bf 8f6f 	isb	sy
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	603b      	str	r3, [r7, #0]
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	e7fd      	b.n	8004fe6 <vPortEnterCritical+0x4a>
	}
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	2000000c 	.word	0x2000000c
 8004ff8:	e000ed04 	.word	0xe000ed04

08004ffc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005002:	4b12      	ldr	r3, [pc, #72]	@ (800504c <vPortExitCritical+0x50>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <vPortExitCritical+0x26>
	__asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	607b      	str	r3, [r7, #4]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005022:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <vPortExitCritical+0x50>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3b01      	subs	r3, #1
 8005028:	4a08      	ldr	r2, [pc, #32]	@ (800504c <vPortExitCritical+0x50>)
 800502a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800502c:	4b07      	ldr	r3, [pc, #28]	@ (800504c <vPortExitCritical+0x50>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d105      	bne.n	8005040 <vPortExitCritical+0x44>
 8005034:	2300      	movs	r3, #0
 8005036:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	f383 8811 	msr	BASEPRI, r3
}
 800503e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	2000000c 	.word	0x2000000c

08005050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005050:	f3ef 8009 	mrs	r0, PSP
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4b0d      	ldr	r3, [pc, #52]	@ (8005090 <pxCurrentTCBConst>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005060:	6010      	str	r0, [r2, #0]
 8005062:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005066:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800506a:	f380 8811 	msr	BASEPRI, r0
 800506e:	f7fe fffb 	bl	8004068 <vTaskSwitchContext>
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005086:	f380 8809 	msr	PSP, r0
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	4770      	bx	lr

08005090 <pxCurrentTCBConst>:
 8005090:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop

08005098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	607b      	str	r3, [r7, #4]
}
 80050b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050b2:	f7fe ff1f 	bl	8003ef4 <xTaskIncrementTick>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050bc:	4b06      	ldr	r3, [pc, #24]	@ (80050d8 <xPortSysTickHandler+0x40>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	2300      	movs	r3, #0
 80050c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	f383 8811 	msr	BASEPRI, r3
}
 80050ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050e0:	4b0a      	ldr	r3, [pc, #40]	@ (800510c <vPortSetupTimerInterrupt+0x30>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005110 <vPortSetupTimerInterrupt+0x34>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050ec:	4b09      	ldr	r3, [pc, #36]	@ (8005114 <vPortSetupTimerInterrupt+0x38>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a09      	ldr	r2, [pc, #36]	@ (8005118 <vPortSetupTimerInterrupt+0x3c>)
 80050f2:	fba2 2303 	umull	r2, r3, r2, r3
 80050f6:	099b      	lsrs	r3, r3, #6
 80050f8:	4a08      	ldr	r2, [pc, #32]	@ (800511c <vPortSetupTimerInterrupt+0x40>)
 80050fa:	3b01      	subs	r3, #1
 80050fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050fe:	4b03      	ldr	r3, [pc, #12]	@ (800510c <vPortSetupTimerInterrupt+0x30>)
 8005100:	2207      	movs	r2, #7
 8005102:	601a      	str	r2, [r3, #0]
}
 8005104:	bf00      	nop
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	e000e010 	.word	0xe000e010
 8005110:	e000e018 	.word	0xe000e018
 8005114:	20000000 	.word	0x20000000
 8005118:	10624dd3 	.word	0x10624dd3
 800511c:	e000e014 	.word	0xe000e014

08005120 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005126:	f3ef 8305 	mrs	r3, IPSR
 800512a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	d915      	bls.n	800515e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005132:	4a17      	ldr	r2, [pc, #92]	@ (8005190 <vPortValidateInterruptPriority+0x70>)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800513c:	4b15      	ldr	r3, [pc, #84]	@ (8005194 <vPortValidateInterruptPriority+0x74>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	7afa      	ldrb	r2, [r7, #11]
 8005142:	429a      	cmp	r2, r3
 8005144:	d20b      	bcs.n	800515e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800514a:	f383 8811 	msr	BASEPRI, r3
 800514e:	f3bf 8f6f 	isb	sy
 8005152:	f3bf 8f4f 	dsb	sy
 8005156:	607b      	str	r3, [r7, #4]
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	e7fd      	b.n	800515a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800515e:	4b0e      	ldr	r3, [pc, #56]	@ (8005198 <vPortValidateInterruptPriority+0x78>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005166:	4b0d      	ldr	r3, [pc, #52]	@ (800519c <vPortValidateInterruptPriority+0x7c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d90b      	bls.n	8005186 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	603b      	str	r3, [r7, #0]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <vPortValidateInterruptPriority+0x62>
	}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr
 8005190:	e000e3f0 	.word	0xe000e3f0
 8005194:	20000e80 	.word	0x20000e80
 8005198:	e000ed0c 	.word	0xe000ed0c
 800519c:	20000e84 	.word	0x20000e84

080051a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b08a      	sub	sp, #40	@ 0x28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051ac:	f7fe fde8 	bl	8003d80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005324 <pvPortMalloc+0x184>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d101      	bne.n	80051bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051b8:	f000 f924 	bl	8005404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005328 <pvPortMalloc+0x188>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	f040 8095 	bne.w	80052f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d01e      	beq.n	800520e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051d0:	2208      	movs	r2, #8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d015      	beq.n	800520e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f023 0307 	bic.w	r3, r3, #7
 80051e8:	3308      	adds	r3, #8
 80051ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <pvPortMalloc+0x6e>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	617b      	str	r3, [r7, #20]
}
 8005208:	bf00      	nop
 800520a:	bf00      	nop
 800520c:	e7fd      	b.n	800520a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d06f      	beq.n	80052f4 <pvPortMalloc+0x154>
 8005214:	4b45      	ldr	r3, [pc, #276]	@ (800532c <pvPortMalloc+0x18c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d86a      	bhi.n	80052f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800521e:	4b44      	ldr	r3, [pc, #272]	@ (8005330 <pvPortMalloc+0x190>)
 8005220:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005222:	4b43      	ldr	r3, [pc, #268]	@ (8005330 <pvPortMalloc+0x190>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005228:	e004      	b.n	8005234 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800522e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d903      	bls.n	8005246 <pvPortMalloc+0xa6>
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f1      	bne.n	800522a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005246:	4b37      	ldr	r3, [pc, #220]	@ (8005324 <pvPortMalloc+0x184>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	429a      	cmp	r2, r3
 800524e:	d051      	beq.n	80052f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2208      	movs	r2, #8
 8005256:	4413      	add	r3, r2
 8005258:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1ad2      	subs	r2, r2, r3
 800526a:	2308      	movs	r3, #8
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	429a      	cmp	r2, r3
 8005270:	d920      	bls.n	80052b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4413      	add	r3, r2
 8005278:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <pvPortMalloc+0xfc>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	613b      	str	r3, [r7, #16]
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	e7fd      	b.n	8005298 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800529c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	1ad2      	subs	r2, r2, r3
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052ae:	69b8      	ldr	r0, [r7, #24]
 80052b0:	f000 f90a 	bl	80054c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052b4:	4b1d      	ldr	r3, [pc, #116]	@ (800532c <pvPortMalloc+0x18c>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	4a1b      	ldr	r2, [pc, #108]	@ (800532c <pvPortMalloc+0x18c>)
 80052c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052c2:	4b1a      	ldr	r3, [pc, #104]	@ (800532c <pvPortMalloc+0x18c>)
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005334 <pvPortMalloc+0x194>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d203      	bcs.n	80052d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052ce:	4b17      	ldr	r3, [pc, #92]	@ (800532c <pvPortMalloc+0x18c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <pvPortMalloc+0x194>)
 80052d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	4b13      	ldr	r3, [pc, #76]	@ (8005328 <pvPortMalloc+0x188>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	431a      	orrs	r2, r3
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ea:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <pvPortMalloc+0x198>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3301      	adds	r3, #1
 80052f0:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <pvPortMalloc+0x198>)
 80052f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052f4:	f7fe fd52 	bl	8003d9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00b      	beq.n	800531a <pvPortMalloc+0x17a>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	60fb      	str	r3, [r7, #12]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <pvPortMalloc+0x176>
	return pvReturn;
 800531a:	69fb      	ldr	r3, [r7, #28]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	@ 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20001a90 	.word	0x20001a90
 8005328:	20001aa4 	.word	0x20001aa4
 800532c:	20001a94 	.word	0x20001a94
 8005330:	20001a88 	.word	0x20001a88
 8005334:	20001a98 	.word	0x20001a98
 8005338:	20001a9c 	.word	0x20001a9c

0800533c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d04f      	beq.n	80053ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800534e:	2308      	movs	r3, #8
 8005350:	425b      	negs	r3, r3
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4413      	add	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	4b25      	ldr	r3, [pc, #148]	@ (80053f8 <vPortFree+0xbc>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <vPortFree+0x46>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	60fb      	str	r3, [r7, #12]
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	e7fd      	b.n	800537e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00b      	beq.n	80053a2 <vPortFree+0x66>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60bb      	str	r3, [r7, #8]
}
 800539c:	bf00      	nop
 800539e:	bf00      	nop
 80053a0:	e7fd      	b.n	800539e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	4b14      	ldr	r3, [pc, #80]	@ (80053f8 <vPortFree+0xbc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01e      	beq.n	80053ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11a      	bne.n	80053ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	4b0e      	ldr	r3, [pc, #56]	@ (80053f8 <vPortFree+0xbc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	43db      	mvns	r3, r3
 80053c2:	401a      	ands	r2, r3
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053c8:	f7fe fcda 	bl	8003d80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	4b0a      	ldr	r3, [pc, #40]	@ (80053fc <vPortFree+0xc0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4413      	add	r3, r2
 80053d6:	4a09      	ldr	r2, [pc, #36]	@ (80053fc <vPortFree+0xc0>)
 80053d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80053da:	6938      	ldr	r0, [r7, #16]
 80053dc:	f000 f874 	bl	80054c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <vPortFree+0xc4>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	3301      	adds	r3, #1
 80053e6:	4a06      	ldr	r2, [pc, #24]	@ (8005400 <vPortFree+0xc4>)
 80053e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053ea:	f7fe fcd7 	bl	8003d9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	20001aa4 	.word	0x20001aa4
 80053fc:	20001a94 	.word	0x20001a94
 8005400:	20001aa0 	.word	0x20001aa0

08005404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800540a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800540e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005410:	4b27      	ldr	r3, [pc, #156]	@ (80054b0 <prvHeapInit+0xac>)
 8005412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00c      	beq.n	8005438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3307      	adds	r3, #7
 8005422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0307 	bic.w	r3, r3, #7
 800542a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800542c:	68ba      	ldr	r2, [r7, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	4a1f      	ldr	r2, [pc, #124]	@ (80054b0 <prvHeapInit+0xac>)
 8005434:	4413      	add	r3, r2
 8005436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <prvHeapInit+0xb0>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005442:	4b1c      	ldr	r3, [pc, #112]	@ (80054b4 <prvHeapInit+0xb0>)
 8005444:	2200      	movs	r2, #0
 8005446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005450:	2208      	movs	r2, #8
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 0307 	bic.w	r3, r3, #7
 800545e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a15      	ldr	r2, [pc, #84]	@ (80054b8 <prvHeapInit+0xb4>)
 8005464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005466:	4b14      	ldr	r3, [pc, #80]	@ (80054b8 <prvHeapInit+0xb4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2200      	movs	r2, #0
 800546c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800546e:	4b12      	ldr	r3, [pc, #72]	@ (80054b8 <prvHeapInit+0xb4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	1ad2      	subs	r2, r2, r3
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005484:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <prvHeapInit+0xb4>)
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	4a0a      	ldr	r2, [pc, #40]	@ (80054bc <prvHeapInit+0xb8>)
 8005492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	4a09      	ldr	r2, [pc, #36]	@ (80054c0 <prvHeapInit+0xbc>)
 800549a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800549c:	4b09      	ldr	r3, [pc, #36]	@ (80054c4 <prvHeapInit+0xc0>)
 800549e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054a2:	601a      	str	r2, [r3, #0]
}
 80054a4:	bf00      	nop
 80054a6:	3714      	adds	r7, #20
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bc80      	pop	{r7}
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	20000e88 	.word	0x20000e88
 80054b4:	20001a88 	.word	0x20001a88
 80054b8:	20001a90 	.word	0x20001a90
 80054bc:	20001a98 	.word	0x20001a98
 80054c0:	20001a94 	.word	0x20001a94
 80054c4:	20001aa4 	.word	0x20001aa4

080054c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054d0:	4b27      	ldr	r3, [pc, #156]	@ (8005570 <prvInsertBlockIntoFreeList+0xa8>)
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e002      	b.n	80054dc <prvInsertBlockIntoFreeList+0x14>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d8f7      	bhi.n	80054d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4413      	add	r3, r2
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d108      	bne.n	800550a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	441a      	add	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d118      	bne.n	8005550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b14      	ldr	r3, [pc, #80]	@ (8005574 <prvInsertBlockIntoFreeList+0xac>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d00d      	beq.n	8005546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685a      	ldr	r2, [r3, #4]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e008      	b.n	8005558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005546:	4b0b      	ldr	r3, [pc, #44]	@ (8005574 <prvInsertBlockIntoFreeList+0xac>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e003      	b.n	8005558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	429a      	cmp	r2, r3
 800555e:	d002      	beq.n	8005566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	20001a88 	.word	0x20001a88
 8005574:	20001a90 	.word	0x20001a90

08005578 <siprintf>:
 8005578:	b40e      	push	{r1, r2, r3}
 800557a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800557e:	b510      	push	{r4, lr}
 8005580:	2400      	movs	r4, #0
 8005582:	b09d      	sub	sp, #116	@ 0x74
 8005584:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005586:	9002      	str	r0, [sp, #8]
 8005588:	9006      	str	r0, [sp, #24]
 800558a:	9107      	str	r1, [sp, #28]
 800558c:	9104      	str	r1, [sp, #16]
 800558e:	4809      	ldr	r0, [pc, #36]	@ (80055b4 <siprintf+0x3c>)
 8005590:	4909      	ldr	r1, [pc, #36]	@ (80055b8 <siprintf+0x40>)
 8005592:	f853 2b04 	ldr.w	r2, [r3], #4
 8005596:	9105      	str	r1, [sp, #20]
 8005598:	6800      	ldr	r0, [r0, #0]
 800559a:	a902      	add	r1, sp, #8
 800559c:	9301      	str	r3, [sp, #4]
 800559e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80055a0:	f000 f9a0 	bl	80058e4 <_svfiprintf_r>
 80055a4:	9b02      	ldr	r3, [sp, #8]
 80055a6:	701c      	strb	r4, [r3, #0]
 80055a8:	b01d      	add	sp, #116	@ 0x74
 80055aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ae:	b003      	add	sp, #12
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	20000010 	.word	0x20000010
 80055b8:	ffff0208 	.word	0xffff0208

080055bc <memset>:
 80055bc:	4603      	mov	r3, r0
 80055be:	4402      	add	r2, r0
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d100      	bne.n	80055c6 <memset+0xa>
 80055c4:	4770      	bx	lr
 80055c6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ca:	e7f9      	b.n	80055c0 <memset+0x4>

080055cc <__errno>:
 80055cc:	4b01      	ldr	r3, [pc, #4]	@ (80055d4 <__errno+0x8>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	20000010 	.word	0x20000010

080055d8 <__libc_init_array>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	2600      	movs	r6, #0
 80055dc:	4d0c      	ldr	r5, [pc, #48]	@ (8005610 <__libc_init_array+0x38>)
 80055de:	4c0d      	ldr	r4, [pc, #52]	@ (8005614 <__libc_init_array+0x3c>)
 80055e0:	1b64      	subs	r4, r4, r5
 80055e2:	10a4      	asrs	r4, r4, #2
 80055e4:	42a6      	cmp	r6, r4
 80055e6:	d109      	bne.n	80055fc <__libc_init_array+0x24>
 80055e8:	f000 fc76 	bl	8005ed8 <_init>
 80055ec:	2600      	movs	r6, #0
 80055ee:	4d0a      	ldr	r5, [pc, #40]	@ (8005618 <__libc_init_array+0x40>)
 80055f0:	4c0a      	ldr	r4, [pc, #40]	@ (800561c <__libc_init_array+0x44>)
 80055f2:	1b64      	subs	r4, r4, r5
 80055f4:	10a4      	asrs	r4, r4, #2
 80055f6:	42a6      	cmp	r6, r4
 80055f8:	d105      	bne.n	8005606 <__libc_init_array+0x2e>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005600:	4798      	blx	r3
 8005602:	3601      	adds	r6, #1
 8005604:	e7ee      	b.n	80055e4 <__libc_init_array+0xc>
 8005606:	f855 3b04 	ldr.w	r3, [r5], #4
 800560a:	4798      	blx	r3
 800560c:	3601      	adds	r6, #1
 800560e:	e7f2      	b.n	80055f6 <__libc_init_array+0x1e>
 8005610:	080060c4 	.word	0x080060c4
 8005614:	080060c4 	.word	0x080060c4
 8005618:	080060c4 	.word	0x080060c4
 800561c:	080060c8 	.word	0x080060c8

08005620 <__retarget_lock_acquire_recursive>:
 8005620:	4770      	bx	lr

08005622 <__retarget_lock_release_recursive>:
 8005622:	4770      	bx	lr

08005624 <memcpy>:
 8005624:	440a      	add	r2, r1
 8005626:	4291      	cmp	r1, r2
 8005628:	f100 33ff 	add.w	r3, r0, #4294967295
 800562c:	d100      	bne.n	8005630 <memcpy+0xc>
 800562e:	4770      	bx	lr
 8005630:	b510      	push	{r4, lr}
 8005632:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005636:	4291      	cmp	r1, r2
 8005638:	f803 4f01 	strb.w	r4, [r3, #1]!
 800563c:	d1f9      	bne.n	8005632 <memcpy+0xe>
 800563e:	bd10      	pop	{r4, pc}

08005640 <_free_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	2900      	cmp	r1, #0
 8005646:	d040      	beq.n	80056ca <_free_r+0x8a>
 8005648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564c:	1f0c      	subs	r4, r1, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	bfb8      	it	lt
 8005652:	18e4      	addlt	r4, r4, r3
 8005654:	f000 f8de 	bl	8005814 <__malloc_lock>
 8005658:	4a1c      	ldr	r2, [pc, #112]	@ (80056cc <_free_r+0x8c>)
 800565a:	6813      	ldr	r3, [r2, #0]
 800565c:	b933      	cbnz	r3, 800566c <_free_r+0x2c>
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	6014      	str	r4, [r2, #0]
 8005662:	4628      	mov	r0, r5
 8005664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005668:	f000 b8da 	b.w	8005820 <__malloc_unlock>
 800566c:	42a3      	cmp	r3, r4
 800566e:	d908      	bls.n	8005682 <_free_r+0x42>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	1821      	adds	r1, r4, r0
 8005674:	428b      	cmp	r3, r1
 8005676:	bf01      	itttt	eq
 8005678:	6819      	ldreq	r1, [r3, #0]
 800567a:	685b      	ldreq	r3, [r3, #4]
 800567c:	1809      	addeq	r1, r1, r0
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	e7ed      	b.n	800565e <_free_r+0x1e>
 8005682:	461a      	mov	r2, r3
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	b10b      	cbz	r3, 800568c <_free_r+0x4c>
 8005688:	42a3      	cmp	r3, r4
 800568a:	d9fa      	bls.n	8005682 <_free_r+0x42>
 800568c:	6811      	ldr	r1, [r2, #0]
 800568e:	1850      	adds	r0, r2, r1
 8005690:	42a0      	cmp	r0, r4
 8005692:	d10b      	bne.n	80056ac <_free_r+0x6c>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	4401      	add	r1, r0
 8005698:	1850      	adds	r0, r2, r1
 800569a:	4283      	cmp	r3, r0
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	d1e0      	bne.n	8005662 <_free_r+0x22>
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4408      	add	r0, r1
 80056a6:	6010      	str	r0, [r2, #0]
 80056a8:	6053      	str	r3, [r2, #4]
 80056aa:	e7da      	b.n	8005662 <_free_r+0x22>
 80056ac:	d902      	bls.n	80056b4 <_free_r+0x74>
 80056ae:	230c      	movs	r3, #12
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	e7d6      	b.n	8005662 <_free_r+0x22>
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	1821      	adds	r1, r4, r0
 80056b8:	428b      	cmp	r3, r1
 80056ba:	bf01      	itttt	eq
 80056bc:	6819      	ldreq	r1, [r3, #0]
 80056be:	685b      	ldreq	r3, [r3, #4]
 80056c0:	1809      	addeq	r1, r1, r0
 80056c2:	6021      	streq	r1, [r4, #0]
 80056c4:	6063      	str	r3, [r4, #4]
 80056c6:	6054      	str	r4, [r2, #4]
 80056c8:	e7cb      	b.n	8005662 <_free_r+0x22>
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20001bec 	.word	0x20001bec

080056d0 <sbrk_aligned>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	4e0f      	ldr	r6, [pc, #60]	@ (8005710 <sbrk_aligned+0x40>)
 80056d4:	460c      	mov	r4, r1
 80056d6:	6831      	ldr	r1, [r6, #0]
 80056d8:	4605      	mov	r5, r0
 80056da:	b911      	cbnz	r1, 80056e2 <sbrk_aligned+0x12>
 80056dc:	f000 fba8 	bl	8005e30 <_sbrk_r>
 80056e0:	6030      	str	r0, [r6, #0]
 80056e2:	4621      	mov	r1, r4
 80056e4:	4628      	mov	r0, r5
 80056e6:	f000 fba3 	bl	8005e30 <_sbrk_r>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d103      	bne.n	80056f6 <sbrk_aligned+0x26>
 80056ee:	f04f 34ff 	mov.w	r4, #4294967295
 80056f2:	4620      	mov	r0, r4
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	1cc4      	adds	r4, r0, #3
 80056f8:	f024 0403 	bic.w	r4, r4, #3
 80056fc:	42a0      	cmp	r0, r4
 80056fe:	d0f8      	beq.n	80056f2 <sbrk_aligned+0x22>
 8005700:	1a21      	subs	r1, r4, r0
 8005702:	4628      	mov	r0, r5
 8005704:	f000 fb94 	bl	8005e30 <_sbrk_r>
 8005708:	3001      	adds	r0, #1
 800570a:	d1f2      	bne.n	80056f2 <sbrk_aligned+0x22>
 800570c:	e7ef      	b.n	80056ee <sbrk_aligned+0x1e>
 800570e:	bf00      	nop
 8005710:	20001be8 	.word	0x20001be8

08005714 <_malloc_r>:
 8005714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005718:	1ccd      	adds	r5, r1, #3
 800571a:	f025 0503 	bic.w	r5, r5, #3
 800571e:	3508      	adds	r5, #8
 8005720:	2d0c      	cmp	r5, #12
 8005722:	bf38      	it	cc
 8005724:	250c      	movcc	r5, #12
 8005726:	2d00      	cmp	r5, #0
 8005728:	4606      	mov	r6, r0
 800572a:	db01      	blt.n	8005730 <_malloc_r+0x1c>
 800572c:	42a9      	cmp	r1, r5
 800572e:	d904      	bls.n	800573a <_malloc_r+0x26>
 8005730:	230c      	movs	r3, #12
 8005732:	6033      	str	r3, [r6, #0]
 8005734:	2000      	movs	r0, #0
 8005736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800573a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005810 <_malloc_r+0xfc>
 800573e:	f000 f869 	bl	8005814 <__malloc_lock>
 8005742:	f8d8 3000 	ldr.w	r3, [r8]
 8005746:	461c      	mov	r4, r3
 8005748:	bb44      	cbnz	r4, 800579c <_malloc_r+0x88>
 800574a:	4629      	mov	r1, r5
 800574c:	4630      	mov	r0, r6
 800574e:	f7ff ffbf 	bl	80056d0 <sbrk_aligned>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	4604      	mov	r4, r0
 8005756:	d158      	bne.n	800580a <_malloc_r+0xf6>
 8005758:	f8d8 4000 	ldr.w	r4, [r8]
 800575c:	4627      	mov	r7, r4
 800575e:	2f00      	cmp	r7, #0
 8005760:	d143      	bne.n	80057ea <_malloc_r+0xd6>
 8005762:	2c00      	cmp	r4, #0
 8005764:	d04b      	beq.n	80057fe <_malloc_r+0xea>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4639      	mov	r1, r7
 800576a:	4630      	mov	r0, r6
 800576c:	eb04 0903 	add.w	r9, r4, r3
 8005770:	f000 fb5e 	bl	8005e30 <_sbrk_r>
 8005774:	4581      	cmp	r9, r0
 8005776:	d142      	bne.n	80057fe <_malloc_r+0xea>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	4630      	mov	r0, r6
 800577c:	1a6d      	subs	r5, r5, r1
 800577e:	4629      	mov	r1, r5
 8005780:	f7ff ffa6 	bl	80056d0 <sbrk_aligned>
 8005784:	3001      	adds	r0, #1
 8005786:	d03a      	beq.n	80057fe <_malloc_r+0xea>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	442b      	add	r3, r5
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	f8d8 3000 	ldr.w	r3, [r8]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	bb62      	cbnz	r2, 80057f0 <_malloc_r+0xdc>
 8005796:	f8c8 7000 	str.w	r7, [r8]
 800579a:	e00f      	b.n	80057bc <_malloc_r+0xa8>
 800579c:	6822      	ldr	r2, [r4, #0]
 800579e:	1b52      	subs	r2, r2, r5
 80057a0:	d420      	bmi.n	80057e4 <_malloc_r+0xd0>
 80057a2:	2a0b      	cmp	r2, #11
 80057a4:	d917      	bls.n	80057d6 <_malloc_r+0xc2>
 80057a6:	1961      	adds	r1, r4, r5
 80057a8:	42a3      	cmp	r3, r4
 80057aa:	6025      	str	r5, [r4, #0]
 80057ac:	bf18      	it	ne
 80057ae:	6059      	strne	r1, [r3, #4]
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	bf08      	it	eq
 80057b4:	f8c8 1000 	streq.w	r1, [r8]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4630      	mov	r0, r6
 80057be:	f000 f82f 	bl	8005820 <__malloc_unlock>
 80057c2:	f104 000b 	add.w	r0, r4, #11
 80057c6:	1d23      	adds	r3, r4, #4
 80057c8:	f020 0007 	bic.w	r0, r0, #7
 80057cc:	1ac2      	subs	r2, r0, r3
 80057ce:	bf1c      	itt	ne
 80057d0:	1a1b      	subne	r3, r3, r0
 80057d2:	50a3      	strne	r3, [r4, r2]
 80057d4:	e7af      	b.n	8005736 <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	f8c8 2000 	streq.w	r2, [r8]
 80057e0:	605a      	strne	r2, [r3, #4]
 80057e2:	e7eb      	b.n	80057bc <_malloc_r+0xa8>
 80057e4:	4623      	mov	r3, r4
 80057e6:	6864      	ldr	r4, [r4, #4]
 80057e8:	e7ae      	b.n	8005748 <_malloc_r+0x34>
 80057ea:	463c      	mov	r4, r7
 80057ec:	687f      	ldr	r7, [r7, #4]
 80057ee:	e7b6      	b.n	800575e <_malloc_r+0x4a>
 80057f0:	461a      	mov	r2, r3
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d1fb      	bne.n	80057f0 <_malloc_r+0xdc>
 80057f8:	2300      	movs	r3, #0
 80057fa:	6053      	str	r3, [r2, #4]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa8>
 80057fe:	230c      	movs	r3, #12
 8005800:	4630      	mov	r0, r6
 8005802:	6033      	str	r3, [r6, #0]
 8005804:	f000 f80c 	bl	8005820 <__malloc_unlock>
 8005808:	e794      	b.n	8005734 <_malloc_r+0x20>
 800580a:	6005      	str	r5, [r0, #0]
 800580c:	e7d6      	b.n	80057bc <_malloc_r+0xa8>
 800580e:	bf00      	nop
 8005810:	20001bec 	.word	0x20001bec

08005814 <__malloc_lock>:
 8005814:	4801      	ldr	r0, [pc, #4]	@ (800581c <__malloc_lock+0x8>)
 8005816:	f7ff bf03 	b.w	8005620 <__retarget_lock_acquire_recursive>
 800581a:	bf00      	nop
 800581c:	20001be4 	.word	0x20001be4

08005820 <__malloc_unlock>:
 8005820:	4801      	ldr	r0, [pc, #4]	@ (8005828 <__malloc_unlock+0x8>)
 8005822:	f7ff befe 	b.w	8005622 <__retarget_lock_release_recursive>
 8005826:	bf00      	nop
 8005828:	20001be4 	.word	0x20001be4

0800582c <__ssputs_r>:
 800582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005830:	461f      	mov	r7, r3
 8005832:	688e      	ldr	r6, [r1, #8]
 8005834:	4682      	mov	sl, r0
 8005836:	42be      	cmp	r6, r7
 8005838:	460c      	mov	r4, r1
 800583a:	4690      	mov	r8, r2
 800583c:	680b      	ldr	r3, [r1, #0]
 800583e:	d82d      	bhi.n	800589c <__ssputs_r+0x70>
 8005840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005848:	d026      	beq.n	8005898 <__ssputs_r+0x6c>
 800584a:	6965      	ldr	r5, [r4, #20]
 800584c:	6909      	ldr	r1, [r1, #16]
 800584e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005852:	eba3 0901 	sub.w	r9, r3, r1
 8005856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800585a:	1c7b      	adds	r3, r7, #1
 800585c:	444b      	add	r3, r9
 800585e:	106d      	asrs	r5, r5, #1
 8005860:	429d      	cmp	r5, r3
 8005862:	bf38      	it	cc
 8005864:	461d      	movcc	r5, r3
 8005866:	0553      	lsls	r3, r2, #21
 8005868:	d527      	bpl.n	80058ba <__ssputs_r+0x8e>
 800586a:	4629      	mov	r1, r5
 800586c:	f7ff ff52 	bl	8005714 <_malloc_r>
 8005870:	4606      	mov	r6, r0
 8005872:	b360      	cbz	r0, 80058ce <__ssputs_r+0xa2>
 8005874:	464a      	mov	r2, r9
 8005876:	6921      	ldr	r1, [r4, #16]
 8005878:	f7ff fed4 	bl	8005624 <memcpy>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005886:	81a3      	strh	r3, [r4, #12]
 8005888:	6126      	str	r6, [r4, #16]
 800588a:	444e      	add	r6, r9
 800588c:	6026      	str	r6, [r4, #0]
 800588e:	463e      	mov	r6, r7
 8005890:	6165      	str	r5, [r4, #20]
 8005892:	eba5 0509 	sub.w	r5, r5, r9
 8005896:	60a5      	str	r5, [r4, #8]
 8005898:	42be      	cmp	r6, r7
 800589a:	d900      	bls.n	800589e <__ssputs_r+0x72>
 800589c:	463e      	mov	r6, r7
 800589e:	4632      	mov	r2, r6
 80058a0:	4641      	mov	r1, r8
 80058a2:	6820      	ldr	r0, [r4, #0]
 80058a4:	f000 faaa 	bl	8005dfc <memmove>
 80058a8:	2000      	movs	r0, #0
 80058aa:	68a3      	ldr	r3, [r4, #8]
 80058ac:	1b9b      	subs	r3, r3, r6
 80058ae:	60a3      	str	r3, [r4, #8]
 80058b0:	6823      	ldr	r3, [r4, #0]
 80058b2:	4433      	add	r3, r6
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ba:	462a      	mov	r2, r5
 80058bc:	f000 fad6 	bl	8005e6c <_realloc_r>
 80058c0:	4606      	mov	r6, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1e0      	bne.n	8005888 <__ssputs_r+0x5c>
 80058c6:	4650      	mov	r0, sl
 80058c8:	6921      	ldr	r1, [r4, #16]
 80058ca:	f7ff feb9 	bl	8005640 <_free_r>
 80058ce:	230c      	movs	r3, #12
 80058d0:	f8ca 3000 	str.w	r3, [sl]
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	e7e9      	b.n	80058b6 <__ssputs_r+0x8a>
	...

080058e4 <_svfiprintf_r>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	4698      	mov	r8, r3
 80058ea:	898b      	ldrh	r3, [r1, #12]
 80058ec:	4607      	mov	r7, r0
 80058ee:	061b      	lsls	r3, r3, #24
 80058f0:	460d      	mov	r5, r1
 80058f2:	4614      	mov	r4, r2
 80058f4:	b09d      	sub	sp, #116	@ 0x74
 80058f6:	d510      	bpl.n	800591a <_svfiprintf_r+0x36>
 80058f8:	690b      	ldr	r3, [r1, #16]
 80058fa:	b973      	cbnz	r3, 800591a <_svfiprintf_r+0x36>
 80058fc:	2140      	movs	r1, #64	@ 0x40
 80058fe:	f7ff ff09 	bl	8005714 <_malloc_r>
 8005902:	6028      	str	r0, [r5, #0]
 8005904:	6128      	str	r0, [r5, #16]
 8005906:	b930      	cbnz	r0, 8005916 <_svfiprintf_r+0x32>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	b01d      	add	sp, #116	@ 0x74
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	2340      	movs	r3, #64	@ 0x40
 8005918:	616b      	str	r3, [r5, #20]
 800591a:	2300      	movs	r3, #0
 800591c:	9309      	str	r3, [sp, #36]	@ 0x24
 800591e:	2320      	movs	r3, #32
 8005920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005924:	2330      	movs	r3, #48	@ 0x30
 8005926:	f04f 0901 	mov.w	r9, #1
 800592a:	f8cd 800c 	str.w	r8, [sp, #12]
 800592e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005ac8 <_svfiprintf_r+0x1e4>
 8005932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005936:	4623      	mov	r3, r4
 8005938:	469a      	mov	sl, r3
 800593a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800593e:	b10a      	cbz	r2, 8005944 <_svfiprintf_r+0x60>
 8005940:	2a25      	cmp	r2, #37	@ 0x25
 8005942:	d1f9      	bne.n	8005938 <_svfiprintf_r+0x54>
 8005944:	ebba 0b04 	subs.w	fp, sl, r4
 8005948:	d00b      	beq.n	8005962 <_svfiprintf_r+0x7e>
 800594a:	465b      	mov	r3, fp
 800594c:	4622      	mov	r2, r4
 800594e:	4629      	mov	r1, r5
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff ff6b 	bl	800582c <__ssputs_r>
 8005956:	3001      	adds	r0, #1
 8005958:	f000 80a7 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 800595c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595e:	445a      	add	r2, fp
 8005960:	9209      	str	r2, [sp, #36]	@ 0x24
 8005962:	f89a 3000 	ldrb.w	r3, [sl]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 809f 	beq.w	8005aaa <_svfiprintf_r+0x1c6>
 800596c:	2300      	movs	r3, #0
 800596e:	f04f 32ff 	mov.w	r2, #4294967295
 8005972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005976:	f10a 0a01 	add.w	sl, sl, #1
 800597a:	9304      	str	r3, [sp, #16]
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005982:	931a      	str	r3, [sp, #104]	@ 0x68
 8005984:	4654      	mov	r4, sl
 8005986:	2205      	movs	r2, #5
 8005988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598c:	484e      	ldr	r0, [pc, #312]	@ (8005ac8 <_svfiprintf_r+0x1e4>)
 800598e:	f000 fa5f 	bl	8005e50 <memchr>
 8005992:	9a04      	ldr	r2, [sp, #16]
 8005994:	b9d8      	cbnz	r0, 80059ce <_svfiprintf_r+0xea>
 8005996:	06d0      	lsls	r0, r2, #27
 8005998:	bf44      	itt	mi
 800599a:	2320      	movmi	r3, #32
 800599c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a0:	0711      	lsls	r1, r2, #28
 80059a2:	bf44      	itt	mi
 80059a4:	232b      	movmi	r3, #43	@ 0x2b
 80059a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059aa:	f89a 3000 	ldrb.w	r3, [sl]
 80059ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80059b0:	d015      	beq.n	80059de <_svfiprintf_r+0xfa>
 80059b2:	4654      	mov	r4, sl
 80059b4:	2000      	movs	r0, #0
 80059b6:	f04f 0c0a 	mov.w	ip, #10
 80059ba:	9a07      	ldr	r2, [sp, #28]
 80059bc:	4621      	mov	r1, r4
 80059be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c2:	3b30      	subs	r3, #48	@ 0x30
 80059c4:	2b09      	cmp	r3, #9
 80059c6:	d94b      	bls.n	8005a60 <_svfiprintf_r+0x17c>
 80059c8:	b1b0      	cbz	r0, 80059f8 <_svfiprintf_r+0x114>
 80059ca:	9207      	str	r2, [sp, #28]
 80059cc:	e014      	b.n	80059f8 <_svfiprintf_r+0x114>
 80059ce:	eba0 0308 	sub.w	r3, r0, r8
 80059d2:	fa09 f303 	lsl.w	r3, r9, r3
 80059d6:	4313      	orrs	r3, r2
 80059d8:	46a2      	mov	sl, r4
 80059da:	9304      	str	r3, [sp, #16]
 80059dc:	e7d2      	b.n	8005984 <_svfiprintf_r+0xa0>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	1d19      	adds	r1, r3, #4
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	9103      	str	r1, [sp, #12]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bfbb      	ittet	lt
 80059ea:	425b      	neglt	r3, r3
 80059ec:	f042 0202 	orrlt.w	r2, r2, #2
 80059f0:	9307      	strge	r3, [sp, #28]
 80059f2:	9307      	strlt	r3, [sp, #28]
 80059f4:	bfb8      	it	lt
 80059f6:	9204      	strlt	r2, [sp, #16]
 80059f8:	7823      	ldrb	r3, [r4, #0]
 80059fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80059fc:	d10a      	bne.n	8005a14 <_svfiprintf_r+0x130>
 80059fe:	7863      	ldrb	r3, [r4, #1]
 8005a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a02:	d132      	bne.n	8005a6a <_svfiprintf_r+0x186>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3402      	adds	r4, #2
 8005a08:	1d1a      	adds	r2, r3, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	9203      	str	r2, [sp, #12]
 8005a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005acc <_svfiprintf_r+0x1e8>
 8005a18:	2203      	movs	r2, #3
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	7821      	ldrb	r1, [r4, #0]
 8005a1e:	f000 fa17 	bl	8005e50 <memchr>
 8005a22:	b138      	cbz	r0, 8005a34 <_svfiprintf_r+0x150>
 8005a24:	2240      	movs	r2, #64	@ 0x40
 8005a26:	9b04      	ldr	r3, [sp, #16]
 8005a28:	eba0 000a 	sub.w	r0, r0, sl
 8005a2c:	4082      	lsls	r2, r0
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	3401      	adds	r4, #1
 8005a32:	9304      	str	r3, [sp, #16]
 8005a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a38:	2206      	movs	r2, #6
 8005a3a:	4825      	ldr	r0, [pc, #148]	@ (8005ad0 <_svfiprintf_r+0x1ec>)
 8005a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a40:	f000 fa06 	bl	8005e50 <memchr>
 8005a44:	2800      	cmp	r0, #0
 8005a46:	d036      	beq.n	8005ab6 <_svfiprintf_r+0x1d2>
 8005a48:	4b22      	ldr	r3, [pc, #136]	@ (8005ad4 <_svfiprintf_r+0x1f0>)
 8005a4a:	bb1b      	cbnz	r3, 8005a94 <_svfiprintf_r+0x1b0>
 8005a4c:	9b03      	ldr	r3, [sp, #12]
 8005a4e:	3307      	adds	r3, #7
 8005a50:	f023 0307 	bic.w	r3, r3, #7
 8005a54:	3308      	adds	r3, #8
 8005a56:	9303      	str	r3, [sp, #12]
 8005a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5a:	4433      	add	r3, r6
 8005a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5e:	e76a      	b.n	8005936 <_svfiprintf_r+0x52>
 8005a60:	460c      	mov	r4, r1
 8005a62:	2001      	movs	r0, #1
 8005a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a68:	e7a8      	b.n	80059bc <_svfiprintf_r+0xd8>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f04f 0c0a 	mov.w	ip, #10
 8005a70:	4619      	mov	r1, r3
 8005a72:	3401      	adds	r4, #1
 8005a74:	9305      	str	r3, [sp, #20]
 8005a76:	4620      	mov	r0, r4
 8005a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7c:	3a30      	subs	r2, #48	@ 0x30
 8005a7e:	2a09      	cmp	r2, #9
 8005a80:	d903      	bls.n	8005a8a <_svfiprintf_r+0x1a6>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d0c6      	beq.n	8005a14 <_svfiprintf_r+0x130>
 8005a86:	9105      	str	r1, [sp, #20]
 8005a88:	e7c4      	b.n	8005a14 <_svfiprintf_r+0x130>
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a92:	e7f0      	b.n	8005a76 <_svfiprintf_r+0x192>
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <_svfiprintf_r+0x1f4>)
 8005a9e:	a904      	add	r1, sp, #16
 8005aa0:	f3af 8000 	nop.w
 8005aa4:	1c42      	adds	r2, r0, #1
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	d1d6      	bne.n	8005a58 <_svfiprintf_r+0x174>
 8005aaa:	89ab      	ldrh	r3, [r5, #12]
 8005aac:	065b      	lsls	r3, r3, #25
 8005aae:	f53f af2d 	bmi.w	800590c <_svfiprintf_r+0x28>
 8005ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ab4:	e72c      	b.n	8005910 <_svfiprintf_r+0x2c>
 8005ab6:	ab03      	add	r3, sp, #12
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	462a      	mov	r2, r5
 8005abc:	4638      	mov	r0, r7
 8005abe:	4b06      	ldr	r3, [pc, #24]	@ (8005ad8 <_svfiprintf_r+0x1f4>)
 8005ac0:	a904      	add	r1, sp, #16
 8005ac2:	f000 f87d 	bl	8005bc0 <_printf_i>
 8005ac6:	e7ed      	b.n	8005aa4 <_svfiprintf_r+0x1c0>
 8005ac8:	08006086 	.word	0x08006086
 8005acc:	0800608c 	.word	0x0800608c
 8005ad0:	08006090 	.word	0x08006090
 8005ad4:	00000000 	.word	0x00000000
 8005ad8:	0800582d 	.word	0x0800582d

08005adc <_printf_common>:
 8005adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	4616      	mov	r6, r2
 8005ae2:	4698      	mov	r8, r3
 8005ae4:	688a      	ldr	r2, [r1, #8]
 8005ae6:	690b      	ldr	r3, [r1, #16]
 8005ae8:	4607      	mov	r7, r0
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bfb8      	it	lt
 8005aee:	4613      	movlt	r3, r2
 8005af0:	6033      	str	r3, [r6, #0]
 8005af2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005af6:	460c      	mov	r4, r1
 8005af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005afc:	b10a      	cbz	r2, 8005b02 <_printf_common+0x26>
 8005afe:	3301      	adds	r3, #1
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	0699      	lsls	r1, r3, #26
 8005b06:	bf42      	ittt	mi
 8005b08:	6833      	ldrmi	r3, [r6, #0]
 8005b0a:	3302      	addmi	r3, #2
 8005b0c:	6033      	strmi	r3, [r6, #0]
 8005b0e:	6825      	ldr	r5, [r4, #0]
 8005b10:	f015 0506 	ands.w	r5, r5, #6
 8005b14:	d106      	bne.n	8005b24 <_printf_common+0x48>
 8005b16:	f104 0a19 	add.w	sl, r4, #25
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	6832      	ldr	r2, [r6, #0]
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	42ab      	cmp	r3, r5
 8005b22:	dc2b      	bgt.n	8005b7c <_printf_common+0xa0>
 8005b24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b28:	6822      	ldr	r2, [r4, #0]
 8005b2a:	3b00      	subs	r3, #0
 8005b2c:	bf18      	it	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	0692      	lsls	r2, r2, #26
 8005b32:	d430      	bmi.n	8005b96 <_printf_common+0xba>
 8005b34:	4641      	mov	r1, r8
 8005b36:	4638      	mov	r0, r7
 8005b38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b3c:	47c8      	blx	r9
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d023      	beq.n	8005b8a <_printf_common+0xae>
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	6922      	ldr	r2, [r4, #16]
 8005b46:	f003 0306 	and.w	r3, r3, #6
 8005b4a:	2b04      	cmp	r3, #4
 8005b4c:	bf14      	ite	ne
 8005b4e:	2500      	movne	r5, #0
 8005b50:	6833      	ldreq	r3, [r6, #0]
 8005b52:	f04f 0600 	mov.w	r6, #0
 8005b56:	bf08      	it	eq
 8005b58:	68e5      	ldreq	r5, [r4, #12]
 8005b5a:	f104 041a 	add.w	r4, r4, #26
 8005b5e:	bf08      	it	eq
 8005b60:	1aed      	subeq	r5, r5, r3
 8005b62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005b66:	bf08      	it	eq
 8005b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bfc4      	itt	gt
 8005b70:	1a9b      	subgt	r3, r3, r2
 8005b72:	18ed      	addgt	r5, r5, r3
 8005b74:	42b5      	cmp	r5, r6
 8005b76:	d11a      	bne.n	8005bae <_printf_common+0xd2>
 8005b78:	2000      	movs	r0, #0
 8005b7a:	e008      	b.n	8005b8e <_printf_common+0xb2>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4652      	mov	r2, sl
 8005b80:	4641      	mov	r1, r8
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c8      	blx	r9
 8005b86:	3001      	adds	r0, #1
 8005b88:	d103      	bne.n	8005b92 <_printf_common+0xb6>
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	3501      	adds	r5, #1
 8005b94:	e7c1      	b.n	8005b1a <_printf_common+0x3e>
 8005b96:	2030      	movs	r0, #48	@ 0x30
 8005b98:	18e1      	adds	r1, r4, r3
 8005b9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ba4:	4422      	add	r2, r4
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bac:	e7c2      	b.n	8005b34 <_printf_common+0x58>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	4641      	mov	r1, r8
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	47c8      	blx	r9
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d0e6      	beq.n	8005b8a <_printf_common+0xae>
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7d9      	b.n	8005b74 <_printf_common+0x98>

08005bc0 <_printf_i>:
 8005bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	7e0f      	ldrb	r7, [r1, #24]
 8005bc6:	4691      	mov	r9, r2
 8005bc8:	2f78      	cmp	r7, #120	@ 0x78
 8005bca:	4680      	mov	r8, r0
 8005bcc:	460c      	mov	r4, r1
 8005bce:	469a      	mov	sl, r3
 8005bd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bd6:	d807      	bhi.n	8005be8 <_printf_i+0x28>
 8005bd8:	2f62      	cmp	r7, #98	@ 0x62
 8005bda:	d80a      	bhi.n	8005bf2 <_printf_i+0x32>
 8005bdc:	2f00      	cmp	r7, #0
 8005bde:	f000 80d1 	beq.w	8005d84 <_printf_i+0x1c4>
 8005be2:	2f58      	cmp	r7, #88	@ 0x58
 8005be4:	f000 80b8 	beq.w	8005d58 <_printf_i+0x198>
 8005be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bf0:	e03a      	b.n	8005c68 <_printf_i+0xa8>
 8005bf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bf6:	2b15      	cmp	r3, #21
 8005bf8:	d8f6      	bhi.n	8005be8 <_printf_i+0x28>
 8005bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8005c00 <_printf_i+0x40>)
 8005bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c00:	08005c59 	.word	0x08005c59
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005be9 	.word	0x08005be9
 8005c0c:	08005be9 	.word	0x08005be9
 8005c10:	08005be9 	.word	0x08005be9
 8005c14:	08005be9 	.word	0x08005be9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005be9 	.word	0x08005be9
 8005c20:	08005be9 	.word	0x08005be9
 8005c24:	08005be9 	.word	0x08005be9
 8005c28:	08005be9 	.word	0x08005be9
 8005c2c:	08005d6b 	.word	0x08005d6b
 8005c30:	08005c97 	.word	0x08005c97
 8005c34:	08005d25 	.word	0x08005d25
 8005c38:	08005be9 	.word	0x08005be9
 8005c3c:	08005be9 	.word	0x08005be9
 8005c40:	08005d8d 	.word	0x08005d8d
 8005c44:	08005be9 	.word	0x08005be9
 8005c48:	08005c97 	.word	0x08005c97
 8005c4c:	08005be9 	.word	0x08005be9
 8005c50:	08005be9 	.word	0x08005be9
 8005c54:	08005d2d 	.word	0x08005d2d
 8005c58:	6833      	ldr	r3, [r6, #0]
 8005c5a:	1d1a      	adds	r2, r3, #4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6032      	str	r2, [r6, #0]
 8005c60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e09c      	b.n	8005da6 <_printf_i+0x1e6>
 8005c6c:	6833      	ldr	r3, [r6, #0]
 8005c6e:	6820      	ldr	r0, [r4, #0]
 8005c70:	1d19      	adds	r1, r3, #4
 8005c72:	6031      	str	r1, [r6, #0]
 8005c74:	0606      	lsls	r6, r0, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xbc>
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	e003      	b.n	8005c84 <_printf_i+0xc4>
 8005c7c:	0645      	lsls	r5, r0, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xb8>
 8005c80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	da03      	bge.n	8005c90 <_printf_i+0xd0>
 8005c88:	232d      	movs	r3, #45	@ 0x2d
 8005c8a:	426d      	negs	r5, r5
 8005c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c90:	230a      	movs	r3, #10
 8005c92:	4858      	ldr	r0, [pc, #352]	@ (8005df4 <_printf_i+0x234>)
 8005c94:	e011      	b.n	8005cba <_printf_i+0xfa>
 8005c96:	6821      	ldr	r1, [r4, #0]
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	0608      	lsls	r0, r1, #24
 8005c9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ca0:	d402      	bmi.n	8005ca8 <_printf_i+0xe8>
 8005ca2:	0649      	lsls	r1, r1, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b2ad      	uxthmi	r5, r5
 8005ca8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005caa:	6033      	str	r3, [r6, #0]
 8005cac:	bf14      	ite	ne
 8005cae:	230a      	movne	r3, #10
 8005cb0:	2308      	moveq	r3, #8
 8005cb2:	4850      	ldr	r0, [pc, #320]	@ (8005df4 <_printf_i+0x234>)
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cba:	6866      	ldr	r6, [r4, #4]
 8005cbc:	2e00      	cmp	r6, #0
 8005cbe:	60a6      	str	r6, [r4, #8]
 8005cc0:	db05      	blt.n	8005cce <_printf_i+0x10e>
 8005cc2:	6821      	ldr	r1, [r4, #0]
 8005cc4:	432e      	orrs	r6, r5
 8005cc6:	f021 0104 	bic.w	r1, r1, #4
 8005cca:	6021      	str	r1, [r4, #0]
 8005ccc:	d04b      	beq.n	8005d66 <_printf_i+0x1a6>
 8005cce:	4616      	mov	r6, r2
 8005cd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cd4:	fb03 5711 	mls	r7, r3, r1, r5
 8005cd8:	5dc7      	ldrb	r7, [r0, r7]
 8005cda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cde:	462f      	mov	r7, r5
 8005ce0:	42bb      	cmp	r3, r7
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	d9f4      	bls.n	8005cd0 <_printf_i+0x110>
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d10b      	bne.n	8005d02 <_printf_i+0x142>
 8005cea:	6823      	ldr	r3, [r4, #0]
 8005cec:	07df      	lsls	r7, r3, #31
 8005cee:	d508      	bpl.n	8005d02 <_printf_i+0x142>
 8005cf0:	6923      	ldr	r3, [r4, #16]
 8005cf2:	6861      	ldr	r1, [r4, #4]
 8005cf4:	4299      	cmp	r1, r3
 8005cf6:	bfde      	ittt	le
 8005cf8:	2330      	movle	r3, #48	@ 0x30
 8005cfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cfe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d02:	1b92      	subs	r2, r2, r6
 8005d04:	6122      	str	r2, [r4, #16]
 8005d06:	464b      	mov	r3, r9
 8005d08:	4621      	mov	r1, r4
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	f8cd a000 	str.w	sl, [sp]
 8005d10:	aa03      	add	r2, sp, #12
 8005d12:	f7ff fee3 	bl	8005adc <_printf_common>
 8005d16:	3001      	adds	r0, #1
 8005d18:	d14a      	bne.n	8005db0 <_printf_i+0x1f0>
 8005d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d1e:	b004      	add	sp, #16
 8005d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	f043 0320 	orr.w	r3, r3, #32
 8005d2a:	6023      	str	r3, [r4, #0]
 8005d2c:	2778      	movs	r7, #120	@ 0x78
 8005d2e:	4832      	ldr	r0, [pc, #200]	@ (8005df8 <_printf_i+0x238>)
 8005d30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d34:	6823      	ldr	r3, [r4, #0]
 8005d36:	6831      	ldr	r1, [r6, #0]
 8005d38:	061f      	lsls	r7, r3, #24
 8005d3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d3e:	d402      	bmi.n	8005d46 <_printf_i+0x186>
 8005d40:	065f      	lsls	r7, r3, #25
 8005d42:	bf48      	it	mi
 8005d44:	b2ad      	uxthmi	r5, r5
 8005d46:	6031      	str	r1, [r6, #0]
 8005d48:	07d9      	lsls	r1, r3, #31
 8005d4a:	bf44      	itt	mi
 8005d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d50:	6023      	strmi	r3, [r4, #0]
 8005d52:	b11d      	cbz	r5, 8005d5c <_printf_i+0x19c>
 8005d54:	2310      	movs	r3, #16
 8005d56:	e7ad      	b.n	8005cb4 <_printf_i+0xf4>
 8005d58:	4826      	ldr	r0, [pc, #152]	@ (8005df4 <_printf_i+0x234>)
 8005d5a:	e7e9      	b.n	8005d30 <_printf_i+0x170>
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	f023 0320 	bic.w	r3, r3, #32
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	e7f6      	b.n	8005d54 <_printf_i+0x194>
 8005d66:	4616      	mov	r6, r2
 8005d68:	e7bd      	b.n	8005ce6 <_printf_i+0x126>
 8005d6a:	6833      	ldr	r3, [r6, #0]
 8005d6c:	6825      	ldr	r5, [r4, #0]
 8005d6e:	1d18      	adds	r0, r3, #4
 8005d70:	6961      	ldr	r1, [r4, #20]
 8005d72:	6030      	str	r0, [r6, #0]
 8005d74:	062e      	lsls	r6, r5, #24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	d501      	bpl.n	8005d7e <_printf_i+0x1be>
 8005d7a:	6019      	str	r1, [r3, #0]
 8005d7c:	e002      	b.n	8005d84 <_printf_i+0x1c4>
 8005d7e:	0668      	lsls	r0, r5, #25
 8005d80:	d5fb      	bpl.n	8005d7a <_printf_i+0x1ba>
 8005d82:	8019      	strh	r1, [r3, #0]
 8005d84:	2300      	movs	r3, #0
 8005d86:	4616      	mov	r6, r2
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	e7bc      	b.n	8005d06 <_printf_i+0x146>
 8005d8c:	6833      	ldr	r3, [r6, #0]
 8005d8e:	2100      	movs	r1, #0
 8005d90:	1d1a      	adds	r2, r3, #4
 8005d92:	6032      	str	r2, [r6, #0]
 8005d94:	681e      	ldr	r6, [r3, #0]
 8005d96:	6862      	ldr	r2, [r4, #4]
 8005d98:	4630      	mov	r0, r6
 8005d9a:	f000 f859 	bl	8005e50 <memchr>
 8005d9e:	b108      	cbz	r0, 8005da4 <_printf_i+0x1e4>
 8005da0:	1b80      	subs	r0, r0, r6
 8005da2:	6060      	str	r0, [r4, #4]
 8005da4:	6863      	ldr	r3, [r4, #4]
 8005da6:	6123      	str	r3, [r4, #16]
 8005da8:	2300      	movs	r3, #0
 8005daa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dae:	e7aa      	b.n	8005d06 <_printf_i+0x146>
 8005db0:	4632      	mov	r2, r6
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	47d0      	blx	sl
 8005dba:	3001      	adds	r0, #1
 8005dbc:	d0ad      	beq.n	8005d1a <_printf_i+0x15a>
 8005dbe:	6823      	ldr	r3, [r4, #0]
 8005dc0:	079b      	lsls	r3, r3, #30
 8005dc2:	d413      	bmi.n	8005dec <_printf_i+0x22c>
 8005dc4:	68e0      	ldr	r0, [r4, #12]
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	4298      	cmp	r0, r3
 8005dca:	bfb8      	it	lt
 8005dcc:	4618      	movlt	r0, r3
 8005dce:	e7a6      	b.n	8005d1e <_printf_i+0x15e>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4632      	mov	r2, r6
 8005dd4:	4649      	mov	r1, r9
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	47d0      	blx	sl
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d09d      	beq.n	8005d1a <_printf_i+0x15a>
 8005dde:	3501      	adds	r5, #1
 8005de0:	68e3      	ldr	r3, [r4, #12]
 8005de2:	9903      	ldr	r1, [sp, #12]
 8005de4:	1a5b      	subs	r3, r3, r1
 8005de6:	42ab      	cmp	r3, r5
 8005de8:	dcf2      	bgt.n	8005dd0 <_printf_i+0x210>
 8005dea:	e7eb      	b.n	8005dc4 <_printf_i+0x204>
 8005dec:	2500      	movs	r5, #0
 8005dee:	f104 0619 	add.w	r6, r4, #25
 8005df2:	e7f5      	b.n	8005de0 <_printf_i+0x220>
 8005df4:	08006097 	.word	0x08006097
 8005df8:	080060a8 	.word	0x080060a8

08005dfc <memmove>:
 8005dfc:	4288      	cmp	r0, r1
 8005dfe:	b510      	push	{r4, lr}
 8005e00:	eb01 0402 	add.w	r4, r1, r2
 8005e04:	d902      	bls.n	8005e0c <memmove+0x10>
 8005e06:	4284      	cmp	r4, r0
 8005e08:	4623      	mov	r3, r4
 8005e0a:	d807      	bhi.n	8005e1c <memmove+0x20>
 8005e0c:	1e43      	subs	r3, r0, #1
 8005e0e:	42a1      	cmp	r1, r4
 8005e10:	d008      	beq.n	8005e24 <memmove+0x28>
 8005e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e1a:	e7f8      	b.n	8005e0e <memmove+0x12>
 8005e1c:	4601      	mov	r1, r0
 8005e1e:	4402      	add	r2, r0
 8005e20:	428a      	cmp	r2, r1
 8005e22:	d100      	bne.n	8005e26 <memmove+0x2a>
 8005e24:	bd10      	pop	{r4, pc}
 8005e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e2e:	e7f7      	b.n	8005e20 <memmove+0x24>

08005e30 <_sbrk_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	2300      	movs	r3, #0
 8005e34:	4d05      	ldr	r5, [pc, #20]	@ (8005e4c <_sbrk_r+0x1c>)
 8005e36:	4604      	mov	r4, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	602b      	str	r3, [r5, #0]
 8005e3c:	f7fa fdb6 	bl	80009ac <_sbrk>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_sbrk_r+0x1a>
 8005e44:	682b      	ldr	r3, [r5, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_sbrk_r+0x1a>
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	20001be0 	.word	0x20001be0

08005e50 <memchr>:
 8005e50:	4603      	mov	r3, r0
 8005e52:	b510      	push	{r4, lr}
 8005e54:	b2c9      	uxtb	r1, r1
 8005e56:	4402      	add	r2, r0
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	d101      	bne.n	8005e62 <memchr+0x12>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e003      	b.n	8005e6a <memchr+0x1a>
 8005e62:	7804      	ldrb	r4, [r0, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	428c      	cmp	r4, r1
 8005e68:	d1f6      	bne.n	8005e58 <memchr+0x8>
 8005e6a:	bd10      	pop	{r4, pc}

08005e6c <_realloc_r>:
 8005e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e70:	4607      	mov	r7, r0
 8005e72:	4614      	mov	r4, r2
 8005e74:	460d      	mov	r5, r1
 8005e76:	b921      	cbnz	r1, 8005e82 <_realloc_r+0x16>
 8005e78:	4611      	mov	r1, r2
 8005e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e7e:	f7ff bc49 	b.w	8005714 <_malloc_r>
 8005e82:	b92a      	cbnz	r2, 8005e90 <_realloc_r+0x24>
 8005e84:	f7ff fbdc 	bl	8005640 <_free_r>
 8005e88:	4625      	mov	r5, r4
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e90:	f000 f81a 	bl	8005ec8 <_malloc_usable_size_r>
 8005e94:	4284      	cmp	r4, r0
 8005e96:	4606      	mov	r6, r0
 8005e98:	d802      	bhi.n	8005ea0 <_realloc_r+0x34>
 8005e9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e9e:	d8f4      	bhi.n	8005e8a <_realloc_r+0x1e>
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	f7ff fc36 	bl	8005714 <_malloc_r>
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	b908      	cbnz	r0, 8005eb0 <_realloc_r+0x44>
 8005eac:	4645      	mov	r5, r8
 8005eae:	e7ec      	b.n	8005e8a <_realloc_r+0x1e>
 8005eb0:	42b4      	cmp	r4, r6
 8005eb2:	4622      	mov	r2, r4
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	bf28      	it	cs
 8005eb8:	4632      	movcs	r2, r6
 8005eba:	f7ff fbb3 	bl	8005624 <memcpy>
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	f7ff fbbd 	bl	8005640 <_free_r>
 8005ec6:	e7f1      	b.n	8005eac <_realloc_r+0x40>

08005ec8 <_malloc_usable_size_r>:
 8005ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ecc:	1f18      	subs	r0, r3, #4
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bfbc      	itt	lt
 8005ed2:	580b      	ldrlt	r3, [r1, r0]
 8005ed4:	18c0      	addlt	r0, r0, r3
 8005ed6:	4770      	bx	lr

08005ed8 <_init>:
 8005ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eda:	bf00      	nop
 8005edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ede:	bc08      	pop	{r3}
 8005ee0:	469e      	mov	lr, r3
 8005ee2:	4770      	bx	lr

08005ee4 <_fini>:
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee6:	bf00      	nop
 8005ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eea:	bc08      	pop	{r3}
 8005eec:	469e      	mov	lr, r3
 8005eee:	4770      	bx	lr
