
FireAlarmSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e20  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  08005f30  08005f30  00006f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006110  08006110  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006118  08006118  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006118  08006118  00007118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800611c  0800611c  0000711c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006120  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b90  20000060  08006180  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf0  08006180  00008bf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012954  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000300a  00000000  00000000  0001a9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  0001d9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3c  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a82  00000000  00000000  0001f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012376  00000000  00000000  00023096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091b2d  00000000  00000000  0003540c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000462c  00000000  00000000  000c6f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000cb5a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f18 	.word	0x08005f18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005f18 	.word	0x08005f18

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fca2 	bl	8000aac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f850 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f950 	bl	8000410 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f8a8 	bl	80002c4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000174:	f000 f8e4 	bl	8000340 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000178:	f000 f920 	bl	80003bc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800017c:	f002 fabe 	bl	80026fc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (3, sizeof(uint16_t), &temperatureQueue_attributes);
 8000180:	4a15      	ldr	r2, [pc, #84]	@ (80001d8 <main+0x78>)
 8000182:	2102      	movs	r1, #2
 8000184:	2003      	movs	r0, #3
 8000186:	f002 fbae 	bl	80028e6 <osMessageQueueNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a13      	ldr	r2, [pc, #76]	@ (80001dc <main+0x7c>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of airQualityQueue */
  airQualityQueueHandle = osMessageQueueNew (3, sizeof(uint16_t), &airQualityQueue_attributes);
 8000190:	4a13      	ldr	r2, [pc, #76]	@ (80001e0 <main+0x80>)
 8000192:	2102      	movs	r1, #2
 8000194:	2003      	movs	r0, #3
 8000196:	f002 fba6 	bl	80028e6 <osMessageQueueNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a11      	ldr	r2, [pc, #68]	@ (80001e4 <main+0x84>)
 800019e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80001a0:	4a11      	ldr	r2, [pc, #68]	@ (80001e8 <main+0x88>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	4811      	ldr	r0, [pc, #68]	@ (80001ec <main+0x8c>)
 80001a6:	f002 faf1 	bl	800278c <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a10      	ldr	r2, [pc, #64]	@ (80001f0 <main+0x90>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001b0:	4a10      	ldr	r2, [pc, #64]	@ (80001f4 <main+0x94>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4810      	ldr	r0, [pc, #64]	@ (80001f8 <main+0x98>)
 80001b6:	f002 fae9 	bl	800278c <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a0f      	ldr	r2, [pc, #60]	@ (80001fc <main+0x9c>)
 80001be:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80001c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <main+0xa0>)
 80001c2:	2100      	movs	r1, #0
 80001c4:	480f      	ldr	r0, [pc, #60]	@ (8000204 <main+0xa4>)
 80001c6:	f002 fae1 	bl	800278c <osThreadNew>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000208 <main+0xa8>)
 80001ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001d0:	f002 fab6 	bl	8002740 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001d4:	bf00      	nop
 80001d6:	e7fd      	b.n	80001d4 <main+0x74>
 80001d8:	08006080 	.word	0x08006080
 80001dc:	20000130 	.word	0x20000130
 80001e0:	08006098 	.word	0x08006098
 80001e4:	20000134 	.word	0x20000134
 80001e8:	08006014 	.word	0x08006014
 80001ec:	080004a5 	.word	0x080004a5
 80001f0:	20000124 	.word	0x20000124
 80001f4:	08006038 	.word	0x08006038
 80001f8:	080005b5 	.word	0x080005b5
 80001fc:	20000128 	.word	0x20000128
 8000200:	0800605c 	.word	0x0800605c
 8000204:	08000611 	.word	0x08000611
 8000208:	2000012c 	.word	0x2000012c

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b094      	sub	sp, #80	@ 0x50
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000216:	2228      	movs	r2, #40	@ 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f005 f9ee 	bl	80055fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000244:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000256:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000258:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800025c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fb2c 	bl	80018c0 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800026e:	f000 fa55 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2302      	movs	r3, #2
 8000278:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000282:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000288:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2102      	movs	r1, #2
 8000290:	4618      	mov	r0, r3
 8000292:	f001 fd97 	bl	8001dc4 <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800029c:	f000 fa3e 	bl	800071c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002a0:	2302      	movs	r3, #2
 80002a2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80002a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80002a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f001 ff17 	bl	80020e0 <HAL_RCCEx_PeriphCLKConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80002b8:	f000 fa30 	bl	800071c <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3750      	adds	r7, #80	@ 0x50
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002d4:	4b18      	ldr	r3, [pc, #96]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002d6:	4a19      	ldr	r2, [pc, #100]	@ (800033c <MX_ADC1_Init+0x78>)
 80002d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002da:	4b17      	ldr	r3, [pc, #92]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e0:	4b15      	ldr	r3, [pc, #84]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ec:	4b12      	ldr	r3, [pc, #72]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002ee:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f4:	4b10      	ldr	r3, [pc, #64]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_ADC1_Init+0x74>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <MX_ADC1_Init+0x74>)
 8000302:	f000 fc35 	bl	8000b70 <HAL_ADC_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 fa06 	bl	800071c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000310:	2301      	movs	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000314:	2301      	movs	r3, #1
 8000316:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	4619      	mov	r1, r3
 8000320:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_ADC1_Init+0x74>)
 8000322:	f000 fe87 	bl	8001034 <HAL_ADC_ConfigChannel>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800032c:	f000 f9f6 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000007c 	.word	0x2000007c
 800033c:	40012400 	.word	0x40012400

08000340 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	2200      	movs	r2, #0
 800034a:	601a      	str	r2, [r3, #0]
 800034c:	605a      	str	r2, [r3, #4]
 800034e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000350:	4b18      	ldr	r3, [pc, #96]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000352:	4a19      	ldr	r2, [pc, #100]	@ (80003b8 <MX_ADC2_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000356:	4b17      	ldr	r3, [pc, #92]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000362:	4b14      	ldr	r3, [pc, #80]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800036a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800036e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000370:	4b10      	ldr	r3, [pc, #64]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000372:	2200      	movs	r2, #0
 8000374:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <MX_ADC2_Init+0x74>)
 8000378:	2201      	movs	r2, #1
 800037a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800037e:	f000 fbf7 	bl	8000b70 <HAL_ADC_Init>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000388:	f000 f9c8 	bl	800071c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800038c:	2302      	movs	r3, #2
 800038e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000390:	2301      	movs	r3, #1
 8000392:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	@ (80003b4 <MX_ADC2_Init+0x74>)
 800039e:	f000 fe49 	bl	8001034 <HAL_ADC_ConfigChannel>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80003a8:	f000 f9b8 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3710      	adds	r7, #16
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	200000ac 	.word	0x200000ac
 80003b8:	40012800 	.word	0x40012800

080003bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	@ (800040c <MX_USART1_UART_Init+0x50>)
 80003c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c6:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003e0:	4b09      	ldr	r3, [pc, #36]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e2:	220c      	movs	r2, #12
 80003e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e6:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003f2:	4805      	ldr	r0, [pc, #20]	@ (8000408 <MX_USART1_UART_Init+0x4c>)
 80003f4:	f001 ff2a 	bl	800224c <HAL_UART_Init>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fe:	f000 f98d 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	200000dc 	.word	0x200000dc
 800040c:	40013800 	.word	0x40013800

08000410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000424:	4b1d      	ldr	r3, [pc, #116]	@ (800049c <MX_GPIO_Init+0x8c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1c      	ldr	r2, [pc, #112]	@ (800049c <MX_GPIO_Init+0x8c>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b1a      	ldr	r3, [pc, #104]	@ (800049c <MX_GPIO_Init+0x8c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_GPIO_Init+0x8c>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a16      	ldr	r2, [pc, #88]	@ (800049c <MX_GPIO_Init+0x8c>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_GPIO_Init+0x8c>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	2130      	movs	r1, #48	@ 0x30
 8000458:	4811      	ldr	r0, [pc, #68]	@ (80004a0 <MX_GPIO_Init+0x90>)
 800045a:	f001 fa19 	bl	8001890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800045e:	2308      	movs	r3, #8
 8000460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000462:	2300      	movs	r3, #0
 8000464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	4619      	mov	r1, r3
 8000470:	480b      	ldr	r0, [pc, #44]	@ (80004a0 <MX_GPIO_Init+0x90>)
 8000472:	f001 f889 	bl	8001588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000476:	2330      	movs	r3, #48	@ 0x30
 8000478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2302      	movs	r3, #2
 8000484:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000486:	f107 0308 	add.w	r3, r7, #8
 800048a:	4619      	mov	r1, r3
 800048c:	4804      	ldr	r0, [pc, #16]	@ (80004a0 <MX_GPIO_Init+0x90>)
 800048e:	f001 f87b 	bl	8001588 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000492:	bf00      	nop
 8000494:	3718      	adds	r7, #24
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b092      	sub	sp, #72	@ 0x48
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_ADC_Start_IT(&hadc1);
 80004ac:	4836      	ldr	r0, [pc, #216]	@ (8000588 <StartTask01+0xe4>)
 80004ae:	f000 fc37 	bl	8000d20 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 80004b2:	4836      	ldr	r0, [pc, #216]	@ (800058c <StartTask01+0xe8>)
 80004b4:	f000 fc34 	bl	8000d20 <HAL_ADC_Start_IT>
	for (;;) {
		//HAL_UART_Transmit(&huart1, (uint8_t*) "Task 3\n", strlen("Task 3\n"), 100);
		if (isAirReady == 1) {
 80004b8:	4b35      	ldr	r3, [pc, #212]	@ (8000590 <StartTask01+0xec>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b01      	cmp	r3, #1
 80004be:	d12c      	bne.n	800051a <StartTask01+0x76>
			isAirReady = 0;
 80004c0:	4b33      	ldr	r3, [pc, #204]	@ (8000590 <StartTask01+0xec>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
			if (osMessageQueueGetCount(airQualityQueueHandle) < 2) {
 80004c6:	4b33      	ldr	r3, [pc, #204]	@ (8000594 <StartTask01+0xf0>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 fb3c 	bl	8002b48 <osMessageQueueGetCount>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d81e      	bhi.n	8000514 <StartTask01+0x70>
				osStatus_t status = osMessageQueuePut(airQualityQueueHandle,
 80004d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000594 <StartTask01+0xf0>)
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	230a      	movs	r3, #10
 80004dc:	2200      	movs	r2, #0
 80004de:	492e      	ldr	r1, [pc, #184]	@ (8000598 <StartTask01+0xf4>)
 80004e0:	f002 fa74 	bl	80029cc <osMessageQueuePut>
 80004e4:	6478      	str	r0, [r7, #68]	@ 0x44
						&airValue, 0, 10);
				if (status != osOK) {
 80004e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <StartTask01+0x70>
					// In ra lỗi nếu việc đưa vào queue thất bại
					char error_msg[50];
					sprintf(error_msg, "Queue 1 Put Error: %d\n", status);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80004f2:	492a      	ldr	r1, [pc, #168]	@ (800059c <StartTask01+0xf8>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f005 f85f 	bl	80055b8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
							strlen(error_msg), 100);
 80004fa:	f107 030c 	add.w	r3, r7, #12
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff fe26 	bl	8000150 <strlen>
 8000504:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
 8000506:	b29a      	uxth	r2, r3
 8000508:	f107 010c 	add.w	r1, r7, #12
 800050c:	2364      	movs	r3, #100	@ 0x64
 800050e:	4824      	ldr	r0, [pc, #144]	@ (80005a0 <StartTask01+0xfc>)
 8000510:	f001 feec 	bl	80022ec <HAL_UART_Transmit>
				}
			}
			HAL_ADC_Start_IT(&hadc1);
 8000514:	481c      	ldr	r0, [pc, #112]	@ (8000588 <StartTask01+0xe4>)
 8000516:	f000 fc03 	bl	8000d20 <HAL_ADC_Start_IT>
		}

		if (isTemperatureReady == 1) {
 800051a:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <StartTask01+0x100>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d12c      	bne.n	800057c <StartTask01+0xd8>
			isTemperatureReady = 0;
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <StartTask01+0x100>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
			if (osMessageQueueGetCount(temperatureQueueHandle) < 2) {
 8000528:	4b1f      	ldr	r3, [pc, #124]	@ (80005a8 <StartTask01+0x104>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fb0b 	bl	8002b48 <osMessageQueueGetCount>
 8000532:	4603      	mov	r3, r0
 8000534:	2b01      	cmp	r3, #1
 8000536:	d81e      	bhi.n	8000576 <StartTask01+0xd2>
				osStatus_t status = osMessageQueuePut(temperatureQueueHandle,
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <StartTask01+0x104>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	230a      	movs	r3, #10
 800053e:	2200      	movs	r2, #0
 8000540:	491a      	ldr	r1, [pc, #104]	@ (80005ac <StartTask01+0x108>)
 8000542:	f002 fa43 	bl	80029cc <osMessageQueuePut>
 8000546:	6438      	str	r0, [r7, #64]	@ 0x40
						&temperatureValue, 0, 10);
				if (status != osOK) {
 8000548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800054a:	2b00      	cmp	r3, #0
 800054c:	d013      	beq.n	8000576 <StartTask01+0xd2>
					// In ra lỗi nếu việc đưa vào queue thất bại
					char error_msg[50];
					sprintf(error_msg, "Queue 2 Put Error: %d\n", status);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000554:	4916      	ldr	r1, [pc, #88]	@ (80005b0 <StartTask01+0x10c>)
 8000556:	4618      	mov	r0, r3
 8000558:	f005 f82e 	bl	80055b8 <siprintf>
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
							strlen(error_msg), 100);
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fdf5 	bl	8000150 <strlen>
 8000566:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart1, (uint8_t*) error_msg,
 8000568:	b29a      	uxth	r2, r3
 800056a:	f107 010c 	add.w	r1, r7, #12
 800056e:	2364      	movs	r3, #100	@ 0x64
 8000570:	480b      	ldr	r0, [pc, #44]	@ (80005a0 <StartTask01+0xfc>)
 8000572:	f001 febb 	bl	80022ec <HAL_UART_Transmit>
				}
			}
			HAL_ADC_Start_IT(&hadc2);
 8000576:	4805      	ldr	r0, [pc, #20]	@ (800058c <StartTask01+0xe8>)
 8000578:	f000 fbd2 	bl	8000d20 <HAL_ADC_Start_IT>
		}
		osDelay(500);
 800057c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000580:	f002 f996 	bl	80028b0 <osDelay>
		if (isAirReady == 1) {
 8000584:	e798      	b.n	80004b8 <StartTask01+0x14>
 8000586:	bf00      	nop
 8000588:	2000007c 	.word	0x2000007c
 800058c:	200000ac 	.word	0x200000ac
 8000590:	20000140 	.word	0x20000140
 8000594:	20000134 	.word	0x20000134
 8000598:	20000148 	.word	0x20000148
 800059c:	08005f78 	.word	0x08005f78
 80005a0:	200000dc 	.word	0x200000dc
 80005a4:	20000144 	.word	0x20000144
 80005a8:	20000130 	.word	0x20000130
 80005ac:	2000014c 	.word	0x2000014c
 80005b0:	08005f90 	.word	0x08005f90

080005b4 <StartTask02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  // ACTIVE LOW: IN = 0 ==> The circuit is closed
	  if (threshold1 == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <StartTask02+0x50>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d105      	bne.n	80005d0 <StartTask02+0x1c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2110      	movs	r1, #16
 80005c8:	480f      	ldr	r0, [pc, #60]	@ (8000608 <StartTask02+0x54>)
 80005ca:	f001 f961 	bl	8001890 <HAL_GPIO_WritePin>
 80005ce:	e004      	b.n	80005da <StartTask02+0x26>
	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2110      	movs	r1, #16
 80005d4:	480c      	ldr	r0, [pc, #48]	@ (8000608 <StartTask02+0x54>)
 80005d6:	f001 f95b 	bl	8001890 <HAL_GPIO_WritePin>

	  if (threshold2 == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <StartTask02+0x58>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d105      	bne.n	80005ee <StartTask02+0x3a>
 80005e2:	2200      	movs	r2, #0
 80005e4:	2120      	movs	r1, #32
 80005e6:	4808      	ldr	r0, [pc, #32]	@ (8000608 <StartTask02+0x54>)
 80005e8:	f001 f952 	bl	8001890 <HAL_GPIO_WritePin>
 80005ec:	e004      	b.n	80005f8 <StartTask02+0x44>
	  else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4805      	ldr	r0, [pc, #20]	@ (8000608 <StartTask02+0x54>)
 80005f4:	f001 f94c 	bl	8001890 <HAL_GPIO_WritePin>

      osDelay(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fc:	f002 f958 	bl	80028b0 <osDelay>
	  if (threshold1 == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000600:	e7dc      	b.n	80005bc <StartTask02+0x8>
 8000602:	bf00      	nop
 8000604:	20000138 	.word	0x20000138
 8000608:	40010800 	.word	0x40010800
 800060c:	2000013c 	.word	0x2000013c

08000610 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b0a1      	sub	sp, #132	@ 0x84
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
	for (;;) {
		if (osMessageQueueGetCount(airQualityQueueHandle) > 0 && osMessageQueueGetCount(temperatureQueueHandle) > 0) {
 8000618:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <StartTask03+0xf4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fa93 	bl	8002b48 <osMessageQueueGetCount>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d068      	beq.n	80006fa <StartTask03+0xea>
 8000628:	4b37      	ldr	r3, [pc, #220]	@ (8000708 <StartTask03+0xf8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fa8b 	bl	8002b48 <osMessageQueueGetCount>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d060      	beq.n	80006fa <StartTask03+0xea>
			char buffer[100];
			uint16_t air, tem, airConvert, temConvert;
			osMessageQueueGet(airQualityQueueHandle, &air, NULL, 100);
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <StartTask03+0xf4>)
 800063a:	6818      	ldr	r0, [r3, #0]
 800063c:	f107 0172 	add.w	r1, r7, #114	@ 0x72
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2200      	movs	r2, #0
 8000644:	f002 fa22 	bl	8002a8c <osMessageQueueGet>
			osMessageQueueGet(temperatureQueueHandle, &tem, NULL, 100);
 8000648:	4b2f      	ldr	r3, [pc, #188]	@ (8000708 <StartTask03+0xf8>)
 800064a:	6818      	ldr	r0, [r3, #0]
 800064c:	f107 0170 	add.w	r1, r7, #112	@ 0x70
 8000650:	2364      	movs	r3, #100	@ 0x64
 8000652:	2200      	movs	r2, #0
 8000654:	f002 fa1a 	bl	8002a8c <osMessageQueueGet>

			// Convert to millivoltage
			//airConvert = (int) 3300 * air / 4096.f;
			airConvert = air * 3300 / 4096;
 8000658:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 800065c:	461a      	mov	r2, r3
 800065e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	2b00      	cmp	r3, #0
 8000668:	da01      	bge.n	800066e <StartTask03+0x5e>
 800066a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800066e:	131b      	asrs	r3, r3, #12
 8000670:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
			temConvert = tem * 330 / 4096;
 8000674:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8000678:	461a      	mov	r2, r3
 800067a:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	2b00      	cmp	r3, #0
 8000684:	da01      	bge.n	800068a <StartTask03+0x7a>
 8000686:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800068a:	131b      	asrs	r3, r3, #12
 800068c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74

			if (airConvert > 1000) threshold1 = 1;
 8000690:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8000694:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000698:	d903      	bls.n	80006a2 <StartTask03+0x92>
 800069a:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <StartTask03+0xfc>)
 800069c:	2201      	movs	r2, #1
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	e002      	b.n	80006a8 <StartTask03+0x98>
			else threshold1 = 0;
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <StartTask03+0xfc>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]

			if (temConvert > 70) threshold2 = 1;
 80006a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80006ac:	2b46      	cmp	r3, #70	@ 0x46
 80006ae:	d903      	bls.n	80006b8 <StartTask03+0xa8>
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <StartTask03+0x100>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	e002      	b.n	80006be <StartTask03+0xae>
			else threshold2 = 0;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <StartTask03+0x100>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]


			sprintf(buffer,
 80006be:	f8b7 1076 	ldrh.w	r1, [r7, #118]	@ 0x76
 80006c2:	f8b7 4074 	ldrh.w	r4, [r7, #116]	@ 0x74
 80006c6:	4b11      	ldr	r3, [pc, #68]	@ (800070c <StartTask03+0xfc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a11      	ldr	r2, [pc, #68]	@ (8000710 <StartTask03+0x100>)
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	f107 000c 	add.w	r0, r7, #12
 80006d2:	9201      	str	r2, [sp, #4]
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	4623      	mov	r3, r4
 80006d8:	460a      	mov	r2, r1
 80006da:	490e      	ldr	r1, [pc, #56]	@ (8000714 <StartTask03+0x104>)
 80006dc:	f004 ff6c 	bl	80055b8 <siprintf>
					"Air quality sensor: %d (mV).\nTemperature: %d (*C).\nTh1 = %d, Th2 = %d\n==========\n",
					airConvert, temConvert, threshold1, threshold2);
			HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer), 100);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd33 	bl	8000150 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f107 010c 	add.w	r1, r7, #12
 80006f2:	2364      	movs	r3, #100	@ 0x64
 80006f4:	4808      	ldr	r0, [pc, #32]	@ (8000718 <StartTask03+0x108>)
 80006f6:	f001 fdf9 	bl	80022ec <HAL_UART_Transmit>
		 // Convert to temperature: 10mV ~ 1 Cencius degree
		 //temConvert = (int) 330 * temperature / 4096.0f;
		 temConvert = temperature;
		 }
		 */
		osDelay(2000);
 80006fa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006fe:	f002 f8d7 	bl	80028b0 <osDelay>
		if (osMessageQueueGetCount(airQualityQueueHandle) > 0 && osMessageQueueGetCount(temperatureQueueHandle) > 0) {
 8000702:	e789      	b.n	8000618 <StartTask03+0x8>
 8000704:	20000134 	.word	0x20000134
 8000708:	20000130 	.word	0x20000130
 800070c:	20000138 	.word	0x20000138
 8000710:	2000013c 	.word	0x2000013c
 8000714:	08005fa8 	.word	0x08005fa8
 8000718:	200000dc 	.word	0x200000dc

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <Error_Handler+0x8>

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800072e:	4b18      	ldr	r3, [pc, #96]	@ (8000790 <HAL_MspInit+0x68>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <HAL_MspInit+0x68>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6193      	str	r3, [r2, #24]
 800073a:	4b15      	ldr	r3, [pc, #84]	@ (8000790 <HAL_MspInit+0x68>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_MspInit+0x68>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <HAL_MspInit+0x68>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x68>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	210f      	movs	r1, #15
 8000762:	f06f 0001 	mvn.w	r0, #1
 8000766:	f000 fed8 	bl	800151a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800076a:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <HAL_MspInit+0x6c>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <HAL_MspInit+0x6c>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000
 8000794:	40010000 	.word	0x40010000

08000798 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	@ 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0318 	add.w	r3, r7, #24
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a30      	ldr	r2, [pc, #192]	@ (8000874 <HAL_ADC_MspInit+0xdc>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d12a      	bne.n	800080e <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a2e      	ldr	r2, [pc, #184]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 80007be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a28      	ldr	r2, [pc, #160]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ec:	2303      	movs	r3, #3
 80007ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4821      	ldr	r0, [pc, #132]	@ (800087c <HAL_ADC_MspInit+0xe4>)
 80007f8:	f000 fec6 	bl	8001588 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2105      	movs	r1, #5
 8000800:	2012      	movs	r0, #18
 8000802:	f000 fe8a 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000806:	2012      	movs	r0, #18
 8000808:	f000 fea3 	bl	8001552 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800080c:	e02e      	b.n	800086c <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a1b      	ldr	r2, [pc, #108]	@ (8000880 <HAL_ADC_MspInit+0xe8>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d129      	bne.n	800086c <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 800081e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000822:	6193      	str	r3, [r2, #24]
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800082c:	60fb      	str	r3, [r7, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000830:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 8000836:	f043 0304 	orr.w	r3, r3, #4
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <HAL_ADC_MspInit+0xe0>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0304 	and.w	r3, r3, #4
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000848:	2304      	movs	r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084c:	2303      	movs	r3, #3
 800084e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000850:	f107 0318 	add.w	r3, r7, #24
 8000854:	4619      	mov	r1, r3
 8000856:	4809      	ldr	r0, [pc, #36]	@ (800087c <HAL_ADC_MspInit+0xe4>)
 8000858:	f000 fe96 	bl	8001588 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2105      	movs	r1, #5
 8000860:	2012      	movs	r0, #18
 8000862:	f000 fe5a 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000866:	2012      	movs	r0, #18
 8000868:	f000 fe73 	bl	8001552 <HAL_NVIC_EnableIRQ>
}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40012400 	.word	0x40012400
 8000878:	40021000 	.word	0x40021000
 800087c:	40010800 	.word	0x40010800
 8000880:	40012800 	.word	0x40012800

08000884 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <HAL_UART_MspInit+0x8c>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d131      	bne.n	8000908 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a14      	ldr	r2, [pc, #80]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008c2:	f043 0304 	orr.w	r3, r3, #4
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008de:	2303      	movs	r3, #3
 80008e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008ea:	f000 fe4d 	bl	8001588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0310 	add.w	r3, r7, #16
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <HAL_UART_MspInit+0x94>)
 8000904:	f000 fe40 	bl	8001588 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <MemManage_Handler+0x4>

08000934 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <BusFault_Handler+0x4>

0800093c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <UsageFault_Handler+0x4>

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f8f0 	bl	8000b38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000958:	f003 fe14 	bl	8004584 <xTaskGetSchedulerState>
 800095c:	4603      	mov	r3, r0
 800095e:	2b01      	cmp	r3, #1
 8000960:	d001      	beq.n	8000966 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000962:	f004 fbb9 	bl	80050d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
	...

0800096c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <ADC1_2_IRQHandler+0x14>)
 8000972:	f000 fa97 	bl	8000ea4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000976:	4803      	ldr	r0, [pc, #12]	@ (8000984 <ADC1_2_IRQHandler+0x18>)
 8000978:	f000 fa94 	bl	8000ea4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	2000007c 	.word	0x2000007c
 8000984:	200000ac 	.word	0x200000ac

08000988 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  // for each successful conversion
	if (hadc == &hadc1) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d109      	bne.n	80009ac <HAL_ADC_ConvCpltCallback+0x24>
		isAirReady = 1;
 8000998:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <HAL_ADC_ConvCpltCallback+0x4c>)
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
		airValue = HAL_ADC_GetValue(&hadc1);
 800099e:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <HAL_ADC_ConvCpltCallback+0x48>)
 80009a0:	f000 fa74 	bl	8000e8c <HAL_ADC_GetValue>
 80009a4:	4603      	mov	r3, r0
 80009a6:	461a      	mov	r2, r3
 80009a8:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <HAL_ADC_ConvCpltCallback+0x50>)
 80009aa:	601a      	str	r2, [r3, #0]
	}

	if (hadc == &hadc2) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a0b      	ldr	r2, [pc, #44]	@ (80009dc <HAL_ADC_ConvCpltCallback+0x54>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d109      	bne.n	80009c8 <HAL_ADC_ConvCpltCallback+0x40>
		isTemperatureReady = 1;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <HAL_ADC_ConvCpltCallback+0x58>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
		temperatureValue = HAL_ADC_GetValue(&hadc2);
 80009ba:	4808      	ldr	r0, [pc, #32]	@ (80009dc <HAL_ADC_ConvCpltCallback+0x54>)
 80009bc:	f000 fa66 	bl	8000e8c <HAL_ADC_GetValue>
 80009c0:	4603      	mov	r3, r0
 80009c2:	461a      	mov	r2, r3
 80009c4:	4b07      	ldr	r3, [pc, #28]	@ (80009e4 <HAL_ADC_ConvCpltCallback+0x5c>)
 80009c6:	601a      	str	r2, [r3, #0]
	}
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000007c 	.word	0x2000007c
 80009d4:	20000140 	.word	0x20000140
 80009d8:	20000148 	.word	0x20000148
 80009dc:	200000ac 	.word	0x200000ac
 80009e0:	20000144 	.word	0x20000144
 80009e4:	2000014c 	.word	0x2000014c

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f004 fdf8 	bl	800560c <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20005000 	.word	0x20005000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	20000150 	.word	0x20000150
 8000a50:	20001bf0 	.word	0x20001bf0

08000a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a60:	f7ff fff8 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	@ (8000a94 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a66:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a68:	4a0c      	ldr	r2, [pc, #48]	@ (8000a9c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a6c:	e002      	b.n	8000a74 <LoopCopyDataInit>

08000a6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a72:	3304      	adds	r3, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a78:	d3f9      	bcc.n	8000a6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7a:	4a09      	ldr	r2, [pc, #36]	@ (8000aa0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a7c:	4c09      	ldr	r4, [pc, #36]	@ (8000aa4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a80:	e001      	b.n	8000a86 <LoopFillZerobss>

08000a82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a84:	3204      	adds	r2, #4

08000a86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a88:	d3fb      	bcc.n	8000a82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8a:	f004 fdc5 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8e:	f7ff fb67 	bl	8000160 <main>
  bx lr
 8000a92:	4770      	bx	lr
  ldr r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a98:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a9c:	08006120 	.word	0x08006120
  ldr r2, =_sbss
 8000aa0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000aa4:	20001bf0 	.word	0x20001bf0

08000aa8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <CAN1_RX1_IRQHandler>
	...

08000aac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <HAL_Init+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a07      	ldr	r2, [pc, #28]	@ (8000ad4 <HAL_Init+0x28>)
 8000ab6:	f043 0310 	orr.w	r3, r3, #16
 8000aba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abc:	2003      	movs	r0, #3
 8000abe:	f000 fd21 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac2:	200f      	movs	r0, #15
 8000ac4:	f000 f808 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ac8:	f7ff fe2e 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	40022000 	.word	0x40022000

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fd39 	bl	800156e <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 fd01 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	@ (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b05      	ldr	r3, [pc, #20]	@ (8000b54 <HAL_IncTick+0x1c>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <HAL_IncTick+0x20>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000154 	.word	0x20000154

08000b5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b02      	ldr	r3, [pc, #8]	@ (8000b6c <HAL_GetTick+0x10>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000154 	.word	0x20000154

08000b70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d101      	bne.n	8000b92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e0be      	b.n	8000d10 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d109      	bne.n	8000bb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fdf2 	bl	8000798 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 fb8f 	bl	80012d8 <ADC_ConversionStop_Disable>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8099 	bne.w	8000cfe <HAL_ADC_Init+0x18e>
 8000bcc:	7dfb      	ldrb	r3, [r7, #23]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f040 8095 	bne.w	8000cfe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000bdc:	f023 0302 	bic.w	r3, r3, #2
 8000be0:	f043 0202 	orr.w	r2, r3, #2
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bf0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	7b1b      	ldrb	r3, [r3, #12]
 8000bf6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bf8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bfa:	68ba      	ldr	r2, [r7, #8]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c08:	d003      	beq.n	8000c12 <HAL_ADC_Init+0xa2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d102      	bne.n	8000c18 <HAL_ADC_Init+0xa8>
 8000c12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c16:	e000      	b.n	8000c1a <HAL_ADC_Init+0xaa>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	7d1b      	ldrb	r3, [r3, #20]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d119      	bne.n	8000c5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7b1b      	ldrb	r3, [r3, #12]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d109      	bne.n	8000c44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	035a      	lsls	r2, r3, #13
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	e00b      	b.n	8000c5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c48:	f043 0220 	orr.w	r2, r3, #32
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c54:	f043 0201 	orr.w	r2, r3, #1
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	4b28      	ldr	r3, [pc, #160]	@ (8000d18 <HAL_ADC_Init+0x1a8>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	68b9      	ldr	r1, [r7, #8]
 8000c80:	430b      	orrs	r3, r1
 8000c82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c8c:	d003      	beq.n	8000c96 <HAL_ADC_Init+0x126>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	d104      	bne.n	8000ca0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	051b      	lsls	r3, r3, #20
 8000c9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	4b18      	ldr	r3, [pc, #96]	@ (8000d1c <HAL_ADC_Init+0x1ac>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d10b      	bne.n	8000cdc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cce:	f023 0303 	bic.w	r3, r3, #3
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cda:	e018      	b.n	8000d0e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ce0:	f023 0312 	bic.w	r3, r3, #18
 8000ce4:	f043 0210 	orr.w	r2, r3, #16
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cf0:	f043 0201 	orr.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cfc:	e007      	b.n	8000d0e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d02:	f043 0210 	orr.w	r2, r3, #16
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	ffe1f7fd 	.word	0xffe1f7fd
 8000d1c:	ff1f0efe 	.word	0xff1f0efe

08000d20 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d101      	bne.n	8000d3a <HAL_ADC_Start_IT+0x1a>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e0a0      	b.n	8000e7c <HAL_ADC_Start_IT+0x15c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fa6e 	bl	8001224 <ADC_Enable>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 808f 	bne.w	8000e72 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d58:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000d5c:	f023 0301 	bic.w	r3, r3, #1
 8000d60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a45      	ldr	r2, [pc, #276]	@ (8000e84 <HAL_ADC_Start_IT+0x164>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d105      	bne.n	8000d7e <HAL_ADC_Start_IT+0x5e>
 8000d72:	4b45      	ldr	r3, [pc, #276]	@ (8000e88 <HAL_ADC_Start_IT+0x168>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d115      	bne.n	8000daa <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d82:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d026      	beq.n	8000de6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d9c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000da0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000da8:	e01d      	b.n	8000de6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a33      	ldr	r2, [pc, #204]	@ (8000e88 <HAL_ADC_Start_IT+0x168>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d004      	beq.n	8000dca <HAL_ADC_Start_IT+0xaa>
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8000e84 <HAL_ADC_Start_IT+0x164>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10d      	bne.n	8000de6 <HAL_ADC_Start_IT+0xc6>
 8000dca:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <HAL_ADC_Start_IT+0x168>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df6:	f023 0206 	bic.w	r2, r3, #6
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dfe:	e002      	b.n	8000e06 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f06f 0202 	mvn.w	r2, #2
 8000e16:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f042 0220 	orr.w	r2, r2, #32
 8000e26:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e32:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e36:	d113      	bne.n	8000e60 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e3c:	4a11      	ldr	r2, [pc, #68]	@ (8000e84 <HAL_ADC_Start_IT+0x164>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d105      	bne.n	8000e4e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HAL_ADC_Start_IT+0x168>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d108      	bne.n	8000e60 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	e00c      	b.n	8000e7a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	e003      	b.n	8000e7a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40012800 	.word	0x40012800
 8000e88:	40012400 	.word	0x40012400

08000e8c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	f003 0320 	and.w	r3, r3, #32
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d03e      	beq.n	8000f44 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d039      	beq.n	8000f44 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d105      	bne.n	8000ee8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ef2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ef6:	d11d      	bne.n	8000f34 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d119      	bne.n	8000f34 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0220 	bic.w	r2, r2, #32
 8000f0e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d105      	bne.n	8000f34 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	f043 0201 	orr.w	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff fd27 	bl	8000988 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f06f 0212 	mvn.w	r2, #18
 8000f42:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d04d      	beq.n	8000fea <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d048      	beq.n	8000fea <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f5c:	f003 0310 	and.w	r3, r3, #16
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d105      	bne.n	8000f70 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f68:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000f7a:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000f7e:	d012      	beq.n	8000fa6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d125      	bne.n	8000fda <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000f98:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000f9c:	d11d      	bne.n	8000fda <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d119      	bne.n	8000fda <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fb4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d105      	bne.n	8000fda <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd2:	f043 0201 	orr.w	r2, r3, #1
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f9bd 	bl	800135a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f06f 020c 	mvn.w	r2, #12
 8000fe8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d012      	beq.n	800101a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00d      	beq.n	800101a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001002:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f809 	bl	8001022 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f06f 0201 	mvn.w	r2, #1
 8001018:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800104c:	2b01      	cmp	r3, #1
 800104e:	d101      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x20>
 8001050:	2302      	movs	r3, #2
 8001052:	e0dc      	b.n	800120e <HAL_ADC_ConfigChannel+0x1da>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2201      	movs	r2, #1
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	2b06      	cmp	r3, #6
 8001062:	d81c      	bhi.n	800109e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	4613      	mov	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	4413      	add	r3, r2
 8001074:	3b05      	subs	r3, #5
 8001076:	221f      	movs	r2, #31
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	4019      	ands	r1, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6818      	ldr	r0, [r3, #0]
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	4613      	mov	r3, r2
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	3b05      	subs	r3, #5
 8001090:	fa00 f203 	lsl.w	r2, r0, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	430a      	orrs	r2, r1
 800109a:	635a      	str	r2, [r3, #52]	@ 0x34
 800109c:	e03c      	b.n	8001118 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b0c      	cmp	r3, #12
 80010a4:	d81c      	bhi.n	80010e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b23      	subs	r3, #35	@ 0x23
 80010b8:	221f      	movs	r2, #31
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	4019      	ands	r1, r3
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	3b23      	subs	r3, #35	@ 0x23
 80010d2:	fa00 f203 	lsl.w	r2, r0, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	430a      	orrs	r2, r1
 80010dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80010de:	e01b      	b.n	8001118 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	3b41      	subs	r3, #65	@ 0x41
 80010f2:	221f      	movs	r2, #31
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	4019      	ands	r1, r3
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	3b41      	subs	r3, #65	@ 0x41
 800110c:	fa00 f203 	lsl.w	r2, r0, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	430a      	orrs	r2, r1
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b09      	cmp	r3, #9
 800111e:	d91c      	bls.n	800115a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68d9      	ldr	r1, [r3, #12]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	3b1e      	subs	r3, #30
 8001132:	2207      	movs	r2, #7
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6898      	ldr	r0, [r3, #8]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	3b1e      	subs	r3, #30
 800114c:	fa00 f203 	lsl.w	r2, r0, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	e019      	b.n	800118e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6919      	ldr	r1, [r3, #16]
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	2207      	movs	r2, #7
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	4019      	ands	r1, r3
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	6898      	ldr	r0, [r3, #8]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4613      	mov	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	4413      	add	r3, r2
 8001182:	fa00 f203 	lsl.w	r2, r0, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2b10      	cmp	r3, #16
 8001194:	d003      	beq.n	800119e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800119a:	2b11      	cmp	r3, #17
 800119c:	d132      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <HAL_ADC_ConfigChannel+0x1e4>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d125      	bne.n	80011f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d126      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80011c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d11a      	bne.n	8001204 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ce:	4b13      	ldr	r3, [pc, #76]	@ (800121c <HAL_ADC_ConfigChannel+0x1e8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <HAL_ADC_ConfigChannel+0x1ec>)
 80011d4:	fba2 2303 	umull	r2, r3, r2, r3
 80011d8:	0c9a      	lsrs	r2, r3, #18
 80011da:	4613      	mov	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	4413      	add	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011e4:	e002      	b.n	80011ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	3b01      	subs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f9      	bne.n	80011e6 <HAL_ADC_ConfigChannel+0x1b2>
 80011f2:	e007      	b.n	8001204 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011f8:	f043 0220 	orr.w	r2, r3, #32
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800120c:	7bfb      	ldrb	r3, [r7, #15]
}
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40012400 	.word	0x40012400
 800121c:	20000000 	.word	0x20000000
 8001220:	431bde83 	.word	0x431bde83

08001224 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001230:	2300      	movs	r3, #0
 8001232:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d040      	beq.n	80012c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f042 0201 	orr.w	r2, r2, #1
 8001250:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <ADC_Enable+0xac>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <ADC_Enable+0xb0>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	0c9b      	lsrs	r3, r3, #18
 800125e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001260:	e002      	b.n	8001268 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800126e:	f7ff fc75 	bl	8000b5c <HAL_GetTick>
 8001272:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001274:	e01f      	b.n	80012b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001276:	f7ff fc71 	bl	8000b5c <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d918      	bls.n	80012b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d011      	beq.n	80012b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001296:	f043 0210 	orr.w	r2, r3, #16
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a2:	f043 0201 	orr.w	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e007      	b.n	80012c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d1d8      	bne.n	8001276 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20000000 	.word	0x20000000
 80012d4:	431bde83 	.word	0x431bde83

080012d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d12e      	bne.n	8001350 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f022 0201 	bic.w	r2, r2, #1
 8001300:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001302:	f7ff fc2b 	bl	8000b5c <HAL_GetTick>
 8001306:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001308:	e01b      	b.n	8001342 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800130a:	f7ff fc27 	bl	8000b5c <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d914      	bls.n	8001342 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10d      	bne.n	8001342 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001336:	f043 0201 	orr.w	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e007      	b.n	8001352 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d0dc      	beq.n	800130a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001388:	4013      	ands	r3, r2
 800138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139e:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <__NVIC_SetPriorityGrouping+0x44>)
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	60d3      	str	r3, [r2, #12]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b8:	4b04      	ldr	r3, [pc, #16]	@ (80013cc <__NVIC_GetPriorityGrouping+0x18>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	0a1b      	lsrs	r3, r3, #8
 80013be:	f003 0307 	and.w	r3, r3, #7
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	db0b      	blt.n	80013fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	f003 021f 	and.w	r2, r3, #31
 80013e8:	4906      	ldr	r1, [pc, #24]	@ (8001404 <__NVIC_EnableIRQ+0x34>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	2001      	movs	r0, #1
 80013f2:	fa00 f202 	lsl.w	r2, r0, r2
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff90 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff2d 	bl	800136c <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff42 	bl	80013b4 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff90 	bl	800145c <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5f 	bl	8001408 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff35 	bl	80013d0 <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa2 	bl	80014c0 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b08b      	sub	sp, #44	@ 0x2c
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001596:	2300      	movs	r3, #0
 8001598:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159a:	e169      	b.n	8001870 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800159c:	2201      	movs	r2, #1
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	f040 8158 	bne.w	800186a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4a9a      	ldr	r2, [pc, #616]	@ (8001828 <HAL_GPIO_Init+0x2a0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d05e      	beq.n	8001682 <HAL_GPIO_Init+0xfa>
 80015c4:	4a98      	ldr	r2, [pc, #608]	@ (8001828 <HAL_GPIO_Init+0x2a0>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d875      	bhi.n	80016b6 <HAL_GPIO_Init+0x12e>
 80015ca:	4a98      	ldr	r2, [pc, #608]	@ (800182c <HAL_GPIO_Init+0x2a4>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d058      	beq.n	8001682 <HAL_GPIO_Init+0xfa>
 80015d0:	4a96      	ldr	r2, [pc, #600]	@ (800182c <HAL_GPIO_Init+0x2a4>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d86f      	bhi.n	80016b6 <HAL_GPIO_Init+0x12e>
 80015d6:	4a96      	ldr	r2, [pc, #600]	@ (8001830 <HAL_GPIO_Init+0x2a8>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d052      	beq.n	8001682 <HAL_GPIO_Init+0xfa>
 80015dc:	4a94      	ldr	r2, [pc, #592]	@ (8001830 <HAL_GPIO_Init+0x2a8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d869      	bhi.n	80016b6 <HAL_GPIO_Init+0x12e>
 80015e2:	4a94      	ldr	r2, [pc, #592]	@ (8001834 <HAL_GPIO_Init+0x2ac>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d04c      	beq.n	8001682 <HAL_GPIO_Init+0xfa>
 80015e8:	4a92      	ldr	r2, [pc, #584]	@ (8001834 <HAL_GPIO_Init+0x2ac>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d863      	bhi.n	80016b6 <HAL_GPIO_Init+0x12e>
 80015ee:	4a92      	ldr	r2, [pc, #584]	@ (8001838 <HAL_GPIO_Init+0x2b0>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d046      	beq.n	8001682 <HAL_GPIO_Init+0xfa>
 80015f4:	4a90      	ldr	r2, [pc, #576]	@ (8001838 <HAL_GPIO_Init+0x2b0>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d85d      	bhi.n	80016b6 <HAL_GPIO_Init+0x12e>
 80015fa:	2b12      	cmp	r3, #18
 80015fc:	d82a      	bhi.n	8001654 <HAL_GPIO_Init+0xcc>
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d859      	bhi.n	80016b6 <HAL_GPIO_Init+0x12e>
 8001602:	a201      	add	r2, pc, #4	@ (adr r2, 8001608 <HAL_GPIO_Init+0x80>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001683 	.word	0x08001683
 800160c:	0800165d 	.word	0x0800165d
 8001610:	0800166f 	.word	0x0800166f
 8001614:	080016b1 	.word	0x080016b1
 8001618:	080016b7 	.word	0x080016b7
 800161c:	080016b7 	.word	0x080016b7
 8001620:	080016b7 	.word	0x080016b7
 8001624:	080016b7 	.word	0x080016b7
 8001628:	080016b7 	.word	0x080016b7
 800162c:	080016b7 	.word	0x080016b7
 8001630:	080016b7 	.word	0x080016b7
 8001634:	080016b7 	.word	0x080016b7
 8001638:	080016b7 	.word	0x080016b7
 800163c:	080016b7 	.word	0x080016b7
 8001640:	080016b7 	.word	0x080016b7
 8001644:	080016b7 	.word	0x080016b7
 8001648:	080016b7 	.word	0x080016b7
 800164c:	08001665 	.word	0x08001665
 8001650:	08001679 	.word	0x08001679
 8001654:	4a79      	ldr	r2, [pc, #484]	@ (800183c <HAL_GPIO_Init+0x2b4>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d013      	beq.n	8001682 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800165a:	e02c      	b.n	80016b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e029      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	3304      	adds	r3, #4
 800166a:	623b      	str	r3, [r7, #32]
          break;
 800166c:	e024      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	3308      	adds	r3, #8
 8001674:	623b      	str	r3, [r7, #32]
          break;
 8001676:	e01f      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	330c      	adds	r3, #12
 800167e:	623b      	str	r3, [r7, #32]
          break;
 8001680:	e01a      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d102      	bne.n	8001690 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800168a:	2304      	movs	r3, #4
 800168c:	623b      	str	r3, [r7, #32]
          break;
 800168e:	e013      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d105      	bne.n	80016a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001698:	2308      	movs	r3, #8
 800169a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69fa      	ldr	r2, [r7, #28]
 80016a0:	611a      	str	r2, [r3, #16]
          break;
 80016a2:	e009      	b.n	80016b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a4:	2308      	movs	r3, #8
 80016a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	615a      	str	r2, [r3, #20]
          break;
 80016ae:	e003      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
          break;
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x130>
          break;
 80016b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2bff      	cmp	r3, #255	@ 0xff
 80016bc:	d801      	bhi.n	80016c2 <HAL_GPIO_Init+0x13a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	e001      	b.n	80016c6 <HAL_GPIO_Init+0x13e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3304      	adds	r3, #4
 80016c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2bff      	cmp	r3, #255	@ 0xff
 80016cc:	d802      	bhi.n	80016d4 <HAL_GPIO_Init+0x14c>
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	e002      	b.n	80016da <HAL_GPIO_Init+0x152>
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	3b08      	subs	r3, #8
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	210f      	movs	r1, #15
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	fa01 f303 	lsl.w	r3, r1, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	6a39      	ldr	r1, [r7, #32]
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	431a      	orrs	r2, r3
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 80b1 	beq.w	800186a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001708:	4b4d      	ldr	r3, [pc, #308]	@ (8001840 <HAL_GPIO_Init+0x2b8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a4c      	ldr	r2, [pc, #304]	@ (8001840 <HAL_GPIO_Init+0x2b8>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <HAL_GPIO_Init+0x2b8>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001720:	4a48      	ldr	r2, [pc, #288]	@ (8001844 <HAL_GPIO_Init+0x2bc>)
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800172e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a40      	ldr	r2, [pc, #256]	@ (8001848 <HAL_GPIO_Init+0x2c0>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d013      	beq.n	8001774 <HAL_GPIO_Init+0x1ec>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a3f      	ldr	r2, [pc, #252]	@ (800184c <HAL_GPIO_Init+0x2c4>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00d      	beq.n	8001770 <HAL_GPIO_Init+0x1e8>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a3e      	ldr	r2, [pc, #248]	@ (8001850 <HAL_GPIO_Init+0x2c8>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d007      	beq.n	800176c <HAL_GPIO_Init+0x1e4>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a3d      	ldr	r2, [pc, #244]	@ (8001854 <HAL_GPIO_Init+0x2cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d101      	bne.n	8001768 <HAL_GPIO_Init+0x1e0>
 8001764:	2303      	movs	r3, #3
 8001766:	e006      	b.n	8001776 <HAL_GPIO_Init+0x1ee>
 8001768:	2304      	movs	r3, #4
 800176a:	e004      	b.n	8001776 <HAL_GPIO_Init+0x1ee>
 800176c:	2302      	movs	r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x1ee>
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <HAL_GPIO_Init+0x1ee>
 8001774:	2300      	movs	r3, #0
 8001776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001778:	f002 0203 	and.w	r2, r2, #3
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	4093      	lsls	r3, r2
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001786:	492f      	ldr	r1, [pc, #188]	@ (8001844 <HAL_GPIO_Init+0x2bc>)
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	3302      	adds	r3, #2
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	492c      	ldr	r1, [pc, #176]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4928      	ldr	r1, [pc, #160]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017b8:	4013      	ands	r3, r2
 80017ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	4922      	ldr	r1, [pc, #136]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	60cb      	str	r3, [r1, #12]
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d6:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	43db      	mvns	r3, r3
 80017de:	491e      	ldr	r1, [pc, #120]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d006      	beq.n	80017fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	4918      	ldr	r1, [pc, #96]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fe:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	43db      	mvns	r3, r3
 8001806:	4914      	ldr	r1, [pc, #80]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 8001808:	4013      	ands	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d021      	beq.n	800185c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001818:	4b0f      	ldr	r3, [pc, #60]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	490e      	ldr	r1, [pc, #56]	@ (8001858 <HAL_GPIO_Init+0x2d0>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
 8001824:	e021      	b.n	800186a <HAL_GPIO_Init+0x2e2>
 8001826:	bf00      	nop
 8001828:	10320000 	.word	0x10320000
 800182c:	10310000 	.word	0x10310000
 8001830:	10220000 	.word	0x10220000
 8001834:	10210000 	.word	0x10210000
 8001838:	10120000 	.word	0x10120000
 800183c:	10110000 	.word	0x10110000
 8001840:	40021000 	.word	0x40021000
 8001844:	40010000 	.word	0x40010000
 8001848:	40010800 	.word	0x40010800
 800184c:	40010c00 	.word	0x40010c00
 8001850:	40011000 	.word	0x40011000
 8001854:	40011400 	.word	0x40011400
 8001858:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800185c:	4b0b      	ldr	r3, [pc, #44]	@ (800188c <HAL_GPIO_Init+0x304>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	43db      	mvns	r3, r3
 8001864:	4909      	ldr	r1, [pc, #36]	@ (800188c <HAL_GPIO_Init+0x304>)
 8001866:	4013      	ands	r3, r2
 8001868:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800186a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186c:	3301      	adds	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae8e 	bne.w	800159c <HAL_GPIO_Init+0x14>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	372c      	adds	r7, #44	@ 0x2c
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	611a      	str	r2, [r3, #16]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e272      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8087 	beq.w	80019ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018e0:	4b92      	ldr	r3, [pc, #584]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d00c      	beq.n	8001906 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018ec:	4b8f      	ldr	r3, [pc, #572]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d112      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
 80018f8:	4b8c      	ldr	r3, [pc, #560]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b89      	ldr	r3, [pc, #548]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06c      	beq.n	80019ec <HAL_RCC_OscConfig+0x12c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d168      	bne.n	80019ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e24c      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x76>
 8001928:	4b80      	ldr	r3, [pc, #512]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e02e      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7a      	ldr	r2, [pc, #488]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b78      	ldr	r3, [pc, #480]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a77      	ldr	r2, [pc, #476]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xbc>
 8001962:	4b72      	ldr	r3, [pc, #456]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a71      	ldr	r2, [pc, #452]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a6e      	ldr	r2, [pc, #440]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 800197c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6a      	ldr	r2, [pc, #424]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b68      	ldr	r3, [pc, #416]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a67      	ldr	r2, [pc, #412]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001992:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff f8de 	bl	8000b5c <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f8da 	bl	8000b5c <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e200      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe4>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c4:	f7ff f8ca 	bl	8000b5c <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f8c6 	bl	8000b5c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	@ 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e1ec      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b53      	ldr	r3, [pc, #332]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x10c>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019fa:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00b      	beq.n	8001a1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a06:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d11c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x18c>
 8001a12:	4b46      	ldr	r3, [pc, #280]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d116      	bne.n	8001a4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	4b43      	ldr	r3, [pc, #268]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x176>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d001      	beq.n	8001a36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e1c0      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a36:	4b3d      	ldr	r3, [pc, #244]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	4939      	ldr	r1, [pc, #228]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4a:	e03a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a54:	4b36      	ldr	r3, [pc, #216]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a56:	2201      	movs	r2, #1
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f87f 	bl	8000b5c <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff f87b 	bl	8000b5c <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e1a1      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	4b2d      	ldr	r3, [pc, #180]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b2a      	ldr	r3, [pc, #168]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4927      	ldr	r1, [pc, #156]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	600b      	str	r3, [r1, #0]
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a96:	4b26      	ldr	r3, [pc, #152]	@ (8001b30 <HAL_RCC_OscConfig+0x270>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f85e 	bl	8000b5c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f85a 	bl	8000b5c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e180      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d03a      	beq.n	8001b44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d019      	beq.n	8001b0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff f83e 	bl	8000b5c <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f83a 	bl	8000b5c <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e160      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f000 face 	bl	80020a4 <RCC_Delay>
 8001b08:	e01c      	b.n	8001b44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b34 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b10:	f7ff f824 	bl	8000b5c <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b18:	f7ff f820 	bl	8000b5c <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d908      	bls.n	8001b38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e146      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	42420000 	.word	0x42420000
 8001b34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b38:	4b92      	ldr	r3, [pc, #584]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1e9      	bne.n	8001b18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80a6 	beq.w	8001c9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b52:	2300      	movs	r3, #0
 8001b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b56:	4b8b      	ldr	r3, [pc, #556]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10d      	bne.n	8001b7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a87      	ldr	r2, [pc, #540]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b85      	ldr	r3, [pc, #532]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7e:	4b82      	ldr	r3, [pc, #520]	@ (8001d88 <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d118      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <HAL_RCC_OscConfig+0x4c8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d88 <HAL_RCC_OscConfig+0x4c8>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b96:	f7fe ffe1 	bl	8000b5c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b9e:	f7fe ffdd 	bl	8000b5c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	@ 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e103      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	4b75      	ldr	r3, [pc, #468]	@ (8001d88 <HAL_RCC_OscConfig+0x4c8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d106      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x312>
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	6213      	str	r3, [r2, #32]
 8001bd0:	e02d      	b.n	8001c2e <HAL_RCC_OscConfig+0x36e>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x334>
 8001bda:	4b6a      	ldr	r3, [pc, #424]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a69      	ldr	r2, [pc, #420]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b67      	ldr	r3, [pc, #412]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a66      	ldr	r2, [pc, #408]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	e01c      	b.n	8001c2e <HAL_RCC_OscConfig+0x36e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d10c      	bne.n	8001c16 <HAL_RCC_OscConfig+0x356>
 8001bfc:	4b61      	ldr	r3, [pc, #388]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a60      	ldr	r2, [pc, #384]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	4b5e      	ldr	r3, [pc, #376]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c0a:	6a1b      	ldr	r3, [r3, #32]
 8001c0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	6213      	str	r3, [r2, #32]
 8001c14:	e00b      	b.n	8001c2e <HAL_RCC_OscConfig+0x36e>
 8001c16:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6213      	str	r3, [r2, #32]
 8001c22:	4b58      	ldr	r3, [pc, #352]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	4a57      	ldr	r2, [pc, #348]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f023 0304 	bic.w	r3, r3, #4
 8001c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d015      	beq.n	8001c62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c36:	f7fe ff91 	bl	8000b5c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7fe ff8d 	bl	8000b5c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0b1      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	4b4b      	ldr	r3, [pc, #300]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0ee      	beq.n	8001c3e <HAL_RCC_OscConfig+0x37e>
 8001c60:	e014      	b.n	8001c8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c62:	f7fe ff7b 	bl	8000b5c <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7fe ff77 	bl	8000b5c <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e09b      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c80:	4b40      	ldr	r3, [pc, #256]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ee      	bne.n	8001c6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d105      	bne.n	8001c9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b3c      	ldr	r3, [pc, #240]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a3b      	ldr	r2, [pc, #236]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8087 	beq.w	8001db6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca8:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d061      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d146      	bne.n	8001d4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbc:	4b33      	ldr	r3, [pc, #204]	@ (8001d8c <HAL_RCC_OscConfig+0x4cc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc2:	f7fe ff4b 	bl	8000b5c <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cca:	f7fe ff47 	bl	8000b5c <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e06d      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cdc:	4b29      	ldr	r3, [pc, #164]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cf0:	d108      	bne.n	8001d04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf2:	4b24      	ldr	r3, [pc, #144]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	4921      	ldr	r1, [pc, #132]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d04:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a19      	ldr	r1, [r3, #32]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	430b      	orrs	r3, r1
 8001d16:	491b      	ldr	r1, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <HAL_RCC_OscConfig+0x4cc>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d22:	f7fe ff1b 	bl	8000b5c <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7fe ff17 	bl	8000b5c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e03d      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3c:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d0f0      	beq.n	8001d2a <HAL_RCC_OscConfig+0x46a>
 8001d48:	e035      	b.n	8001db6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4a:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <HAL_RCC_OscConfig+0x4cc>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe ff04 	bl	8000b5c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7fe ff00 	bl	8000b5c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e026      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x498>
 8001d76:	e01e      	b.n	8001db6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d107      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e019      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <HAL_RCC_OscConfig+0x500>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b084      	sub	sp, #16
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0d0      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b6a      	ldr	r3, [pc, #424]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d910      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b67      	ldr	r3, [pc, #412]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4965      	ldr	r1, [pc, #404]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b63      	ldr	r3, [pc, #396]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e0b8      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e20:	4b59      	ldr	r3, [pc, #356]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a58      	ldr	r2, [pc, #352]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e38:	4b53      	ldr	r3, [pc, #332]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e44:	4b50      	ldr	r3, [pc, #320]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	494d      	ldr	r1, [pc, #308]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d040      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d107      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e6a:	4b47      	ldr	r3, [pc, #284]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d115      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e07f      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d107      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e82:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e073      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e92:	4b3d      	ldr	r3, [pc, #244]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06b      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea2:	4b39      	ldr	r3, [pc, #228]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f023 0203 	bic.w	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4936      	ldr	r1, [pc, #216]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eb4:	f7fe fe52 	bl	8000b5c <HAL_GetTick>
 8001eb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ebc:	f7fe fe4e 	bl	8000b5c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e053      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 020c 	and.w	r2, r3, #12
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d1eb      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b27      	ldr	r3, [pc, #156]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d210      	bcs.n	8001f14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b24      	ldr	r3, [pc, #144]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f023 0207 	bic.w	r2, r3, #7
 8001efa:	4922      	ldr	r1, [pc, #136]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f02:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <HAL_RCC_ClockConfig+0x1c0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d001      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e032      	b.n	8001f7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d008      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f20:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4916      	ldr	r1, [pc, #88]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f3e:	4b12      	ldr	r3, [pc, #72]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	490e      	ldr	r1, [pc, #56]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f52:	f000 f821 	bl	8001f98 <HAL_RCC_GetSysClockFreq>
 8001f56:	4602      	mov	r2, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	490a      	ldr	r1, [pc, #40]	@ (8001f8c <HAL_RCC_ClockConfig+0x1c8>)
 8001f64:	5ccb      	ldrb	r3, [r1, r3]
 8001f66:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6a:	4a09      	ldr	r2, [pc, #36]	@ (8001f90 <HAL_RCC_ClockConfig+0x1cc>)
 8001f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f6e:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_RCC_ClockConfig+0x1d0>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fdb0 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	080060b0 	.word	0x080060b0
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000004 	.word	0x20000004

08001f98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800202c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d002      	beq.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x36>
 8001fc6:	e027      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fca:	613b      	str	r3, [r7, #16]
      break;
 8001fcc:	e027      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	0c9b      	lsrs	r3, r3, #18
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fd8:	5cd3      	ldrb	r3, [r2, r3]
 8001fda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d010      	beq.n	8002008 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <HAL_RCC_GetSysClockFreq+0x94>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0c5b      	lsrs	r3, r3, #17
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	4a11      	ldr	r2, [pc, #68]	@ (8002038 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ffa:	fb03 f202 	mul.w	r2, r3, r2
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	fbb2 f3f3 	udiv	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e004      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a0c      	ldr	r2, [pc, #48]	@ (800203c <HAL_RCC_GetSysClockFreq+0xa4>)
 800200c:	fb02 f303 	mul.w	r3, r2, r3
 8002010:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	613b      	str	r3, [r7, #16]
      break;
 8002016:	e002      	b.n	800201e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_RCC_GetSysClockFreq+0x98>)
 800201a:	613b      	str	r3, [r7, #16]
      break;
 800201c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800201e:	693b      	ldr	r3, [r7, #16]
}
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000
 8002030:	007a1200 	.word	0x007a1200
 8002034:	080060c8 	.word	0x080060c8
 8002038:	080060d8 	.word	0x080060d8
 800203c:	003d0900 	.word	0x003d0900

08002040 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002044:	4b02      	ldr	r3, [pc, #8]	@ (8002050 <HAL_RCC_GetHCLKFreq+0x10>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000000 	.word	0x20000000

08002054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002058:	f7ff fff2 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	@ (8002078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	080060c0 	.word	0x080060c0

0800207c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002080:	f7ff ffde 	bl	8002040 <HAL_RCC_GetHCLKFreq>
 8002084:	4602      	mov	r2, r0
 8002086:	4b05      	ldr	r3, [pc, #20]	@ (800209c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	0adb      	lsrs	r3, r3, #11
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	4903      	ldr	r1, [pc, #12]	@ (80020a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002092:	5ccb      	ldrb	r3, [r1, r3]
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	080060c0 	.word	0x080060c0

080020a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020ac:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <RCC_Delay+0x34>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <RCC_Delay+0x38>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0a5b      	lsrs	r3, r3, #9
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020c0:	bf00      	nop
  }
  while (Delay --);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1e5a      	subs	r2, r3, #1
 80020c6:	60fa      	str	r2, [r7, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f9      	bne.n	80020c0 <RCC_Delay+0x1c>
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	20000000 	.word	0x20000000
 80020dc:	10624dd3 	.word	0x10624dd3

080020e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d07d      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80020fc:	2300      	movs	r3, #0
 80020fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b4f      	ldr	r3, [pc, #316]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210c:	4b4c      	ldr	r3, [pc, #304]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a4b      	ldr	r2, [pc, #300]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002112:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002116:	61d3      	str	r3, [r2, #28]
 8002118:	4b49      	ldr	r3, [pc, #292]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002120:	60bb      	str	r3, [r7, #8]
 8002122:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002124:	2301      	movs	r3, #1
 8002126:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d118      	bne.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002134:	4b43      	ldr	r3, [pc, #268]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a42      	ldr	r2, [pc, #264]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002140:	f7fe fd0c 	bl	8000b5c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002146:	e008      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002148:	f7fe fd08 	bl	8000b5c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b64      	cmp	r3, #100	@ 0x64
 8002154:	d901      	bls.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e06d      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b3a      	ldr	r3, [pc, #232]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f0      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002166:	4b36      	ldr	r3, [pc, #216]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800216e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d02e      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	429a      	cmp	r2, r3
 8002182:	d027      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002184:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800218c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002194:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800219a:	4a29      	ldr	r2, [pc, #164]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d014      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021aa:	f7fe fcd7 	bl	8000b5c <HAL_GetTick>
 80021ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b0:	e00a      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b2:	f7fe fcd3 	bl	8000b5c <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e036      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0ee      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	4917      	ldr	r1, [pc, #92]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021e6:	7dfb      	ldrb	r3, [r7, #23]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b14      	ldr	r3, [pc, #80]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002204:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	490b      	ldr	r1, [pc, #44]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d008      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002222:	4b07      	ldr	r3, [pc, #28]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	4904      	ldr	r1, [pc, #16]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	40021000 	.word	0x40021000
 8002244:	40007000 	.word	0x40007000
 8002248:	42420440 	.word	0x42420440

0800224c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e042      	b.n	80022e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fb06 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	@ 0x24
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800228e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f971 	bl	8002578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	603b      	str	r3, [r7, #0]
 80022f8:	4613      	mov	r3, r2
 80022fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	d175      	bne.n	80023f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_UART_Transmit+0x2c>
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e06e      	b.n	80023fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2221      	movs	r2, #33	@ 0x21
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800232a:	f7fe fc17 	bl	8000b5c <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002344:	d108      	bne.n	8002358 <HAL_UART_Transmit+0x6c>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d104      	bne.n	8002358 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	e003      	b.n	8002360 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002360:	e02e      	b.n	80023c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2200      	movs	r2, #0
 800236a:	2180      	movs	r1, #128	@ 0x80
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 f848 	bl	8002402 <UART_WaitOnFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e03a      	b.n	80023fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002398:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	3302      	adds	r3, #2
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	e007      	b.n	80023b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	3301      	adds	r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1cb      	bne.n	8002362 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2140      	movs	r1, #64	@ 0x40
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f814 	bl	8002402 <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e006      	b.n	80023fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	e000      	b.n	80023fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023f8:	2302      	movs	r3, #2
  }
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002412:	e03b      	b.n	800248c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241a:	d037      	beq.n	800248c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241c:	f7fe fb9e 	bl	8000b5c <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	6a3a      	ldr	r2, [r7, #32]
 8002428:	429a      	cmp	r2, r3
 800242a:	d302      	bcc.n	8002432 <UART_WaitOnFlagUntilTimeout+0x30>
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e03a      	b.n	80024ac <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d023      	beq.n	800248c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b80      	cmp	r3, #128	@ 0x80
 8002448:	d020      	beq.n	800248c <UART_WaitOnFlagUntilTimeout+0x8a>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b40      	cmp	r3, #64	@ 0x40
 800244e:	d01d      	beq.n	800248c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b08      	cmp	r3, #8
 800245c:	d116      	bne.n	800248c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f81d 	bl	80024b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2208      	movs	r2, #8
 800247e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e00f      	b.n	80024ac <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	4013      	ands	r3, r2
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	429a      	cmp	r2, r3
 800249a:	bf0c      	ite	eq
 800249c:	2301      	moveq	r3, #1
 800249e:	2300      	movne	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d0b4      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b095      	sub	sp, #84	@ 0x54
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	330c      	adds	r3, #12
 80024c2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024c6:	e853 3f00 	ldrex	r3, [r3]
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	330c      	adds	r3, #12
 80024da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80024de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024e4:	e841 2300 	strex	r3, r2, [r1]
 80024e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1e5      	bne.n	80024bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3314      	adds	r3, #20
 80024f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024f8:	6a3b      	ldr	r3, [r7, #32]
 80024fa:	e853 3f00 	ldrex	r3, [r3]
 80024fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3314      	adds	r3, #20
 800250e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002518:	e841 2300 	strex	r3, r2, [r1]
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800251e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e5      	bne.n	80024f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	2b01      	cmp	r3, #1
 800252a:	d119      	bne.n	8002560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	330c      	adds	r3, #12
 8002532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	e853 3f00 	ldrex	r3, [r3]
 800253a:	60bb      	str	r3, [r7, #8]
   return(result);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f023 0310 	bic.w	r3, r3, #16
 8002542:	647b      	str	r3, [r7, #68]	@ 0x44
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800254c:	61ba      	str	r2, [r7, #24]
 800254e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002550:	6979      	ldr	r1, [r7, #20]
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	e841 2300 	strex	r3, r2, [r1]
 8002558:	613b      	str	r3, [r7, #16]
   return(result);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e5      	bne.n	800252c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800256e:	bf00      	nop
 8002570:	3754      	adds	r7, #84	@ 0x54
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80025b2:	f023 030c 	bic.w	r3, r3, #12
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	68b9      	ldr	r1, [r7, #8]
 80025bc:	430b      	orrs	r3, r1
 80025be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699a      	ldr	r2, [r3, #24]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2c      	ldr	r2, [pc, #176]	@ (800268c <UART_SetConfig+0x114>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d103      	bne.n	80025e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025e0:	f7ff fd4c 	bl	800207c <HAL_RCC_GetPCLK2Freq>
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	e002      	b.n	80025ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025e8:	f7ff fd34 	bl	8002054 <HAL_RCC_GetPCLK1Freq>
 80025ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	009a      	lsls	r2, r3, #2
 80025f8:	441a      	add	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <UART_SetConfig+0x118>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	0119      	lsls	r1, r3, #4
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009a      	lsls	r2, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fbb2 f2f3 	udiv	r2, r2, r3
 8002624:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <UART_SetConfig+0x118>)
 8002626:	fba3 0302 	umull	r0, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2064      	movs	r0, #100	@ 0x64
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	3332      	adds	r3, #50	@ 0x32
 8002638:	4a15      	ldr	r2, [pc, #84]	@ (8002690 <UART_SetConfig+0x118>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002644:	4419      	add	r1, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009a      	lsls	r2, r3, #2
 8002650:	441a      	add	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	fbb2 f2f3 	udiv	r2, r2, r3
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <UART_SetConfig+0x118>)
 800265e:	fba3 0302 	umull	r0, r3, r3, r2
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2064      	movs	r0, #100	@ 0x64
 8002666:	fb00 f303 	mul.w	r3, r0, r3
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	3332      	adds	r3, #50	@ 0x32
 8002670:	4a07      	ldr	r2, [pc, #28]	@ (8002690 <UART_SetConfig+0x118>)
 8002672:	fba2 2303 	umull	r2, r3, r2, r3
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	f003 020f 	and.w	r2, r3, #15
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	440a      	add	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40013800 	.word	0x40013800
 8002690:	51eb851f 	.word	0x51eb851f

08002694 <__NVIC_SetPriority>:
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	6039      	str	r1, [r7, #0]
 800269e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	db0a      	blt.n	80026be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	490c      	ldr	r1, [pc, #48]	@ (80026e0 <__NVIC_SetPriority+0x4c>)
 80026ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b2:	0112      	lsls	r2, r2, #4
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	440b      	add	r3, r1
 80026b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026bc:	e00a      	b.n	80026d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4908      	ldr	r1, [pc, #32]	@ (80026e4 <__NVIC_SetPriority+0x50>)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3b04      	subs	r3, #4
 80026cc:	0112      	lsls	r2, r2, #4
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	761a      	strb	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc80      	pop	{r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026ec:	2100      	movs	r1, #0
 80026ee:	f06f 0004 	mvn.w	r0, #4
 80026f2:	f7ff ffcf 	bl	8002694 <__NVIC_SetPriority>
#endif
}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002702:	f3ef 8305 	mrs	r3, IPSR
 8002706:	603b      	str	r3, [r7, #0]
  return(result);
 8002708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800270e:	f06f 0305 	mvn.w	r3, #5
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	e00c      	b.n	8002730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <osKernelInitialize+0x40>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <osKernelInitialize+0x40>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	e002      	b.n	8002730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	20000158 	.word	0x20000158

08002740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002746:	f3ef 8305 	mrs	r3, IPSR
 800274a:	603b      	str	r3, [r7, #0]
  return(result);
 800274c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002752:	f06f 0305 	mvn.w	r3, #5
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	e010      	b.n	800277c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800275a:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <osKernelStart+0x48>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d109      	bne.n	8002776 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002762:	f7ff ffc1 	bl	80026e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002766:	4b08      	ldr	r3, [pc, #32]	@ (8002788 <osKernelStart+0x48>)
 8002768:	2202      	movs	r2, #2
 800276a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800276c:	f001 fabe 	bl	8003cec <vTaskStartScheduler>
      stat = osOK;
 8002770:	2300      	movs	r3, #0
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	e002      	b.n	800277c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800277c:	687b      	ldr	r3, [r7, #4]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000158 	.word	0x20000158

0800278c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b08e      	sub	sp, #56	@ 0x38
 8002790:	af04      	add	r7, sp, #16
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800279c:	f3ef 8305 	mrs	r3, IPSR
 80027a0:	617b      	str	r3, [r7, #20]
  return(result);
 80027a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d17e      	bne.n	80028a6 <osThreadNew+0x11a>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d07b      	beq.n	80028a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027b2:	2318      	movs	r3, #24
 80027b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d045      	beq.n	8002852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <osThreadNew+0x48>
        name = attr->name;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d002      	beq.n	80027e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d008      	beq.n	80027fa <osThreadNew+0x6e>
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b38      	cmp	r3, #56	@ 0x38
 80027ec:	d805      	bhi.n	80027fa <osThreadNew+0x6e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <osThreadNew+0x72>
        return (NULL);
 80027fa:	2300      	movs	r3, #0
 80027fc:	e054      	b.n	80028a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00e      	beq.n	8002834 <osThreadNew+0xa8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b5b      	cmp	r3, #91	@ 0x5b
 800281c:	d90a      	bls.n	8002834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002822:	2b00      	cmp	r3, #0
 8002824:	d006      	beq.n	8002834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <osThreadNew+0xa8>
        mem = 1;
 800282e:	2301      	movs	r3, #1
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e010      	b.n	8002856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10c      	bne.n	8002856 <osThreadNew+0xca>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d108      	bne.n	8002856 <osThreadNew+0xca>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d104      	bne.n	8002856 <osThreadNew+0xca>
          mem = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61bb      	str	r3, [r7, #24]
 8002850:	e001      	b.n	8002856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d110      	bne.n	800287e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002864:	9202      	str	r2, [sp, #8]
 8002866:	9301      	str	r3, [sp, #4]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	6a3a      	ldr	r2, [r7, #32]
 8002870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f001 f85e 	bl	8003934 <xTaskCreateStatic>
 8002878:	4603      	mov	r3, r0
 800287a:	613b      	str	r3, [r7, #16]
 800287c:	e013      	b.n	80028a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d110      	bne.n	80028a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002884:	6a3b      	ldr	r3, [r7, #32]
 8002886:	b29a      	uxth	r2, r3
 8002888:	f107 0310 	add.w	r3, r7, #16
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f001 f8ac 	bl	80039f4 <xTaskCreate>
 800289c:	4603      	mov	r3, r0
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d001      	beq.n	80028a6 <osThreadNew+0x11a>
            hTask = NULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028a6:	693b      	ldr	r3, [r7, #16]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3728      	adds	r7, #40	@ 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028b8:	f3ef 8305 	mrs	r3, IPSR
 80028bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80028be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <osDelay+0x1c>
    stat = osErrorISR;
 80028c4:	f06f 0305 	mvn.w	r3, #5
 80028c8:	60fb      	str	r3, [r7, #12]
 80028ca:	e007      	b.n	80028dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f001 f9d2 	bl	8003c80 <vTaskDelay>
    }
  }

  return (stat);
 80028dc:	68fb      	ldr	r3, [r7, #12]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b08a      	sub	sp, #40	@ 0x28
 80028ea:	af02      	add	r7, sp, #8
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80028f2:	2300      	movs	r3, #0
 80028f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028f6:	f3ef 8305 	mrs	r3, IPSR
 80028fa:	613b      	str	r3, [r7, #16]
  return(result);
 80028fc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d15f      	bne.n	80029c2 <osMessageQueueNew+0xdc>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05c      	beq.n	80029c2 <osMessageQueueNew+0xdc>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d059      	beq.n	80029c2 <osMessageQueueNew+0xdc>
    mem = -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
 8002912:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d029      	beq.n	800296e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <osMessageQueueNew+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	2b4f      	cmp	r3, #79	@ 0x4f
 8002928:	d90e      	bls.n	8002948 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	429a      	cmp	r2, r3
 8002940:	d302      	bcc.n	8002948 <osMessageQueueNew+0x62>
        mem = 1;
 8002942:	2301      	movs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	e014      	b.n	8002972 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d110      	bne.n	8002972 <osMessageQueueNew+0x8c>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10c      	bne.n	8002972 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800295c:	2b00      	cmp	r3, #0
 800295e:	d108      	bne.n	8002972 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d104      	bne.n	8002972 <osMessageQueueNew+0x8c>
          mem = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e001      	b.n	8002972 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d10b      	bne.n	8002990 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	2100      	movs	r1, #0
 8002982:	9100      	str	r1, [sp, #0]
 8002984:	68b9      	ldr	r1, [r7, #8]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa4a 	bl	8002e20 <xQueueGenericCreateStatic>
 800298c:	61f8      	str	r0, [r7, #28]
 800298e:	e008      	b.n	80029a2 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002996:	2200      	movs	r2, #0
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fabd 	bl	8002f1a <xQueueGenericCreate>
 80029a0:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00c      	beq.n	80029c2 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <osMessageQueueNew+0xd0>
        name = attr->name;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e001      	b.n	80029ba <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80029ba:	6979      	ldr	r1, [r7, #20]
 80029bc:	69f8      	ldr	r0, [r7, #28]
 80029be:	f000 ff5d 	bl	800387c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80029c2:	69fb      	ldr	r3, [r7, #28]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b088      	sub	sp, #32
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e4:	f3ef 8305 	mrs	r3, IPSR
 80029e8:	617b      	str	r3, [r7, #20]
  return(result);
 80029ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d028      	beq.n	8002a42 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d005      	beq.n	8002a02 <osMessageQueuePut+0x36>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <osMessageQueuePut+0x36>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002a02:	f06f 0303 	mvn.w	r3, #3
 8002a06:	61fb      	str	r3, [r7, #28]
 8002a08:	e038      	b.n	8002a7c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002a0e:	f107 0210 	add.w	r2, r7, #16
 8002a12:	2300      	movs	r3, #0
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	69b8      	ldr	r0, [r7, #24]
 8002a18:	f000 fbe0 	bl	80031dc <xQueueGenericSendFromISR>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d003      	beq.n	8002a2a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002a22:	f06f 0302 	mvn.w	r3, #2
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	e028      	b.n	8002a7c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d025      	beq.n	8002a7c <osMessageQueuePut+0xb0>
 8002a30:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <osMessageQueuePut+0xbc>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	e01c      	b.n	8002a7c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <osMessageQueuePut+0x82>
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002a4e:	f06f 0303 	mvn.w	r3, #3
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e012      	b.n	8002a7c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002a56:	2300      	movs	r3, #0
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	68b9      	ldr	r1, [r7, #8]
 8002a5c:	69b8      	ldr	r0, [r7, #24]
 8002a5e:	f000 fabb 	bl	8002fd8 <xQueueGenericSend>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d009      	beq.n	8002a7c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002a6e:	f06f 0301 	mvn.w	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	e002      	b.n	8002a7c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002a76:	f06f 0302 	mvn.w	r3, #2
 8002a7a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002a7c:	69fb      	ldr	r3, [r7, #28]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3720      	adds	r7, #32
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	e000ed04 	.word	0xe000ed04

08002a8c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa2:	f3ef 8305 	mrs	r3, IPSR
 8002aa6:	617b      	str	r3, [r7, #20]
  return(result);
 8002aa8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d028      	beq.n	8002b00 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <osMessageQueueGet+0x34>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <osMessageQueueGet+0x34>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002ac0:	f06f 0303 	mvn.w	r3, #3
 8002ac4:	61fb      	str	r3, [r7, #28]
 8002ac6:	e037      	b.n	8002b38 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68b9      	ldr	r1, [r7, #8]
 8002ad4:	69b8      	ldr	r0, [r7, #24]
 8002ad6:	f000 fd01 	bl	80034dc <xQueueReceiveFromISR>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d003      	beq.n	8002ae8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002ae0:	f06f 0302 	mvn.w	r3, #2
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	e027      	b.n	8002b38 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d024      	beq.n	8002b38 <osMessageQueueGet+0xac>
 8002aee:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <osMessageQueueGet+0xb8>)
 8002af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	f3bf 8f4f 	dsb	sy
 8002afa:	f3bf 8f6f 	isb	sy
 8002afe:	e01b      	b.n	8002b38 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <osMessageQueueGet+0x80>
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d103      	bne.n	8002b14 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002b0c:	f06f 0303 	mvn.w	r3, #3
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e011      	b.n	8002b38 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002b14:	683a      	ldr	r2, [r7, #0]
 8002b16:	68b9      	ldr	r1, [r7, #8]
 8002b18:	69b8      	ldr	r0, [r7, #24]
 8002b1a:	f000 fbfd 	bl	8003318 <xQueueReceive>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d009      	beq.n	8002b38 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002b2a:	f06f 0301 	mvn.w	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	e002      	b.n	8002b38 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002b32:	f06f 0302 	mvn.w	r3, #2
 8002b36:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002b38:	69fb      	ldr	r3, [r7, #28]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	e000ed04 	.word	0xe000ed04

08002b48 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d102      	bne.n	8002b60 <osMessageQueueGetCount+0x18>
    count = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	e00e      	b.n	8002b7e <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b60:	f3ef 8305 	mrs	r3, IPSR
 8002b64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d004      	beq.n	8002b76 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002b6c:	6938      	ldr	r0, [r7, #16]
 8002b6e:	f000 fd56 	bl	800361e <uxQueueMessagesWaitingFromISR>
 8002b72:	6178      	str	r0, [r7, #20]
 8002b74:	e003      	b.n	8002b7e <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002b76:	6938      	ldr	r0, [r7, #16]
 8002b78:	f000 fd32 	bl	80035e0 <uxQueueMessagesWaiting>
 8002b7c:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8002b7e:	697b      	ldr	r3, [r7, #20]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <vApplicationGetIdleTaskMemory+0x28>)
 8002b98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2280      	movs	r2, #128	@ 0x80
 8002ba4:	601a      	str	r2, [r3, #0]
}
 8002ba6:	bf00      	nop
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr
 8002bb0:	2000015c 	.word	0x2000015c
 8002bb4:	200001b8 	.word	0x200001b8

08002bb8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002bc8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4a06      	ldr	r2, [pc, #24]	@ (8002be8 <vApplicationGetTimerTaskMemory+0x30>)
 8002bce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	200003b8 	.word	0x200003b8
 8002be8:	20000414 	.word	0x20000414

08002bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f103 0208 	add.w	r2, r3, #8
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295
 8002c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 0208 	add.w	r2, r3, #8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0208 	add.w	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bc80      	pop	{r7}
 8002c28:	4770      	bx	lr

08002c2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	601a      	str	r2, [r3, #0]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9e:	d103      	bne.n	8002ca8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	e00c      	b.n	8002cc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3308      	adds	r3, #8
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e002      	b.n	8002cb6 <vListInsert+0x2e>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d2f6      	bcs.n	8002cb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6892      	ldr	r2, [r2, #8]
 8002d0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6852      	ldr	r2, [r2, #4]
 8002d18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d103      	bne.n	8002d2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	1e5a      	subs	r2, r3, #1
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002d78:	f002 f930 	bl	8004fdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	441a      	add	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da8:	3b01      	subs	r3, #1
 8002daa:	68f9      	ldr	r1, [r7, #12]
 8002dac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002dae:	fb01 f303 	mul.w	r3, r1, r3
 8002db2:	441a      	add	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	22ff      	movs	r2, #255	@ 0xff
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	22ff      	movs	r2, #255	@ 0xff
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d114      	bne.n	8002df8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3310      	adds	r3, #16
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 fa12 	bl	8004204 <xTaskRemoveFromEventList>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d012      	beq.n	8002e0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <xQueueGenericReset+0xd0>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	e009      	b.n	8002e0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	3310      	adds	r3, #16
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fef5 	bl	8002bec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	3324      	adds	r3, #36	@ 0x24
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fef0 	bl	8002bec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e0c:	f002 f916 	bl	800503c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e10:	2301      	movs	r3, #1
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08e      	sub	sp, #56	@ 0x38
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
 8002e2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d10b      	bne.n	8002e4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
 8002e4a:	e7fd      	b.n	8002e48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	e7fd      	b.n	8002e66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <xQueueGenericCreateStatic+0x56>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <xQueueGenericCreateStatic+0x5a>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <xQueueGenericCreateStatic+0x5c>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10b      	bne.n	8002e98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	623b      	str	r3, [r7, #32]
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	e7fd      	b.n	8002e94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d102      	bne.n	8002ea4 <xQueueGenericCreateStatic+0x84>
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <xQueueGenericCreateStatic+0x88>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e000      	b.n	8002eaa <xQueueGenericCreateStatic+0x8a>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10b      	bne.n	8002ec6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	61fb      	str	r3, [r7, #28]
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	e7fd      	b.n	8002ec2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ec6:	2350      	movs	r3, #80	@ 0x50
 8002ec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b50      	cmp	r3, #80	@ 0x50
 8002ece:	d00b      	beq.n	8002ee8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61bb      	str	r3, [r7, #24]
}
 8002ee2:	bf00      	nop
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002ee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00d      	beq.n	8002f10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002efc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68b9      	ldr	r1, [r7, #8]
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f840 	bl	8002f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3730      	adds	r7, #48	@ 0x30
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b08a      	sub	sp, #40	@ 0x28
 8002f1e:	af02      	add	r7, sp, #8
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	4613      	mov	r3, r2
 8002f26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	613b      	str	r3, [r7, #16]
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	e7fd      	b.n	8002f42 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	fb02 f303 	mul.w	r3, r2, r3
 8002f4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3350      	adds	r3, #80	@ 0x50
 8002f54:	4618      	mov	r0, r3
 8002f56:	f002 f943 	bl	80051e0 <pvPortMalloc>
 8002f5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d011      	beq.n	8002f86 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3350      	adds	r3, #80	@ 0x50
 8002f6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f74:	79fa      	ldrb	r2, [r7, #7]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 f805 	bl	8002f90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002f86:	69bb      	ldr	r3, [r7, #24]
	}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3720      	adds	r7, #32
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
 8002f9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d103      	bne.n	8002fac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	e002      	b.n	8002fb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	69b8      	ldr	r0, [r7, #24]
 8002fc2:	f7ff fec3 	bl	8002d4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
	...

08002fd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08e      	sub	sp, #56	@ 0x38
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10b      	bne.n	800300c <xQueueGenericSend+0x34>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff8:	f383 8811 	msr	BASEPRI, r3
 8002ffc:	f3bf 8f6f 	isb	sy
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003006:	bf00      	nop
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d103      	bne.n	800301a <xQueueGenericSend+0x42>
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <xQueueGenericSend+0x46>
 800301a:	2301      	movs	r3, #1
 800301c:	e000      	b.n	8003020 <xQueueGenericSend+0x48>
 800301e:	2300      	movs	r3, #0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10b      	bne.n	800303c <xQueueGenericSend+0x64>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d103      	bne.n	800304a <xQueueGenericSend+0x72>
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <xQueueGenericSend+0x76>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <xQueueGenericSend+0x78>
 800304e:	2300      	movs	r3, #0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10b      	bne.n	800306c <xQueueGenericSend+0x94>
	__asm volatile
 8003054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003058:	f383 8811 	msr	BASEPRI, r3
 800305c:	f3bf 8f6f 	isb	sy
 8003060:	f3bf 8f4f 	dsb	sy
 8003064:	623b      	str	r3, [r7, #32]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800306c:	f001 fa8a 	bl	8004584 <xTaskGetSchedulerState>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <xQueueGenericSend+0xa4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <xQueueGenericSend+0xa8>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <xQueueGenericSend+0xaa>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10b      	bne.n	800309e <xQueueGenericSend+0xc6>
	__asm volatile
 8003086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308a:	f383 8811 	msr	BASEPRI, r3
 800308e:	f3bf 8f6f 	isb	sy
 8003092:	f3bf 8f4f 	dsb	sy
 8003096:	61fb      	str	r3, [r7, #28]
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	e7fd      	b.n	800309a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800309e:	f001 ff9d 	bl	8004fdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d302      	bcc.n	80030b4 <xQueueGenericSend+0xdc>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d129      	bne.n	8003108 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030ba:	f000 face 	bl	800365a <prvCopyDataToQueue>
 80030be:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d010      	beq.n	80030ea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ca:	3324      	adds	r3, #36	@ 0x24
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 f899 	bl	8004204 <xTaskRemoveFromEventList>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d013      	beq.n	8003100 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030d8:	4b3f      	ldr	r3, [pc, #252]	@ (80031d8 <xQueueGenericSend+0x200>)
 80030da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	e00a      	b.n	8003100 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030f0:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <xQueueGenericSend+0x200>)
 80030f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	f3bf 8f4f 	dsb	sy
 80030fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003100:	f001 ff9c 	bl	800503c <vPortExitCritical>
				return pdPASS;
 8003104:	2301      	movs	r3, #1
 8003106:	e063      	b.n	80031d0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800310e:	f001 ff95 	bl	800503c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003112:	2300      	movs	r3, #0
 8003114:	e05c      	b.n	80031d0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4618      	mov	r0, r3
 8003122:	f001 f8d3 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003126:	2301      	movs	r3, #1
 8003128:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800312a:	f001 ff87 	bl	800503c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800312e:	f000 fe45 	bl	8003dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003132:	f001 ff53 	bl	8004fdc <vPortEnterCritical>
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800313c:	b25b      	sxtb	r3, r3
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003142:	d103      	bne.n	800314c <xQueueGenericSend+0x174>
 8003144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800314c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800314e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003152:	b25b      	sxtb	r3, r3
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d103      	bne.n	8003162 <xQueueGenericSend+0x18a>
 800315a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003162:	f001 ff6b 	bl	800503c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003166:	1d3a      	adds	r2, r7, #4
 8003168:	f107 0314 	add.w	r3, r7, #20
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f001 f8c2 	bl	80042f8 <xTaskCheckForTimeOut>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d124      	bne.n	80031c4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800317a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800317c:	f000 fb65 	bl	800384a <prvIsQueueFull>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	3310      	adds	r3, #16
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f000 ffe6 	bl	8004160 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003196:	f000 faf0 	bl	800377a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800319a:	f000 fe1d 	bl	8003dd8 <xTaskResumeAll>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f47f af7c 	bne.w	800309e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80031a6:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <xQueueGenericSend+0x200>)
 80031a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	e772      	b.n	800309e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031ba:	f000 fade 	bl	800377a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031be:	f000 fe0b 	bl	8003dd8 <xTaskResumeAll>
 80031c2:	e76c      	b.n	800309e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80031c6:	f000 fad8 	bl	800377a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031ca:	f000 fe05 	bl	8003dd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3738      	adds	r7, #56	@ 0x38
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b090      	sub	sp, #64	@ 0x40
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10b      	bne.n	800320c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80031f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f8:	f383 8811 	msr	BASEPRI, r3
 80031fc:	f3bf 8f6f 	isb	sy
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d103      	bne.n	800321a <xQueueGenericSendFromISR+0x3e>
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <xQueueGenericSendFromISR+0x42>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <xQueueGenericSendFromISR+0x44>
 800321e:	2300      	movs	r3, #0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003228:	f383 8811 	msr	BASEPRI, r3
 800322c:	f3bf 8f6f 	isb	sy
 8003230:	f3bf 8f4f 	dsb	sy
 8003234:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003236:	bf00      	nop
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d103      	bne.n	800324a <xQueueGenericSendFromISR+0x6e>
 8003242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <xQueueGenericSendFromISR+0x72>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <xQueueGenericSendFromISR+0x74>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10b      	bne.n	800326c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	623b      	str	r3, [r7, #32]
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800326c:	f001 ff78 	bl	8005160 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003270:	f3ef 8211 	mrs	r2, BASEPRI
 8003274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61fa      	str	r2, [r7, #28]
 8003286:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003288:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800328a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800328c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003292:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003294:	429a      	cmp	r2, r3
 8003296:	d302      	bcc.n	800329e <xQueueGenericSendFromISR+0xc2>
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d12f      	bne.n	80032fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800329e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80032b4:	f000 f9d1 	bl	800365a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d112      	bne.n	80032e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032cc:	3324      	adds	r3, #36	@ 0x24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 ff98 	bl	8004204 <xTaskRemoveFromEventList>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00e      	beq.n	80032f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e007      	b.n	80032f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80032ec:	3301      	adds	r3, #1
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	b25a      	sxtb	r2, r3
 80032f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80032f8:	2301      	movs	r3, #1
 80032fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80032fc:	e001      	b.n	8003302 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003302:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003304:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800330c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800330e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003310:	4618      	mov	r0, r3
 8003312:	3740      	adds	r7, #64	@ 0x40
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b08c      	sub	sp, #48	@ 0x30
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10b      	bne.n	800334a <xQueueReceive+0x32>
	__asm volatile
 8003332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	f3bf 8f4f 	dsb	sy
 8003342:	623b      	str	r3, [r7, #32]
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop
 8003348:	e7fd      	b.n	8003346 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d103      	bne.n	8003358 <xQueueReceive+0x40>
 8003350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <xQueueReceive+0x44>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <xQueueReceive+0x46>
 800335c:	2300      	movs	r3, #0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <xQueueReceive+0x62>
	__asm volatile
 8003362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003366:	f383 8811 	msr	BASEPRI, r3
 800336a:	f3bf 8f6f 	isb	sy
 800336e:	f3bf 8f4f 	dsb	sy
 8003372:	61fb      	str	r3, [r7, #28]
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	e7fd      	b.n	8003376 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800337a:	f001 f903 	bl	8004584 <xTaskGetSchedulerState>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d102      	bne.n	800338a <xQueueReceive+0x72>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <xQueueReceive+0x76>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <xQueueReceive+0x78>
 800338e:	2300      	movs	r3, #0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10b      	bne.n	80033ac <xQueueReceive+0x94>
	__asm volatile
 8003394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	61bb      	str	r3, [r7, #24]
}
 80033a6:	bf00      	nop
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033ac:	f001 fe16 	bl	8004fdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d01f      	beq.n	80033fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033c0:	f000 f9b5 	bl	800372e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00f      	beq.n	80033f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	3310      	adds	r3, #16
 80033d8:	4618      	mov	r0, r3
 80033da:	f000 ff13 	bl	8004204 <xTaskRemoveFromEventList>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033e4:	4b3c      	ldr	r3, [pc, #240]	@ (80034d8 <xQueueReceive+0x1c0>)
 80033e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033f4:	f001 fe22 	bl	800503c <vPortExitCritical>
				return pdPASS;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e069      	b.n	80034d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d103      	bne.n	800340a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003402:	f001 fe1b 	bl	800503c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003406:	2300      	movs	r3, #0
 8003408:	e062      	b.n	80034d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800340a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003410:	f107 0310 	add.w	r3, r7, #16
 8003414:	4618      	mov	r0, r3
 8003416:	f000 ff59 	bl	80042cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800341a:	2301      	movs	r3, #1
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800341e:	f001 fe0d 	bl	800503c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003422:	f000 fccb 	bl	8003dbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003426:	f001 fdd9 	bl	8004fdc <vPortEnterCritical>
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003430:	b25b      	sxtb	r3, r3
 8003432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003436:	d103      	bne.n	8003440 <xQueueReceive+0x128>
 8003438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003446:	b25b      	sxtb	r3, r3
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d103      	bne.n	8003456 <xQueueReceive+0x13e>
 800344e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003456:	f001 fdf1 	bl	800503c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800345a:	1d3a      	adds	r2, r7, #4
 800345c:	f107 0310 	add.w	r3, r7, #16
 8003460:	4611      	mov	r1, r2
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ff48 	bl	80042f8 <xTaskCheckForTimeOut>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d123      	bne.n	80034b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800346e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003470:	f000 f9d5 	bl	800381e <prvIsQueueEmpty>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d017      	beq.n	80034aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	3324      	adds	r3, #36	@ 0x24
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fe6c 	bl	8004160 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003488:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800348a:	f000 f976 	bl	800377a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800348e:	f000 fca3 	bl	8003dd8 <xTaskResumeAll>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d189      	bne.n	80033ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003498:	4b0f      	ldr	r3, [pc, #60]	@ (80034d8 <xQueueReceive+0x1c0>)
 800349a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	e780      	b.n	80033ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034ac:	f000 f965 	bl	800377a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034b0:	f000 fc92 	bl	8003dd8 <xTaskResumeAll>
 80034b4:	e77a      	b.n	80033ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034b8:	f000 f95f 	bl	800377a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034bc:	f000 fc8c 	bl	8003dd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034c2:	f000 f9ac 	bl	800381e <prvIsQueueEmpty>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f43f af6f 	beq.w	80033ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3730      	adds	r7, #48	@ 0x30
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08e      	sub	sp, #56	@ 0x38
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10b      	bne.n	800350a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	623b      	str	r3, [r7, #32]
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <xQueueReceiveFromISR+0x3c>
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <xQueueReceiveFromISR+0x40>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <xQueueReceiveFromISR+0x42>
 800351c:	2300      	movs	r3, #0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	61fb      	str	r3, [r7, #28]
}
 8003534:	bf00      	nop
 8003536:	bf00      	nop
 8003538:	e7fd      	b.n	8003536 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800353a:	f001 fe11 	bl	8005160 <vPortValidateInterruptPriority>
	__asm volatile
 800353e:	f3ef 8211 	mrs	r2, BASEPRI
 8003542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	61ba      	str	r2, [r7, #24]
 8003554:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003556:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800355a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02f      	beq.n	80035c6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800356c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003574:	f000 f8db 	bl	800372e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	1e5a      	subs	r2, r3, #1
 800357c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003580:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d112      	bne.n	80035b0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	3310      	adds	r3, #16
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fe34 	bl	8004204 <xTaskRemoveFromEventList>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00e      	beq.n	80035c0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00b      	beq.n	80035c0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e007      	b.n	80035c0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80035b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035b4:	3301      	adds	r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	b25a      	sxtb	r2, r3
 80035ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80035c0:	2301      	movs	r3, #1
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80035c4:	e001      	b.n	80035ca <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f383 8811 	msr	BASEPRI, r3
}
 80035d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3738      	adds	r7, #56	@ 0x38
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	60bb      	str	r3, [r7, #8]
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	e7fd      	b.n	8003602 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8003606:	f001 fce9 	bl	8004fdc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003610:	f001 fd14 	bl	800503c <vPortExitCritical>

	return uxReturn;
 8003614:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800361e:	b480      	push	{r7}
 8003620:	b087      	sub	sp, #28
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10b      	bne.n	8003648 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	60fb      	str	r3, [r7, #12]
}
 8003642:	bf00      	nop
 8003644:	bf00      	nop
 8003646:	e7fd      	b.n	8003644 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800364c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800364e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003650:	4618      	mov	r0, r3
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	60f8      	str	r0, [r7, #12]
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003666:	2300      	movs	r3, #0
 8003668:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10d      	bne.n	8003694 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d14d      	bne.n	800371c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 ff9b 	bl	80045c0 <xTaskPriorityDisinherit>
 800368a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	e043      	b.n	800371c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d119      	bne.n	80036ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6858      	ldr	r0, [r3, #4]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	461a      	mov	r2, r3
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	f001 ffdd 	bl	8005664 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d32b      	bcc.n	800371c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	e026      	b.n	800371c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	68d8      	ldr	r0, [r3, #12]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	461a      	mov	r2, r3
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	f001 ffc3 	bl	8005664 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e6:	425b      	negs	r3, r3
 80036e8:	441a      	add	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68da      	ldr	r2, [r3, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d207      	bcs.n	800370a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	425b      	negs	r3, r3
 8003704:	441a      	add	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d105      	bne.n	800371c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3b01      	subs	r3, #1
 800371a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003724:	697b      	ldr	r3, [r7, #20]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d018      	beq.n	8003772 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d303      	bcc.n	8003762 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68d9      	ldr	r1, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	461a      	mov	r2, r3
 800376c:	6838      	ldr	r0, [r7, #0]
 800376e:	f001 ff79 	bl	8005664 <memcpy>
	}
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003782:	f001 fc2b 	bl	8004fdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800378c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800378e:	e011      	b.n	80037b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	2b00      	cmp	r3, #0
 8003796:	d012      	beq.n	80037be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3324      	adds	r3, #36	@ 0x24
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fd31 	bl	8004204 <xTaskRemoveFromEventList>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037a8:	f000 fe0a 	bl	80043c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	dce9      	bgt.n	8003790 <prvUnlockQueue+0x16>
 80037bc:	e000      	b.n	80037c0 <prvUnlockQueue+0x46>
					break;
 80037be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	22ff      	movs	r2, #255	@ 0xff
 80037c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037c8:	f001 fc38 	bl	800503c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037cc:	f001 fc06 	bl	8004fdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d8:	e011      	b.n	80037fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3310      	adds	r3, #16
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fd0c 	bl	8004204 <xTaskRemoveFromEventList>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037f2:	f000 fde5 	bl	80043c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037f6:	7bbb      	ldrb	r3, [r7, #14]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003802:	2b00      	cmp	r3, #0
 8003804:	dce9      	bgt.n	80037da <prvUnlockQueue+0x60>
 8003806:	e000      	b.n	800380a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003808:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	22ff      	movs	r2, #255	@ 0xff
 800380e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003812:	f001 fc13 	bl	800503c <vPortExitCritical>
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003826:	f001 fbd9 	bl	8004fdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003832:	2301      	movs	r3, #1
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e001      	b.n	800383c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800383c:	f001 fbfe 	bl	800503c <vPortExitCritical>

	return xReturn;
 8003840:	68fb      	ldr	r3, [r7, #12]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003852:	f001 fbc3 	bl	8004fdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	429a      	cmp	r2, r3
 8003860:	d102      	bne.n	8003868 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003862:	2301      	movs	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
 8003866:	e001      	b.n	800386c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800386c:	f001 fbe6 	bl	800503c <vPortExitCritical>

	return xReturn;
 8003870:	68fb      	ldr	r3, [r7, #12]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	e014      	b.n	80038b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800388c:	4a0e      	ldr	r2, [pc, #56]	@ (80038c8 <vQueueAddToRegistry+0x4c>)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003898:	490b      	ldr	r1, [pc, #44]	@ (80038c8 <vQueueAddToRegistry+0x4c>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038a2:	4a09      	ldr	r2, [pc, #36]	@ (80038c8 <vQueueAddToRegistry+0x4c>)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	4413      	add	r3, r2
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038ae:	e006      	b.n	80038be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3301      	adds	r3, #1
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b07      	cmp	r3, #7
 80038ba:	d9e7      	bls.n	800388c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038bc:	bf00      	nop
 80038be:	bf00      	nop
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	20000814 	.word	0x20000814

080038cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038dc:	f001 fb7e 	bl	8004fdc <vPortEnterCritical>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038e6:	b25b      	sxtb	r3, r3
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d103      	bne.n	80038f6 <vQueueWaitForMessageRestricted+0x2a>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038fc:	b25b      	sxtb	r3, r3
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d103      	bne.n	800390c <vQueueWaitForMessageRestricted+0x40>
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800390c:	f001 fb96 	bl	800503c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	d106      	bne.n	8003926 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3324      	adds	r3, #36	@ 0x24
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	68b9      	ldr	r1, [r7, #8]
 8003920:	4618      	mov	r0, r3
 8003922:	f000 fc43 	bl	80041ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003926:	6978      	ldr	r0, [r7, #20]
 8003928:	f7ff ff27 	bl	800377a <prvUnlockQueue>
	}
 800392c:	bf00      	nop
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08e      	sub	sp, #56	@ 0x38
 8003938:	af04      	add	r7, sp, #16
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	61fb      	str	r3, [r7, #28]
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	e7fd      	b.n	800397a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800397e:	235c      	movs	r3, #92	@ 0x5c
 8003980:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	2b5c      	cmp	r3, #92	@ 0x5c
 8003986:	d00b      	beq.n	80039a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	61bb      	str	r3, [r7, #24]
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01e      	beq.n	80039e6 <xTaskCreateStatic+0xb2>
 80039a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01b      	beq.n	80039e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039c0:	2300      	movs	r3, #0
 80039c2:	9303      	str	r3, [sp, #12]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	9302      	str	r3, [sp, #8]
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	68b9      	ldr	r1, [r7, #8]
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f850 	bl	8003a7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039e0:	f000 f8de 	bl	8003ba0 <prvAddNewTaskToReadyList>
 80039e4:	e001      	b.n	80039ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ea:	697b      	ldr	r3, [r7, #20]
	}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3728      	adds	r7, #40	@ 0x28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08c      	sub	sp, #48	@ 0x30
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f001 fbe9 	bl	80051e0 <pvPortMalloc>
 8003a0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00e      	beq.n	8003a34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a16:	205c      	movs	r0, #92	@ 0x5c
 8003a18:	f001 fbe2 	bl	80051e0 <pvPortMalloc>
 8003a1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a2a:	e005      	b.n	8003a38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a2c:	6978      	ldr	r0, [r7, #20]
 8003a2e:	f001 fca5 	bl	800537c <vPortFree>
 8003a32:	e001      	b.n	8003a38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d017      	beq.n	8003a6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a46:	88fa      	ldrh	r2, [r7, #6]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9303      	str	r3, [sp, #12]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	9302      	str	r3, [sp, #8]
 8003a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f000 f80e 	bl	8003a7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a62:	69f8      	ldr	r0, [r7, #28]
 8003a64:	f000 f89c 	bl	8003ba0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	61bb      	str	r3, [r7, #24]
 8003a6c:	e002      	b.n	8003a74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a74:	69bb      	ldr	r3, [r7, #24]
	}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3720      	adds	r7, #32
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b088      	sub	sp, #32
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	60f8      	str	r0, [r7, #12]
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	461a      	mov	r2, r3
 8003a96:	21a5      	movs	r1, #165	@ 0xa5
 8003a98:	f001 fdb0 	bl	80055fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f023 0307 	bic.w	r3, r3, #7
 8003ab4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac4:	f383 8811 	msr	BASEPRI, r3
 8003ac8:	f3bf 8f6f 	isb	sy
 8003acc:	f3bf 8f4f 	dsb	sy
 8003ad0:	617b      	str	r3, [r7, #20]
}
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
 8003ad6:	e7fd      	b.n	8003ad4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01f      	beq.n	8003b1e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	e012      	b.n	8003b0a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	7819      	ldrb	r1, [r3, #0]
 8003aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	4413      	add	r3, r2
 8003af2:	3334      	adds	r3, #52	@ 0x34
 8003af4:	460a      	mov	r2, r1
 8003af6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d006      	beq.n	8003b12 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	3301      	adds	r3, #1
 8003b08:	61fb      	str	r3, [r7, #28]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2b0f      	cmp	r3, #15
 8003b0e:	d9e9      	bls.n	8003ae4 <prvInitialiseNewTask+0x66>
 8003b10:	e000      	b.n	8003b14 <prvInitialiseNewTask+0x96>
			{
				break;
 8003b12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b1c:	e003      	b.n	8003b26 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	2b37      	cmp	r3, #55	@ 0x37
 8003b2a:	d901      	bls.n	8003b30 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b2c:	2337      	movs	r3, #55	@ 0x37
 8003b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b34:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b3a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3e:	2200      	movs	r2, #0
 8003b40:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	3304      	adds	r3, #4
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7ff f86f 	bl	8002c2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	3318      	adds	r3, #24
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff f86a 	bl	8002c2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6e:	2200      	movs	r2, #0
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	68f9      	ldr	r1, [r7, #12]
 8003b7e:	69b8      	ldr	r0, [r7, #24]
 8003b80:	f001 f93a 	bl	8004df8 <pxPortInitialiseStack>
 8003b84:	4602      	mov	r2, r0
 8003b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b96:	bf00      	nop
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ba8:	f001 fa18 	bl	8004fdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bac:	4b2d      	ldr	r3, [pc, #180]	@ (8003c64 <prvAddNewTaskToReadyList+0xc4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c64 <prvAddNewTaskToReadyList+0xc4>)
 8003bb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc4:	4b27      	ldr	r3, [pc, #156]	@ (8003c64 <prvAddNewTaskToReadyList+0xc4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d110      	bne.n	8003bee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bcc:	f000 fc1c 	bl	8004408 <prvInitialiseTaskLists>
 8003bd0:	e00d      	b.n	8003bee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bd2:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <prvAddNewTaskToReadyList+0xcc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bda:	4b23      	ldr	r3, [pc, #140]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d802      	bhi.n	8003bee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003be8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bee:	4b20      	ldr	r3, [pc, #128]	@ (8003c70 <prvAddNewTaskToReadyList+0xd0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c70 <prvAddNewTaskToReadyList+0xd0>)
 8003bf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <prvAddNewTaskToReadyList+0xd0>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c04:	4b1b      	ldr	r3, [pc, #108]	@ (8003c74 <prvAddNewTaskToReadyList+0xd4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d903      	bls.n	8003c14 <prvAddNewTaskToReadyList+0x74>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <prvAddNewTaskToReadyList+0xd4>)
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <prvAddNewTaskToReadyList+0xd8>)
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3304      	adds	r3, #4
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f7ff f809 	bl	8002c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c30:	f001 fa04 	bl	800503c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c34:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <prvAddNewTaskToReadyList+0xcc>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c68 <prvAddNewTaskToReadyList+0xc8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d207      	bcs.n	8003c5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <prvAddNewTaskToReadyList+0xdc>)
 8003c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5a:	bf00      	nop
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000d28 	.word	0x20000d28
 8003c68:	20000854 	.word	0x20000854
 8003c6c:	20000d34 	.word	0x20000d34
 8003c70:	20000d44 	.word	0x20000d44
 8003c74:	20000d30 	.word	0x20000d30
 8003c78:	20000858 	.word	0x20000858
 8003c7c:	e000ed04 	.word	0xe000ed04

08003c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d018      	beq.n	8003cc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c92:	4b14      	ldr	r3, [pc, #80]	@ (8003ce4 <vTaskDelay+0x64>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <vTaskDelay+0x32>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60bb      	str	r3, [r7, #8]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cb2:	f000 f883 	bl	8003dbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fcf1 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cbe:	f000 f88b 	bl	8003dd8 <xTaskResumeAll>
 8003cc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003cca:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <vTaskDelay+0x68>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000d50 	.word	0x20000d50
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	@ 0x28
 8003cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	1d39      	adds	r1, r7, #4
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe ff40 	bl	8002b88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	4922      	ldr	r1, [pc, #136]	@ (8003da4 <vTaskStartScheduler+0xb8>)
 8003d1c:	4822      	ldr	r0, [pc, #136]	@ (8003da8 <vTaskStartScheduler+0xbc>)
 8003d1e:	f7ff fe09 	bl	8003934 <xTaskCreateStatic>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a21      	ldr	r2, [pc, #132]	@ (8003dac <vTaskStartScheduler+0xc0>)
 8003d26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d28:	4b20      	ldr	r3, [pc, #128]	@ (8003dac <vTaskStartScheduler+0xc0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e001      	b.n	8003d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d40:	f000 fd02 	bl	8004748 <xTimerCreateTimerTask>
 8003d44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d116      	bne.n	8003d7a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
}
 8003d5e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d60:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <vTaskStartScheduler+0xc4>)
 8003d62:	f04f 32ff 	mov.w	r2, #4294967295
 8003d66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d68:	4b12      	ldr	r3, [pc, #72]	@ (8003db4 <vTaskStartScheduler+0xc8>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <vTaskStartScheduler+0xcc>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d74:	f001 f8c0 	bl	8004ef8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d78:	e00f      	b.n	8003d9a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d80:	d10b      	bne.n	8003d9a <vTaskStartScheduler+0xae>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	60fb      	str	r3, [r7, #12]
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <vTaskStartScheduler+0xaa>
}
 8003d9a:	bf00      	nop
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08005ffc 	.word	0x08005ffc
 8003da8:	080043d9 	.word	0x080043d9
 8003dac:	20000d4c 	.word	0x20000d4c
 8003db0:	20000d48 	.word	0x20000d48
 8003db4:	20000d34 	.word	0x20000d34
 8003db8:	20000d2c 	.word	0x20000d2c

08003dbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003dc0:	4b04      	ldr	r3, [pc, #16]	@ (8003dd4 <vTaskSuspendAll+0x18>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	4a03      	ldr	r2, [pc, #12]	@ (8003dd4 <vTaskSuspendAll+0x18>)
 8003dc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003dca:	bf00      	nop
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bc80      	pop	{r7}
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	20000d50 	.word	0x20000d50

08003dd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003de6:	4b42      	ldr	r3, [pc, #264]	@ (8003ef0 <xTaskResumeAll+0x118>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <xTaskResumeAll+0x2e>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	603b      	str	r3, [r7, #0]
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e06:	f001 f8e9 	bl	8004fdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ef0 <xTaskResumeAll+0x118>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	4a37      	ldr	r2, [pc, #220]	@ (8003ef0 <xTaskResumeAll+0x118>)
 8003e12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e14:	4b36      	ldr	r3, [pc, #216]	@ (8003ef0 <xTaskResumeAll+0x118>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d162      	bne.n	8003ee2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ef4 <xTaskResumeAll+0x11c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d05e      	beq.n	8003ee2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e24:	e02f      	b.n	8003e86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <xTaskResumeAll+0x120>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	3318      	adds	r3, #24
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe ff60 	bl	8002cf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fe ff5b 	bl	8002cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e46:	4b2d      	ldr	r3, [pc, #180]	@ (8003efc <xTaskResumeAll+0x124>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d903      	bls.n	8003e56 <xTaskResumeAll+0x7e>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	4a2a      	ldr	r2, [pc, #168]	@ (8003efc <xTaskResumeAll+0x124>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a27      	ldr	r2, [pc, #156]	@ (8003f00 <xTaskResumeAll+0x128>)
 8003e64:	441a      	add	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f7fe fee8 	bl	8002c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e76:	4b23      	ldr	r3, [pc, #140]	@ (8003f04 <xTaskResumeAll+0x12c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e80:	4b21      	ldr	r3, [pc, #132]	@ (8003f08 <xTaskResumeAll+0x130>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e86:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef8 <xTaskResumeAll+0x120>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1cb      	bne.n	8003e26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e94:	f000 fb56 	bl	8004544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e98:	4b1c      	ldr	r3, [pc, #112]	@ (8003f0c <xTaskResumeAll+0x134>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ea4:	f000 f844 	bl	8003f30 <xTaskIncrementTick>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003eae:	4b16      	ldr	r3, [pc, #88]	@ (8003f08 <xTaskResumeAll+0x130>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d1f1      	bne.n	8003ea4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ec0:	4b12      	ldr	r3, [pc, #72]	@ (8003f0c <xTaskResumeAll+0x134>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ec6:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <xTaskResumeAll+0x130>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <xTaskResumeAll+0x138>)
 8003ed4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ee2:	f001 f8ab 	bl	800503c <vPortExitCritical>

	return xAlreadyYielded;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000d50 	.word	0x20000d50
 8003ef4:	20000d28 	.word	0x20000d28
 8003ef8:	20000ce8 	.word	0x20000ce8
 8003efc:	20000d30 	.word	0x20000d30
 8003f00:	20000858 	.word	0x20000858
 8003f04:	20000854 	.word	0x20000854
 8003f08:	20000d3c 	.word	0x20000d3c
 8003f0c:	20000d38 	.word	0x20000d38
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f1a:	4b04      	ldr	r3, [pc, #16]	@ (8003f2c <xTaskGetTickCount+0x18>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f20:	687b      	ldr	r3, [r7, #4]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	20000d2c 	.word	0x20000d2c

08003f30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004078 <xTaskIncrementTick+0x148>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f040 8090 	bne.w	8004064 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f44:	4b4d      	ldr	r3, [pc, #308]	@ (800407c <xTaskIncrementTick+0x14c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800407c <xTaskIncrementTick+0x14c>)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d121      	bne.n	8003f9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f58:	4b49      	ldr	r3, [pc, #292]	@ (8004080 <xTaskIncrementTick+0x150>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	603b      	str	r3, [r7, #0]
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	e7fd      	b.n	8003f76 <xTaskIncrementTick+0x46>
 8003f7a:	4b41      	ldr	r3, [pc, #260]	@ (8004080 <xTaskIncrementTick+0x150>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	4b40      	ldr	r3, [pc, #256]	@ (8004084 <xTaskIncrementTick+0x154>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a3e      	ldr	r2, [pc, #248]	@ (8004080 <xTaskIncrementTick+0x150>)
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4a3e      	ldr	r2, [pc, #248]	@ (8004084 <xTaskIncrementTick+0x154>)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <xTaskIncrementTick+0x158>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3301      	adds	r3, #1
 8003f94:	4a3c      	ldr	r2, [pc, #240]	@ (8004088 <xTaskIncrementTick+0x158>)
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	f000 fad4 	bl	8004544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800408c <xTaskIncrementTick+0x15c>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d349      	bcc.n	800403a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa6:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <xTaskIncrementTick+0x150>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fb0:	4b36      	ldr	r3, [pc, #216]	@ (800408c <xTaskIncrementTick+0x15c>)
 8003fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb6:	601a      	str	r2, [r3, #0]
					break;
 8003fb8:	e03f      	b.n	800403a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fba:	4b31      	ldr	r3, [pc, #196]	@ (8004080 <xTaskIncrementTick+0x150>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d203      	bcs.n	8003fda <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800408c <xTaskIncrementTick+0x15c>)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fd8:	e02f      	b.n	800403a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe fe8a 	bl	8002cf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3318      	adds	r3, #24
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fe81 	bl	8002cf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ffa:	4b25      	ldr	r3, [pc, #148]	@ (8004090 <xTaskIncrementTick+0x160>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d903      	bls.n	800400a <xTaskIncrementTick+0xda>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004006:	4a22      	ldr	r2, [pc, #136]	@ (8004090 <xTaskIncrementTick+0x160>)
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400e:	4613      	mov	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4a1f      	ldr	r2, [pc, #124]	@ (8004094 <xTaskIncrementTick+0x164>)
 8004018:	441a      	add	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	3304      	adds	r3, #4
 800401e:	4619      	mov	r1, r3
 8004020:	4610      	mov	r0, r2
 8004022:	f7fe fe0e 	bl	8002c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	4b1b      	ldr	r3, [pc, #108]	@ (8004098 <xTaskIncrementTick+0x168>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	429a      	cmp	r2, r3
 8004032:	d3b8      	bcc.n	8003fa6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004034:	2301      	movs	r3, #1
 8004036:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004038:	e7b5      	b.n	8003fa6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800403a:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <xTaskIncrementTick+0x168>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004040:	4914      	ldr	r1, [pc, #80]	@ (8004094 <xTaskIncrementTick+0x164>)
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d901      	bls.n	8004056 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004056:	4b11      	ldr	r3, [pc, #68]	@ (800409c <xTaskIncrementTick+0x16c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800405e:	2301      	movs	r3, #1
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e004      	b.n	800406e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004064:	4b0e      	ldr	r3, [pc, #56]	@ (80040a0 <xTaskIncrementTick+0x170>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	4a0d      	ldr	r2, [pc, #52]	@ (80040a0 <xTaskIncrementTick+0x170>)
 800406c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800406e:	697b      	ldr	r3, [r7, #20]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	20000d50 	.word	0x20000d50
 800407c:	20000d2c 	.word	0x20000d2c
 8004080:	20000ce0 	.word	0x20000ce0
 8004084:	20000ce4 	.word	0x20000ce4
 8004088:	20000d40 	.word	0x20000d40
 800408c:	20000d48 	.word	0x20000d48
 8004090:	20000d30 	.word	0x20000d30
 8004094:	20000858 	.word	0x20000858
 8004098:	20000854 	.word	0x20000854
 800409c:	20000d3c 	.word	0x20000d3c
 80040a0:	20000d38 	.word	0x20000d38

080040a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040aa:	4b28      	ldr	r3, [pc, #160]	@ (800414c <vTaskSwitchContext+0xa8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040b2:	4b27      	ldr	r3, [pc, #156]	@ (8004150 <vTaskSwitchContext+0xac>)
 80040b4:	2201      	movs	r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040b8:	e042      	b.n	8004140 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80040ba:	4b25      	ldr	r3, [pc, #148]	@ (8004150 <vTaskSwitchContext+0xac>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c0:	4b24      	ldr	r3, [pc, #144]	@ (8004154 <vTaskSwitchContext+0xb0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	e011      	b.n	80040ec <vTaskSwitchContext+0x48>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <vTaskSwitchContext+0x42>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	607b      	str	r3, [r7, #4]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <vTaskSwitchContext+0x3e>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	491a      	ldr	r1, [pc, #104]	@ (8004158 <vTaskSwitchContext+0xb4>)
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4613      	mov	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0e3      	beq.n	80040c8 <vTaskSwitchContext+0x24>
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a13      	ldr	r2, [pc, #76]	@ (8004158 <vTaskSwitchContext+0xb4>)
 800410c:	4413      	add	r3, r2
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	3308      	adds	r3, #8
 8004122:	429a      	cmp	r2, r3
 8004124:	d104      	bne.n	8004130 <vTaskSwitchContext+0x8c>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	605a      	str	r2, [r3, #4]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4a09      	ldr	r2, [pc, #36]	@ (800415c <vTaskSwitchContext+0xb8>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	4a06      	ldr	r2, [pc, #24]	@ (8004154 <vTaskSwitchContext+0xb0>)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	bc80      	pop	{r7}
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000d50 	.word	0x20000d50
 8004150:	20000d3c 	.word	0x20000d3c
 8004154:	20000d30 	.word	0x20000d30
 8004158:	20000858 	.word	0x20000858
 800415c:	20000854 	.word	0x20000854

08004160 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10b      	bne.n	8004188 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004188:	4b07      	ldr	r3, [pc, #28]	@ (80041a8 <vTaskPlaceOnEventList+0x48>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3318      	adds	r3, #24
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fe fd79 	bl	8002c88 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004196:	2101      	movs	r1, #1
 8004198:	6838      	ldr	r0, [r7, #0]
 800419a:	f000 fa81 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
}
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000854 	.word	0x20000854

080041ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	617b      	str	r3, [r7, #20]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004200 <vTaskPlaceOnEventListRestricted+0x54>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3318      	adds	r3, #24
 80041dc:	4619      	mov	r1, r3
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7fe fd2f 	bl	8002c42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	68b8      	ldr	r0, [r7, #8]
 80041f4:	f000 fa54 	bl	80046a0 <prvAddCurrentTaskToDelayedList>
	}
 80041f8:	bf00      	nop
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000854 	.word	0x20000854

08004204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	60fb      	str	r3, [r7, #12]
}
 800422c:	bf00      	nop
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3318      	adds	r3, #24
 8004236:	4618      	mov	r0, r3
 8004238:	f7fe fd5e 	bl	8002cf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800423c:	4b1d      	ldr	r3, [pc, #116]	@ (80042b4 <xTaskRemoveFromEventList+0xb0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11d      	bne.n	8004280 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	3304      	adds	r3, #4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fd55 	bl	8002cf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004252:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <xTaskRemoveFromEventList+0xb4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d903      	bls.n	8004262 <xTaskRemoveFromEventList+0x5e>
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425e:	4a16      	ldr	r2, [pc, #88]	@ (80042b8 <xTaskRemoveFromEventList+0xb4>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a13      	ldr	r2, [pc, #76]	@ (80042bc <xTaskRemoveFromEventList+0xb8>)
 8004270:	441a      	add	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3304      	adds	r3, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7fe fce2 	bl	8002c42 <vListInsertEnd>
 800427e:	e005      	b.n	800428c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3318      	adds	r3, #24
 8004284:	4619      	mov	r1, r3
 8004286:	480e      	ldr	r0, [pc, #56]	@ (80042c0 <xTaskRemoveFromEventList+0xbc>)
 8004288:	f7fe fcdb 	bl	8002c42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004290:	4b0c      	ldr	r3, [pc, #48]	@ (80042c4 <xTaskRemoveFromEventList+0xc0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004296:	429a      	cmp	r2, r3
 8004298:	d905      	bls.n	80042a6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <xTaskRemoveFromEventList+0xc4>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e001      	b.n	80042aa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042a6:	2300      	movs	r3, #0
 80042a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042aa:	697b      	ldr	r3, [r7, #20]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000d50 	.word	0x20000d50
 80042b8:	20000d30 	.word	0x20000d30
 80042bc:	20000858 	.word	0x20000858
 80042c0:	20000ce8 	.word	0x20000ce8
 80042c4:	20000854 	.word	0x20000854
 80042c8:	20000d3c 	.word	0x20000d3c

080042cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042d4:	4b06      	ldr	r3, [pc, #24]	@ (80042f0 <vTaskInternalSetTimeOutState+0x24>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042dc:	4b05      	ldr	r3, [pc, #20]	@ (80042f4 <vTaskInternalSetTimeOutState+0x28>)
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	605a      	str	r2, [r3, #4]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	20000d40 	.word	0x20000d40
 80042f4:	20000d2c 	.word	0x20000d2c

080042f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60fb      	str	r3, [r7, #12]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800433e:	f000 fe4d 	bl	8004fdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004342:	4b1d      	ldr	r3, [pc, #116]	@ (80043b8 <xTaskCheckForTimeOut+0xc0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435a:	d102      	bne.n	8004362 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800435c:	2300      	movs	r3, #0
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e023      	b.n	80043aa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <xTaskCheckForTimeOut+0xc4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	429a      	cmp	r2, r3
 800436c:	d007      	beq.n	800437e <xTaskCheckForTimeOut+0x86>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	429a      	cmp	r2, r3
 8004376:	d302      	bcc.n	800437e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004378:	2301      	movs	r3, #1
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	e015      	b.n	80043aa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	429a      	cmp	r2, r3
 8004386:	d20b      	bcs.n	80043a0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	1ad2      	subs	r2, r2, r3
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff99 	bl	80042cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e004      	b.n	80043aa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043aa:	f000 fe47 	bl	800503c <vPortExitCritical>

	return xReturn;
 80043ae:	69fb      	ldr	r3, [r7, #28]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	20000d2c 	.word	0x20000d2c
 80043bc:	20000d40 	.word	0x20000d40

080043c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043c4:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <vTaskMissedYield+0x14>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000d3c 	.word	0x20000d3c

080043d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043e0:	f000 f852 	bl	8004488 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043e4:	4b06      	ldr	r3, [pc, #24]	@ (8004400 <prvIdleTask+0x28>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d9f9      	bls.n	80043e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <prvIdleTask+0x2c>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043fc:	e7f0      	b.n	80043e0 <prvIdleTask+0x8>
 80043fe:	bf00      	nop
 8004400:	20000858 	.word	0x20000858
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	e00c      	b.n	800442e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4a12      	ldr	r2, [pc, #72]	@ (8004468 <prvInitialiseTaskLists+0x60>)
 8004420:	4413      	add	r3, r2
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe fbe2 	bl	8002bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	3301      	adds	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b37      	cmp	r3, #55	@ 0x37
 8004432:	d9ef      	bls.n	8004414 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004434:	480d      	ldr	r0, [pc, #52]	@ (800446c <prvInitialiseTaskLists+0x64>)
 8004436:	f7fe fbd9 	bl	8002bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800443a:	480d      	ldr	r0, [pc, #52]	@ (8004470 <prvInitialiseTaskLists+0x68>)
 800443c:	f7fe fbd6 	bl	8002bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004440:	480c      	ldr	r0, [pc, #48]	@ (8004474 <prvInitialiseTaskLists+0x6c>)
 8004442:	f7fe fbd3 	bl	8002bec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004446:	480c      	ldr	r0, [pc, #48]	@ (8004478 <prvInitialiseTaskLists+0x70>)
 8004448:	f7fe fbd0 	bl	8002bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800444c:	480b      	ldr	r0, [pc, #44]	@ (800447c <prvInitialiseTaskLists+0x74>)
 800444e:	f7fe fbcd 	bl	8002bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004452:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <prvInitialiseTaskLists+0x78>)
 8004454:	4a05      	ldr	r2, [pc, #20]	@ (800446c <prvInitialiseTaskLists+0x64>)
 8004456:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004458:	4b0a      	ldr	r3, [pc, #40]	@ (8004484 <prvInitialiseTaskLists+0x7c>)
 800445a:	4a05      	ldr	r2, [pc, #20]	@ (8004470 <prvInitialiseTaskLists+0x68>)
 800445c:	601a      	str	r2, [r3, #0]
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20000858 	.word	0x20000858
 800446c:	20000cb8 	.word	0x20000cb8
 8004470:	20000ccc 	.word	0x20000ccc
 8004474:	20000ce8 	.word	0x20000ce8
 8004478:	20000cfc 	.word	0x20000cfc
 800447c:	20000d14 	.word	0x20000d14
 8004480:	20000ce0 	.word	0x20000ce0
 8004484:	20000ce4 	.word	0x20000ce4

08004488 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800448e:	e019      	b.n	80044c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004490:	f000 fda4 	bl	8004fdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004494:	4b10      	ldr	r3, [pc, #64]	@ (80044d8 <prvCheckTasksWaitingTermination+0x50>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fc29 	bl	8002cf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044a6:	4b0d      	ldr	r3, [pc, #52]	@ (80044dc <prvCheckTasksWaitingTermination+0x54>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	4a0b      	ldr	r2, [pc, #44]	@ (80044dc <prvCheckTasksWaitingTermination+0x54>)
 80044ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044b0:	4b0b      	ldr	r3, [pc, #44]	@ (80044e0 <prvCheckTasksWaitingTermination+0x58>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	4a0a      	ldr	r2, [pc, #40]	@ (80044e0 <prvCheckTasksWaitingTermination+0x58>)
 80044b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044ba:	f000 fdbf 	bl	800503c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f810 	bl	80044e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044c4:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <prvCheckTasksWaitingTermination+0x58>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e1      	bne.n	8004490 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000cfc 	.word	0x20000cfc
 80044dc:	20000d28 	.word	0x20000d28
 80044e0:	20000d10 	.word	0x20000d10

080044e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 ff3e 	bl	800537c <vPortFree>
				vPortFree( pxTCB );
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 ff3b 	bl	800537c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004506:	e019      	b.n	800453c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800450e:	2b01      	cmp	r3, #1
 8004510:	d103      	bne.n	800451a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 ff32 	bl	800537c <vPortFree>
	}
 8004518:	e010      	b.n	800453c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004520:	2b02      	cmp	r3, #2
 8004522:	d00b      	beq.n	800453c <prvDeleteTCB+0x58>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	60fb      	str	r3, [r7, #12]
}
 8004536:	bf00      	nop
 8004538:	bf00      	nop
 800453a:	e7fd      	b.n	8004538 <prvDeleteTCB+0x54>
	}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <prvResetNextTaskUnblockTime+0x38>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d104      	bne.n	800455e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004554:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <prvResetNextTaskUnblockTime+0x3c>)
 8004556:	f04f 32ff 	mov.w	r2, #4294967295
 800455a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800455c:	e008      	b.n	8004570 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800455e:	4b07      	ldr	r3, [pc, #28]	@ (800457c <prvResetNextTaskUnblockTime+0x38>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <prvResetNextTaskUnblockTime+0x3c>)
 800456e:	6013      	str	r3, [r2, #0]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000ce0 	.word	0x20000ce0
 8004580:	20000d48 	.word	0x20000d48

08004584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <xTaskGetSchedulerState+0x34>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004592:	2301      	movs	r3, #1
 8004594:	607b      	str	r3, [r7, #4]
 8004596:	e008      	b.n	80045aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004598:	4b08      	ldr	r3, [pc, #32]	@ (80045bc <xTaskGetSchedulerState+0x38>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045a0:	2302      	movs	r3, #2
 80045a2:	607b      	str	r3, [r7, #4]
 80045a4:	e001      	b.n	80045aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045a6:	2300      	movs	r3, #0
 80045a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045aa:	687b      	ldr	r3, [r7, #4]
	}
 80045ac:	4618      	mov	r0, r3
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000d34 	.word	0x20000d34
 80045bc:	20000d50 	.word	0x20000d50

080045c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d058      	beq.n	8004688 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004694 <xTaskPriorityDisinherit+0xd4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d00b      	beq.n	80045f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e4:	f383 8811 	msr	BASEPRI, r3
 80045e8:	f3bf 8f6f 	isb	sy
 80045ec:	f3bf 8f4f 	dsb	sy
 80045f0:	60fb      	str	r3, [r7, #12]
}
 80045f2:	bf00      	nop
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60bb      	str	r3, [r7, #8]
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800461c:	1e5a      	subs	r2, r3, #1
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800462a:	429a      	cmp	r2, r3
 800462c:	d02c      	beq.n	8004688 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004632:	2b00      	cmp	r3, #0
 8004634:	d128      	bne.n	8004688 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3304      	adds	r3, #4
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fb5c 	bl	8002cf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004658:	4b0f      	ldr	r3, [pc, #60]	@ (8004698 <xTaskPriorityDisinherit+0xd8>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d903      	bls.n	8004668 <xTaskPriorityDisinherit+0xa8>
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004664:	4a0c      	ldr	r2, [pc, #48]	@ (8004698 <xTaskPriorityDisinherit+0xd8>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4a09      	ldr	r2, [pc, #36]	@ (800469c <xTaskPriorityDisinherit+0xdc>)
 8004676:	441a      	add	r2, r3
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	3304      	adds	r3, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4610      	mov	r0, r2
 8004680:	f7fe fadf 	bl	8002c42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004688:	697b      	ldr	r3, [r7, #20]
	}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000854 	.word	0x20000854
 8004698:	20000d30 	.word	0x20000d30
 800469c:	20000858 	.word	0x20000858

080046a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046aa:	4b21      	ldr	r3, [pc, #132]	@ (8004730 <prvAddCurrentTaskToDelayedList+0x90>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046b0:	4b20      	ldr	r3, [pc, #128]	@ (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe fb1e 	bl	8002cf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d10a      	bne.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d007      	beq.n	80046da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ca:	4b1a      	ldr	r3, [pc, #104]	@ (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3304      	adds	r3, #4
 80046d0:	4619      	mov	r1, r3
 80046d2:	4819      	ldr	r0, [pc, #100]	@ (8004738 <prvAddCurrentTaskToDelayedList+0x98>)
 80046d4:	f7fe fab5 	bl	8002c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046d8:	e026      	b.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4413      	add	r3, r2
 80046e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046e2:	4b14      	ldr	r3, [pc, #80]	@ (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d209      	bcs.n	8004706 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046f2:	4b12      	ldr	r3, [pc, #72]	@ (800473c <prvAddCurrentTaskToDelayedList+0x9c>)
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fe fac2 	bl	8002c88 <vListInsert>
}
 8004704:	e010      	b.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004706:	4b0e      	ldr	r3, [pc, #56]	@ (8004740 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <prvAddCurrentTaskToDelayedList+0x94>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3304      	adds	r3, #4
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7fe fab8 	bl	8002c88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004718:	4b0a      	ldr	r3, [pc, #40]	@ (8004744 <prvAddCurrentTaskToDelayedList+0xa4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d202      	bcs.n	8004728 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004722:	4a08      	ldr	r2, [pc, #32]	@ (8004744 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6013      	str	r3, [r2, #0]
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000d2c 	.word	0x20000d2c
 8004734:	20000854 	.word	0x20000854
 8004738:	20000d14 	.word	0x20000d14
 800473c:	20000ce4 	.word	0x20000ce4
 8004740:	20000ce0 	.word	0x20000ce0
 8004744:	20000d48 	.word	0x20000d48

08004748 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	@ 0x28
 800474c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004752:	f000 fb11 	bl	8004d78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004756:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <xTimerCreateTimerTask+0x84>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d021      	beq.n	80047a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004766:	1d3a      	adds	r2, r7, #4
 8004768:	f107 0108 	add.w	r1, r7, #8
 800476c:	f107 030c 	add.w	r3, r7, #12
 8004770:	4618      	mov	r0, r3
 8004772:	f7fe fa21 	bl	8002bb8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	9202      	str	r2, [sp, #8]
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	2302      	movs	r3, #2
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	460a      	mov	r2, r1
 8004788:	4911      	ldr	r1, [pc, #68]	@ (80047d0 <xTimerCreateTimerTask+0x88>)
 800478a:	4812      	ldr	r0, [pc, #72]	@ (80047d4 <xTimerCreateTimerTask+0x8c>)
 800478c:	f7ff f8d2 	bl	8003934 <xTaskCreateStatic>
 8004790:	4603      	mov	r3, r0
 8004792:	4a11      	ldr	r2, [pc, #68]	@ (80047d8 <xTimerCreateTimerTask+0x90>)
 8004794:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <xTimerCreateTimerTask+0x90>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800479e:	2301      	movs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10b      	bne.n	80047c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	613b      	str	r3, [r7, #16]
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047c0:	697b      	ldr	r3, [r7, #20]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000d84 	.word	0x20000d84
 80047d0:	08006004 	.word	0x08006004
 80047d4:	08004915 	.word	0x08004915
 80047d8:	20000d88 	.word	0x20000d88

080047dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	@ 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10b      	bne.n	800480c <xTimerGenericCommand+0x30>
	__asm volatile
 80047f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f8:	f383 8811 	msr	BASEPRI, r3
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	f3bf 8f4f 	dsb	sy
 8004804:	623b      	str	r3, [r7, #32]
}
 8004806:	bf00      	nop
 8004808:	bf00      	nop
 800480a:	e7fd      	b.n	8004808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800480c:	4b19      	ldr	r3, [pc, #100]	@ (8004874 <xTimerGenericCommand+0x98>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d02a      	beq.n	800486a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b05      	cmp	r3, #5
 8004824:	dc18      	bgt.n	8004858 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004826:	f7ff fead 	bl	8004584 <xTaskGetSchedulerState>
 800482a:	4603      	mov	r3, r0
 800482c:	2b02      	cmp	r3, #2
 800482e:	d109      	bne.n	8004844 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004830:	4b10      	ldr	r3, [pc, #64]	@ (8004874 <xTimerGenericCommand+0x98>)
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	f107 0110 	add.w	r1, r7, #16
 8004838:	2300      	movs	r3, #0
 800483a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800483c:	f7fe fbcc 	bl	8002fd8 <xQueueGenericSend>
 8004840:	6278      	str	r0, [r7, #36]	@ 0x24
 8004842:	e012      	b.n	800486a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004844:	4b0b      	ldr	r3, [pc, #44]	@ (8004874 <xTimerGenericCommand+0x98>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f107 0110 	add.w	r1, r7, #16
 800484c:	2300      	movs	r3, #0
 800484e:	2200      	movs	r2, #0
 8004850:	f7fe fbc2 	bl	8002fd8 <xQueueGenericSend>
 8004854:	6278      	str	r0, [r7, #36]	@ 0x24
 8004856:	e008      	b.n	800486a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004858:	4b06      	ldr	r3, [pc, #24]	@ (8004874 <xTimerGenericCommand+0x98>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f107 0110 	add.w	r1, r7, #16
 8004860:	2300      	movs	r3, #0
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	f7fe fcba 	bl	80031dc <xQueueGenericSendFromISR>
 8004868:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800486c:	4618      	mov	r0, r3
 800486e:	3728      	adds	r7, #40	@ 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000d84 	.word	0x20000d84

08004878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004882:	4b23      	ldr	r3, [pc, #140]	@ (8004910 <prvProcessExpiredTimer+0x98>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3304      	adds	r3, #4
 8004890:	4618      	mov	r0, r3
 8004892:	f7fe fa31 	bl	8002cf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d023      	beq.n	80048ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	699a      	ldr	r2, [r3, #24]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	18d1      	adds	r1, r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	6978      	ldr	r0, [r7, #20]
 80048b2:	f000 f8d3 	bl	8004a5c <prvInsertTimerInActiveList>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d020      	beq.n	80048fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048bc:	2300      	movs	r3, #0
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	2300      	movs	r3, #0
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	2100      	movs	r1, #0
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7ff ff88 	bl	80047dc <xTimerGenericCommand>
 80048cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d114      	bne.n	80048fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	60fb      	str	r3, [r7, #12]
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	4798      	blx	r3
}
 8004906:	bf00      	nop
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000d7c 	.word	0x20000d7c

08004914 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800491c:	f107 0308 	add.w	r3, r7, #8
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f859 	bl	80049d8 <prvGetNextExpireTime>
 8004926:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4619      	mov	r1, r3
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f805 	bl	800493c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004932:	f000 f8d5 	bl	8004ae0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004936:	bf00      	nop
 8004938:	e7f0      	b.n	800491c <prvTimerTask+0x8>
	...

0800493c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004946:	f7ff fa39 	bl	8003dbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f864 	bl	8004a1c <prvSampleTimeNow>
 8004954:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d130      	bne.n	80049be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <prvProcessTimerOrBlockTask+0x3c>
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	429a      	cmp	r2, r3
 8004968:	d806      	bhi.n	8004978 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800496a:	f7ff fa35 	bl	8003dd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800496e:	68f9      	ldr	r1, [r7, #12]
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff81 	bl	8004878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004976:	e024      	b.n	80049c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800497e:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <prvProcessTimerOrBlockTask+0x90>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <prvProcessTimerOrBlockTask+0x50>
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <prvProcessTimerOrBlockTask+0x52>
 800498c:	2300      	movs	r3, #0
 800498e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004990:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <prvProcessTimerOrBlockTask+0x94>)
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	f7fe ff95 	bl	80038cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049a2:	f7ff fa19 	bl	8003dd8 <xTaskResumeAll>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10a      	bne.n	80049c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049ac:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <prvProcessTimerOrBlockTask+0x98>)
 80049ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	f3bf 8f6f 	isb	sy
}
 80049bc:	e001      	b.n	80049c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049be:	f7ff fa0b 	bl	8003dd8 <xTaskResumeAll>
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000d80 	.word	0x20000d80
 80049d0:	20000d84 	.word	0x20000d84
 80049d4:	e000ed04 	.word	0xe000ed04

080049d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004a18 <prvGetNextExpireTime+0x40>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <prvGetNextExpireTime+0x16>
 80049ea:	2201      	movs	r2, #1
 80049ec:	e000      	b.n	80049f0 <prvGetNextExpireTime+0x18>
 80049ee:	2200      	movs	r2, #0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049fc:	4b06      	ldr	r3, [pc, #24]	@ (8004a18 <prvGetNextExpireTime+0x40>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e001      	b.n	8004a0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	20000d7c 	.word	0x20000d7c

08004a1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a24:	f7ff fa76 	bl	8003f14 <xTaskGetTickCount>
 8004a28:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a58 <prvSampleTimeNow+0x3c>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d205      	bcs.n	8004a40 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a34:	f000 f93a 	bl	8004cac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e002      	b.n	8004a46 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a46:	4a04      	ldr	r2, [pc, #16]	@ (8004a58 <prvSampleTimeNow+0x3c>)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000d8c 	.word	0x20000d8c

08004a5c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d812      	bhi.n	8004aa8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	1ad2      	subs	r2, r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e01b      	b.n	8004ace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a96:	4b10      	ldr	r3, [pc, #64]	@ (8004ad8 <prvInsertTimerInActiveList+0x7c>)
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4610      	mov	r0, r2
 8004aa2:	f7fe f8f1 	bl	8002c88 <vListInsert>
 8004aa6:	e012      	b.n	8004ace <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d206      	bcs.n	8004abe <prvInsertTimerInActiveList+0x62>
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	e007      	b.n	8004ace <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004abe:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <prvInsertTimerInActiveList+0x80>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	4610      	mov	r0, r2
 8004aca:	f7fe f8dd 	bl	8002c88 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ace:	697b      	ldr	r3, [r7, #20]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	20000d80 	.word	0x20000d80
 8004adc:	20000d7c 	.word	0x20000d7c

08004ae0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b08e      	sub	sp, #56	@ 0x38
 8004ae4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ae6:	e0ce      	b.n	8004c86 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da19      	bge.n	8004b22 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	3304      	adds	r3, #4
 8004af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	61fb      	str	r3, [r7, #28]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b18:	6850      	ldr	r0, [r2, #4]
 8004b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b1c:	6892      	ldr	r2, [r2, #8]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f2c0 80ae 	blt.w	8004c86 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d004      	beq.n	8004b40 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b38:	3304      	adds	r3, #4
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe f8dc 	bl	8002cf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b40:	463b      	mov	r3, r7
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff ff6a 	bl	8004a1c <prvSampleTimeNow>
 8004b48:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b09      	cmp	r3, #9
 8004b4e:	f200 8097 	bhi.w	8004c80 <prvProcessReceivedCommands+0x1a0>
 8004b52:	a201      	add	r2, pc, #4	@ (adr r2, 8004b58 <prvProcessReceivedCommands+0x78>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b81 	.word	0x08004b81
 8004b60:	08004b81 	.word	0x08004b81
 8004b64:	08004bf7 	.word	0x08004bf7
 8004b68:	08004c0b 	.word	0x08004c0b
 8004b6c:	08004c57 	.word	0x08004c57
 8004b70:	08004b81 	.word	0x08004b81
 8004b74:	08004b81 	.word	0x08004b81
 8004b78:	08004bf7 	.word	0x08004bf7
 8004b7c:	08004c0b 	.word	0x08004c0b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b86:	f043 0301 	orr.w	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	18d1      	adds	r1, r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ba0:	f7ff ff5c 	bl	8004a5c <prvInsertTimerInActiveList>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d06c      	beq.n	8004c84 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d061      	beq.n	8004c84 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	441a      	add	r2, r3
 8004bc8:	2300      	movs	r3, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	2100      	movs	r1, #0
 8004bd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bd2:	f7ff fe03 	bl	80047dc <xTimerGenericCommand>
 8004bd6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d152      	bne.n	8004c84 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	61bb      	str	r3, [r7, #24]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c08:	e03d      	b.n	8004c86 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c1c:	68ba      	ldr	r2, [r7, #8]
 8004c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c20:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10b      	bne.n	8004c42 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2e:	f383 8811 	msr	BASEPRI, r3
 8004c32:	f3bf 8f6f 	isb	sy
 8004c36:	f3bf 8f4f 	dsb	sy
 8004c3a:	617b      	str	r3, [r7, #20]
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	e7fd      	b.n	8004c3e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c48:	18d1      	adds	r1, r2, r3
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c50:	f7ff ff04 	bl	8004a5c <prvInsertTimerInActiveList>
					break;
 8004c54:	e017      	b.n	8004c86 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d103      	bne.n	8004c6c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c66:	f000 fb89 	bl	800537c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c6a:	e00c      	b.n	8004c86 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c7e:	e002      	b.n	8004c86 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <prvProcessReceivedCommands+0x1a6>
					break;
 8004c84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c86:	4b08      	ldr	r3, [pc, #32]	@ (8004ca8 <prvProcessReceivedCommands+0x1c8>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	1d39      	adds	r1, r7, #4
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fb42 	bl	8003318 <xQueueReceive>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f47f af26 	bne.w	8004ae8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	bf00      	nop
 8004ca0:	3730      	adds	r7, #48	@ 0x30
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20000d84 	.word	0x20000d84

08004cac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cb2:	e049      	b.n	8004d48 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8004d70 <prvSwitchTimerLists+0xc4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cbe:	4b2c      	ldr	r3, [pc, #176]	@ (8004d70 <prvSwitchTimerLists+0xc4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fe f813 	bl	8002cf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02f      	beq.n	8004d48 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4413      	add	r3, r2
 8004cf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d90e      	bls.n	8004d18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d06:	4b1a      	ldr	r3, [pc, #104]	@ (8004d70 <prvSwitchTimerLists+0xc4>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f7fd ffb9 	bl	8002c88 <vListInsert>
 8004d16:	e017      	b.n	8004d48 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d18:	2300      	movs	r3, #0
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	2100      	movs	r1, #0
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7ff fd5a 	bl	80047dc <xTimerGenericCommand>
 8004d28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10b      	bne.n	8004d48 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d34:	f383 8811 	msr	BASEPRI, r3
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	f3bf 8f4f 	dsb	sy
 8004d40:	603b      	str	r3, [r7, #0]
}
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
 8004d46:	e7fd      	b.n	8004d44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d48:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <prvSwitchTimerLists+0xc4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1b0      	bne.n	8004cb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d52:	4b07      	ldr	r3, [pc, #28]	@ (8004d70 <prvSwitchTimerLists+0xc4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d58:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <prvSwitchTimerLists+0xc8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a04      	ldr	r2, [pc, #16]	@ (8004d70 <prvSwitchTimerLists+0xc4>)
 8004d5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d60:	4a04      	ldr	r2, [pc, #16]	@ (8004d74 <prvSwitchTimerLists+0xc8>)
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	6013      	str	r3, [r2, #0]
}
 8004d66:	bf00      	nop
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000d7c 	.word	0x20000d7c
 8004d74:	20000d80 	.word	0x20000d80

08004d78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d7e:	f000 f92d 	bl	8004fdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d82:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <prvCheckForValidListAndQueue+0x60>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d120      	bne.n	8004dcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d8a:	4814      	ldr	r0, [pc, #80]	@ (8004ddc <prvCheckForValidListAndQueue+0x64>)
 8004d8c:	f7fd ff2e 	bl	8002bec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d90:	4813      	ldr	r0, [pc, #76]	@ (8004de0 <prvCheckForValidListAndQueue+0x68>)
 8004d92:	f7fd ff2b 	bl	8002bec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d96:	4b13      	ldr	r3, [pc, #76]	@ (8004de4 <prvCheckForValidListAndQueue+0x6c>)
 8004d98:	4a10      	ldr	r2, [pc, #64]	@ (8004ddc <prvCheckForValidListAndQueue+0x64>)
 8004d9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d9c:	4b12      	ldr	r3, [pc, #72]	@ (8004de8 <prvCheckForValidListAndQueue+0x70>)
 8004d9e:	4a10      	ldr	r2, [pc, #64]	@ (8004de0 <prvCheckForValidListAndQueue+0x68>)
 8004da0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004da2:	2300      	movs	r3, #0
 8004da4:	9300      	str	r3, [sp, #0]
 8004da6:	4b11      	ldr	r3, [pc, #68]	@ (8004dec <prvCheckForValidListAndQueue+0x74>)
 8004da8:	4a11      	ldr	r2, [pc, #68]	@ (8004df0 <prvCheckForValidListAndQueue+0x78>)
 8004daa:	2110      	movs	r1, #16
 8004dac:	200a      	movs	r0, #10
 8004dae:	f7fe f837 	bl	8002e20 <xQueueGenericCreateStatic>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4a08      	ldr	r2, [pc, #32]	@ (8004dd8 <prvCheckForValidListAndQueue+0x60>)
 8004db6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004db8:	4b07      	ldr	r3, [pc, #28]	@ (8004dd8 <prvCheckForValidListAndQueue+0x60>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <prvCheckForValidListAndQueue+0x60>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	490b      	ldr	r1, [pc, #44]	@ (8004df4 <prvCheckForValidListAndQueue+0x7c>)
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fe fd58 	bl	800387c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dcc:	f000 f936 	bl	800503c <vPortExitCritical>
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000d84 	.word	0x20000d84
 8004ddc:	20000d54 	.word	0x20000d54
 8004de0:	20000d68 	.word	0x20000d68
 8004de4:	20000d7c 	.word	0x20000d7c
 8004de8:	20000d80 	.word	0x20000d80
 8004dec:	20000e30 	.word	0x20000e30
 8004df0:	20000d90 	.word	0x20000d90
 8004df4:	0800600c 	.word	0x0800600c

08004df8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3b04      	subs	r3, #4
 8004e08:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	3b04      	subs	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f023 0201 	bic.w	r2, r3, #1
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	3b04      	subs	r3, #4
 8004e26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e28:	4a08      	ldr	r2, [pc, #32]	@ (8004e4c <pxPortInitialiseStack+0x54>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3b14      	subs	r3, #20
 8004e32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	3b20      	subs	r3, #32
 8004e3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e40:	68fb      	ldr	r3, [r7, #12]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	08004e51 	.word	0x08004e51

08004e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ea4 <prvTaskExitError+0x54>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d00b      	beq.n	8004e7c <prvTaskExitError+0x2c>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	60fb      	str	r3, [r7, #12]
}
 8004e76:	bf00      	nop
 8004e78:	bf00      	nop
 8004e7a:	e7fd      	b.n	8004e78 <prvTaskExitError+0x28>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	60bb      	str	r3, [r7, #8]
}
 8004e8e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e90:	bf00      	nop
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0fc      	beq.n	8004e92 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	2000000c 	.word	0x2000000c
	...

08004eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004eb0:	4b07      	ldr	r3, [pc, #28]	@ (8004ed0 <pxCurrentTCBConst2>)
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	6808      	ldr	r0, [r1, #0]
 8004eb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004eba:	f380 8809 	msr	PSP, r0
 8004ebe:	f3bf 8f6f 	isb	sy
 8004ec2:	f04f 0000 	mov.w	r0, #0
 8004ec6:	f380 8811 	msr	BASEPRI, r0
 8004eca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004ece:	4770      	bx	lr

08004ed0 <pxCurrentTCBConst2>:
 8004ed0:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004ed8:	4806      	ldr	r0, [pc, #24]	@ (8004ef4 <prvPortStartFirstTask+0x1c>)
 8004eda:	6800      	ldr	r0, [r0, #0]
 8004edc:	6800      	ldr	r0, [r0, #0]
 8004ede:	f380 8808 	msr	MSP, r0
 8004ee2:	b662      	cpsie	i
 8004ee4:	b661      	cpsie	f
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	df00      	svc	0
 8004ef0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004ef2:	bf00      	nop
 8004ef4:	e000ed08 	.word	0xe000ed08

08004ef8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004efe:	4b32      	ldr	r3, [pc, #200]	@ (8004fc8 <xPortStartScheduler+0xd0>)
 8004f00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	22ff      	movs	r2, #255	@ 0xff
 8004f0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <xPortStartScheduler+0xd4>)
 8004f24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f26:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f28:	2207      	movs	r2, #7
 8004f2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f2c:	e009      	b.n	8004f42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f2e:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	4a26      	ldr	r2, [pc, #152]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b80      	cmp	r3, #128	@ 0x80
 8004f4c:	d0ef      	beq.n	8004f2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f4e:	4b20      	ldr	r3, [pc, #128]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1c3 0307 	rsb	r3, r3, #7
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d00b      	beq.n	8004f72 <xPortStartScheduler+0x7a>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	60bb      	str	r3, [r7, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	bf00      	nop
 8004f70:	e7fd      	b.n	8004f6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f72:	4b17      	ldr	r3, [pc, #92]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f7a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f7c:	4b14      	ldr	r3, [pc, #80]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f84:	4a12      	ldr	r2, [pc, #72]	@ (8004fd0 <xPortStartScheduler+0xd8>)
 8004f86:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f90:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <xPortStartScheduler+0xdc>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a0f      	ldr	r2, [pc, #60]	@ (8004fd4 <xPortStartScheduler+0xdc>)
 8004f96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f9a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8004fd4 <xPortStartScheduler+0xdc>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8004fd4 <xPortStartScheduler+0xdc>)
 8004fa2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fa6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fa8:	f000 f8b8 	bl	800511c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fac:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd8 <xPortStartScheduler+0xe0>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004fb2:	f7ff ff91 	bl	8004ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004fb6:	f7ff f875 	bl	80040a4 <vTaskSwitchContext>
	prvTaskExitError();
 8004fba:	f7ff ff49 	bl	8004e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	e000e400 	.word	0xe000e400
 8004fcc:	20000e80 	.word	0x20000e80
 8004fd0:	20000e84 	.word	0x20000e84
 8004fd4:	e000ed20 	.word	0xe000ed20
 8004fd8:	2000000c 	.word	0x2000000c

08004fdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	607b      	str	r3, [r7, #4]
}
 8004ff4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <vPortEnterCritical+0x58>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8005034 <vPortEnterCritical+0x58>)
 8004ffe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <vPortEnterCritical+0x58>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d110      	bne.n	800502a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005008:	4b0b      	ldr	r3, [pc, #44]	@ (8005038 <vPortEnterCritical+0x5c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <vPortEnterCritical+0x4e>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	603b      	str	r3, [r7, #0]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <vPortEnterCritical+0x4a>
	}
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr
 8005034:	2000000c 	.word	0x2000000c
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005042:	4b12      	ldr	r3, [pc, #72]	@ (800508c <vPortExitCritical+0x50>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <vPortExitCritical+0x26>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	607b      	str	r3, [r7, #4]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005062:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <vPortExitCritical+0x50>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3b01      	subs	r3, #1
 8005068:	4a08      	ldr	r2, [pc, #32]	@ (800508c <vPortExitCritical+0x50>)
 800506a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800506c:	4b07      	ldr	r3, [pc, #28]	@ (800508c <vPortExitCritical+0x50>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d105      	bne.n	8005080 <vPortExitCritical+0x44>
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
}
 800507e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	bc80      	pop	{r7}
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	2000000c 	.word	0x2000000c

08005090 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005090:	f3ef 8009 	mrs	r0, PSP
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4b0d      	ldr	r3, [pc, #52]	@ (80050d0 <pxCurrentTCBConst>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050a0:	6010      	str	r0, [r2, #0]
 80050a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80050a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050aa:	f380 8811 	msr	BASEPRI, r0
 80050ae:	f7fe fff9 	bl	80040a4 <vTaskSwitchContext>
 80050b2:	f04f 0000 	mov.w	r0, #0
 80050b6:	f380 8811 	msr	BASEPRI, r0
 80050ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050be:	6819      	ldr	r1, [r3, #0]
 80050c0:	6808      	ldr	r0, [r1, #0]
 80050c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050c6:	f380 8809 	msr	PSP, r0
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	4770      	bx	lr

080050d0 <pxCurrentTCBConst>:
 80050d0:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop

080050d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	607b      	str	r3, [r7, #4]
}
 80050f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050f2:	f7fe ff1d 	bl	8003f30 <xTaskIncrementTick>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <xPortSysTickHandler+0x40>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	2300      	movs	r3, #0
 8005106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	f383 8811 	msr	BASEPRI, r3
}
 800510e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	e000ed04 	.word	0xe000ed04

0800511c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005120:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <vPortSetupTimerInterrupt+0x30>)
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005126:	4b0a      	ldr	r3, [pc, #40]	@ (8005150 <vPortSetupTimerInterrupt+0x34>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800512c:	4b09      	ldr	r3, [pc, #36]	@ (8005154 <vPortSetupTimerInterrupt+0x38>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a09      	ldr	r2, [pc, #36]	@ (8005158 <vPortSetupTimerInterrupt+0x3c>)
 8005132:	fba2 2303 	umull	r2, r3, r2, r3
 8005136:	099b      	lsrs	r3, r3, #6
 8005138:	4a08      	ldr	r2, [pc, #32]	@ (800515c <vPortSetupTimerInterrupt+0x40>)
 800513a:	3b01      	subs	r3, #1
 800513c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800513e:	4b03      	ldr	r3, [pc, #12]	@ (800514c <vPortSetupTimerInterrupt+0x30>)
 8005140:	2207      	movs	r2, #7
 8005142:	601a      	str	r2, [r3, #0]
}
 8005144:	bf00      	nop
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr
 800514c:	e000e010 	.word	0xe000e010
 8005150:	e000e018 	.word	0xe000e018
 8005154:	20000000 	.word	0x20000000
 8005158:	10624dd3 	.word	0x10624dd3
 800515c:	e000e014 	.word	0xe000e014

08005160 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005166:	f3ef 8305 	mrs	r3, IPSR
 800516a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b0f      	cmp	r3, #15
 8005170:	d915      	bls.n	800519e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005172:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <vPortValidateInterruptPriority+0x70>)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800517c:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <vPortValidateInterruptPriority+0x74>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	7afa      	ldrb	r2, [r7, #11]
 8005182:	429a      	cmp	r2, r3
 8005184:	d20b      	bcs.n	800519e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
 8005196:	607b      	str	r3, [r7, #4]
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	e7fd      	b.n	800519a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800519e:	4b0e      	ldr	r3, [pc, #56]	@ (80051d8 <vPortValidateInterruptPriority+0x78>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051a6:	4b0d      	ldr	r3, [pc, #52]	@ (80051dc <vPortValidateInterruptPriority+0x7c>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d90b      	bls.n	80051c6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	603b      	str	r3, [r7, #0]
}
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
 80051c4:	e7fd      	b.n	80051c2 <vPortValidateInterruptPriority+0x62>
	}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr
 80051d0:	e000e3f0 	.word	0xe000e3f0
 80051d4:	20000e80 	.word	0x20000e80
 80051d8:	e000ed0c 	.word	0xe000ed0c
 80051dc:	20000e84 	.word	0x20000e84

080051e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08a      	sub	sp, #40	@ 0x28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051ec:	f7fe fde6 	bl	8003dbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005364 <pvPortMalloc+0x184>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051f8:	f000 f924 	bl	8005444 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005368 <pvPortMalloc+0x188>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4013      	ands	r3, r2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f040 8095 	bne.w	8005334 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01e      	beq.n	800524e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005210:	2208      	movs	r2, #8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d015      	beq.n	800524e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f023 0307 	bic.w	r3, r3, #7
 8005228:	3308      	adds	r3, #8
 800522a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <pvPortMalloc+0x6e>
	__asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	617b      	str	r3, [r7, #20]
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d06f      	beq.n	8005334 <pvPortMalloc+0x154>
 8005254:	4b45      	ldr	r3, [pc, #276]	@ (800536c <pvPortMalloc+0x18c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	429a      	cmp	r2, r3
 800525c:	d86a      	bhi.n	8005334 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800525e:	4b44      	ldr	r3, [pc, #272]	@ (8005370 <pvPortMalloc+0x190>)
 8005260:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005262:	4b43      	ldr	r3, [pc, #268]	@ (8005370 <pvPortMalloc+0x190>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005268:	e004      	b.n	8005274 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	429a      	cmp	r2, r3
 800527c:	d903      	bls.n	8005286 <pvPortMalloc+0xa6>
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f1      	bne.n	800526a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005286:	4b37      	ldr	r3, [pc, #220]	@ (8005364 <pvPortMalloc+0x184>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528c:	429a      	cmp	r2, r3
 800528e:	d051      	beq.n	8005334 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005290:	6a3b      	ldr	r3, [r7, #32]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2208      	movs	r2, #8
 8005296:	4413      	add	r3, r2
 8005298:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	1ad2      	subs	r2, r2, r3
 80052aa:	2308      	movs	r3, #8
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d920      	bls.n	80052f4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80052b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4413      	add	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00b      	beq.n	80052dc <pvPortMalloc+0xfc>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad2      	subs	r2, r2, r3
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052ee:	69b8      	ldr	r0, [r7, #24]
 80052f0:	f000 f90a 	bl	8005508 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052f4:	4b1d      	ldr	r3, [pc, #116]	@ (800536c <pvPortMalloc+0x18c>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	4a1b      	ldr	r2, [pc, #108]	@ (800536c <pvPortMalloc+0x18c>)
 8005300:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005302:	4b1a      	ldr	r3, [pc, #104]	@ (800536c <pvPortMalloc+0x18c>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4b1b      	ldr	r3, [pc, #108]	@ (8005374 <pvPortMalloc+0x194>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d203      	bcs.n	8005316 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800530e:	4b17      	ldr	r3, [pc, #92]	@ (800536c <pvPortMalloc+0x18c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a18      	ldr	r2, [pc, #96]	@ (8005374 <pvPortMalloc+0x194>)
 8005314:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	4b13      	ldr	r3, [pc, #76]	@ (8005368 <pvPortMalloc+0x188>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	431a      	orrs	r2, r3
 8005320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005322:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005326:	2200      	movs	r2, #0
 8005328:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <pvPortMalloc+0x198>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	4a11      	ldr	r2, [pc, #68]	@ (8005378 <pvPortMalloc+0x198>)
 8005332:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005334:	f7fe fd50 	bl	8003dd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00b      	beq.n	800535a <pvPortMalloc+0x17a>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <pvPortMalloc+0x176>
	return pvReturn;
 800535a:	69fb      	ldr	r3, [r7, #28]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3728      	adds	r7, #40	@ 0x28
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20001a90 	.word	0x20001a90
 8005368:	20001aa4 	.word	0x20001aa4
 800536c:	20001a94 	.word	0x20001a94
 8005370:	20001a88 	.word	0x20001a88
 8005374:	20001a98 	.word	0x20001a98
 8005378:	20001a9c 	.word	0x20001a9c

0800537c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d04f      	beq.n	800542e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800538e:	2308      	movs	r3, #8
 8005390:	425b      	negs	r3, r3
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	4413      	add	r3, r2
 8005396:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	4b25      	ldr	r3, [pc, #148]	@ (8005438 <vPortFree+0xbc>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <vPortFree+0x46>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	60fb      	str	r3, [r7, #12]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <vPortFree+0x66>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	60bb      	str	r3, [r7, #8]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <vPortFree+0xbc>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4013      	ands	r3, r2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01e      	beq.n	800542e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d11a      	bne.n	800542e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <vPortFree+0xbc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	43db      	mvns	r3, r3
 8005402:	401a      	ands	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005408:	f7fe fcd8 	bl	8003dbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <vPortFree+0xc0>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4413      	add	r3, r2
 8005416:	4a09      	ldr	r2, [pc, #36]	@ (800543c <vPortFree+0xc0>)
 8005418:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800541a:	6938      	ldr	r0, [r7, #16]
 800541c:	f000 f874 	bl	8005508 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005420:	4b07      	ldr	r3, [pc, #28]	@ (8005440 <vPortFree+0xc4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3301      	adds	r3, #1
 8005426:	4a06      	ldr	r2, [pc, #24]	@ (8005440 <vPortFree+0xc4>)
 8005428:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800542a:	f7fe fcd5 	bl	8003dd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800542e:	bf00      	nop
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20001aa4 	.word	0x20001aa4
 800543c:	20001a94 	.word	0x20001a94
 8005440:	20001aa0 	.word	0x20001aa0

08005444 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800544a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800544e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005450:	4b27      	ldr	r3, [pc, #156]	@ (80054f0 <prvHeapInit+0xac>)
 8005452:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3307      	adds	r3, #7
 8005462:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0307 	bic.w	r3, r3, #7
 800546a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	4a1f      	ldr	r2, [pc, #124]	@ (80054f0 <prvHeapInit+0xac>)
 8005474:	4413      	add	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800547c:	4a1d      	ldr	r2, [pc, #116]	@ (80054f4 <prvHeapInit+0xb0>)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005482:	4b1c      	ldr	r3, [pc, #112]	@ (80054f4 <prvHeapInit+0xb0>)
 8005484:	2200      	movs	r2, #0
 8005486:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	4413      	add	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005490:	2208      	movs	r2, #8
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1a9b      	subs	r3, r3, r2
 8005496:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0307 	bic.w	r3, r3, #7
 800549e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <prvHeapInit+0xb4>)
 80054a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054a6:	4b14      	ldr	r3, [pc, #80]	@ (80054f8 <prvHeapInit+0xb4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2200      	movs	r2, #0
 80054ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054ae:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <prvHeapInit+0xb4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	1ad2      	subs	r2, r2, r3
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054c4:	4b0c      	ldr	r3, [pc, #48]	@ (80054f8 <prvHeapInit+0xb4>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4a0a      	ldr	r2, [pc, #40]	@ (80054fc <prvHeapInit+0xb8>)
 80054d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4a09      	ldr	r2, [pc, #36]	@ (8005500 <prvHeapInit+0xbc>)
 80054da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054dc:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <prvHeapInit+0xc0>)
 80054de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054e2:	601a      	str	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20000e88 	.word	0x20000e88
 80054f4:	20001a88 	.word	0x20001a88
 80054f8:	20001a90 	.word	0x20001a90
 80054fc:	20001a98 	.word	0x20001a98
 8005500:	20001a94 	.word	0x20001a94
 8005504:	20001aa4 	.word	0x20001aa4

08005508 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005510:	4b27      	ldr	r3, [pc, #156]	@ (80055b0 <prvInsertBlockIntoFreeList+0xa8>)
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e002      	b.n	800551c <prvInsertBlockIntoFreeList+0x14>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d8f7      	bhi.n	8005516 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	4413      	add	r3, r2
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d108      	bne.n	800554a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	441a      	add	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d118      	bne.n	8005590 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b14      	ldr	r3, [pc, #80]	@ (80055b4 <prvInsertBlockIntoFreeList+0xac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d00d      	beq.n	8005586 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e008      	b.n	8005598 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005586:	4b0b      	ldr	r3, [pc, #44]	@ (80055b4 <prvInsertBlockIntoFreeList+0xac>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	e003      	b.n	8005598 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d002      	beq.n	80055a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a6:	bf00      	nop
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr
 80055b0:	20001a88 	.word	0x20001a88
 80055b4:	20001a90 	.word	0x20001a90

080055b8 <siprintf>:
 80055b8:	b40e      	push	{r1, r2, r3}
 80055ba:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80055be:	b510      	push	{r4, lr}
 80055c0:	2400      	movs	r4, #0
 80055c2:	b09d      	sub	sp, #116	@ 0x74
 80055c4:	ab1f      	add	r3, sp, #124	@ 0x7c
 80055c6:	9002      	str	r0, [sp, #8]
 80055c8:	9006      	str	r0, [sp, #24]
 80055ca:	9107      	str	r1, [sp, #28]
 80055cc:	9104      	str	r1, [sp, #16]
 80055ce:	4809      	ldr	r0, [pc, #36]	@ (80055f4 <siprintf+0x3c>)
 80055d0:	4909      	ldr	r1, [pc, #36]	@ (80055f8 <siprintf+0x40>)
 80055d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80055d6:	9105      	str	r1, [sp, #20]
 80055d8:	6800      	ldr	r0, [r0, #0]
 80055da:	a902      	add	r1, sp, #8
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	941b      	str	r4, [sp, #108]	@ 0x6c
 80055e0:	f000 f9a0 	bl	8005924 <_svfiprintf_r>
 80055e4:	9b02      	ldr	r3, [sp, #8]
 80055e6:	701c      	strb	r4, [r3, #0]
 80055e8:	b01d      	add	sp, #116	@ 0x74
 80055ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ee:	b003      	add	sp, #12
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000010 	.word	0x20000010
 80055f8:	ffff0208 	.word	0xffff0208

080055fc <memset>:
 80055fc:	4603      	mov	r3, r0
 80055fe:	4402      	add	r2, r0
 8005600:	4293      	cmp	r3, r2
 8005602:	d100      	bne.n	8005606 <memset+0xa>
 8005604:	4770      	bx	lr
 8005606:	f803 1b01 	strb.w	r1, [r3], #1
 800560a:	e7f9      	b.n	8005600 <memset+0x4>

0800560c <__errno>:
 800560c:	4b01      	ldr	r3, [pc, #4]	@ (8005614 <__errno+0x8>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20000010 	.word	0x20000010

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	2600      	movs	r6, #0
 800561c:	4d0c      	ldr	r5, [pc, #48]	@ (8005650 <__libc_init_array+0x38>)
 800561e:	4c0d      	ldr	r4, [pc, #52]	@ (8005654 <__libc_init_array+0x3c>)
 8005620:	1b64      	subs	r4, r4, r5
 8005622:	10a4      	asrs	r4, r4, #2
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	f000 fc76 	bl	8005f18 <_init>
 800562c:	2600      	movs	r6, #0
 800562e:	4d0a      	ldr	r5, [pc, #40]	@ (8005658 <__libc_init_array+0x40>)
 8005630:	4c0a      	ldr	r4, [pc, #40]	@ (800565c <__libc_init_array+0x44>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	08006118 	.word	0x08006118
 8005654:	08006118 	.word	0x08006118
 8005658:	08006118 	.word	0x08006118
 800565c:	0800611c 	.word	0x0800611c

08005660 <__retarget_lock_acquire_recursive>:
 8005660:	4770      	bx	lr

08005662 <__retarget_lock_release_recursive>:
 8005662:	4770      	bx	lr

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	4291      	cmp	r1, r2
 8005678:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d040      	beq.n	800570a <_free_r+0x8a>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f000 f8de 	bl	8005854 <__malloc_lock>
 8005698:	4a1c      	ldr	r2, [pc, #112]	@ (800570c <_free_r+0x8c>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	b933      	cbnz	r3, 80056ac <_free_r+0x2c>
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	4628      	mov	r0, r5
 80056a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a8:	f000 b8da 	b.w	8005860 <__malloc_unlock>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d908      	bls.n	80056c2 <_free_r+0x42>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf01      	itttt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	1809      	addeq	r1, r1, r0
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	e7ed      	b.n	800569e <_free_r+0x1e>
 80056c2:	461a      	mov	r2, r3
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b10b      	cbz	r3, 80056cc <_free_r+0x4c>
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d9fa      	bls.n	80056c2 <_free_r+0x42>
 80056cc:	6811      	ldr	r1, [r2, #0]
 80056ce:	1850      	adds	r0, r2, r1
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d10b      	bne.n	80056ec <_free_r+0x6c>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	4401      	add	r1, r0
 80056d8:	1850      	adds	r0, r2, r1
 80056da:	4283      	cmp	r3, r0
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	d1e0      	bne.n	80056a2 <_free_r+0x22>
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4408      	add	r0, r1
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	e7da      	b.n	80056a2 <_free_r+0x22>
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x74>
 80056ee:	230c      	movs	r3, #12
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0x22>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	1821      	adds	r1, r4, r0
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1809      	addeq	r1, r1, r0
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6054      	str	r4, [r2, #4]
 8005708:	e7cb      	b.n	80056a2 <_free_r+0x22>
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	20001bec 	.word	0x20001bec

08005710 <sbrk_aligned>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4e0f      	ldr	r6, [pc, #60]	@ (8005750 <sbrk_aligned+0x40>)
 8005714:	460c      	mov	r4, r1
 8005716:	6831      	ldr	r1, [r6, #0]
 8005718:	4605      	mov	r5, r0
 800571a:	b911      	cbnz	r1, 8005722 <sbrk_aligned+0x12>
 800571c:	f000 fba8 	bl	8005e70 <_sbrk_r>
 8005720:	6030      	str	r0, [r6, #0]
 8005722:	4621      	mov	r1, r4
 8005724:	4628      	mov	r0, r5
 8005726:	f000 fba3 	bl	8005e70 <_sbrk_r>
 800572a:	1c43      	adds	r3, r0, #1
 800572c:	d103      	bne.n	8005736 <sbrk_aligned+0x26>
 800572e:	f04f 34ff 	mov.w	r4, #4294967295
 8005732:	4620      	mov	r0, r4
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	1cc4      	adds	r4, r0, #3
 8005738:	f024 0403 	bic.w	r4, r4, #3
 800573c:	42a0      	cmp	r0, r4
 800573e:	d0f8      	beq.n	8005732 <sbrk_aligned+0x22>
 8005740:	1a21      	subs	r1, r4, r0
 8005742:	4628      	mov	r0, r5
 8005744:	f000 fb94 	bl	8005e70 <_sbrk_r>
 8005748:	3001      	adds	r0, #1
 800574a:	d1f2      	bne.n	8005732 <sbrk_aligned+0x22>
 800574c:	e7ef      	b.n	800572e <sbrk_aligned+0x1e>
 800574e:	bf00      	nop
 8005750:	20001be8 	.word	0x20001be8

08005754 <_malloc_r>:
 8005754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005758:	1ccd      	adds	r5, r1, #3
 800575a:	f025 0503 	bic.w	r5, r5, #3
 800575e:	3508      	adds	r5, #8
 8005760:	2d0c      	cmp	r5, #12
 8005762:	bf38      	it	cc
 8005764:	250c      	movcc	r5, #12
 8005766:	2d00      	cmp	r5, #0
 8005768:	4606      	mov	r6, r0
 800576a:	db01      	blt.n	8005770 <_malloc_r+0x1c>
 800576c:	42a9      	cmp	r1, r5
 800576e:	d904      	bls.n	800577a <_malloc_r+0x26>
 8005770:	230c      	movs	r3, #12
 8005772:	6033      	str	r3, [r6, #0]
 8005774:	2000      	movs	r0, #0
 8005776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800577a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005850 <_malloc_r+0xfc>
 800577e:	f000 f869 	bl	8005854 <__malloc_lock>
 8005782:	f8d8 3000 	ldr.w	r3, [r8]
 8005786:	461c      	mov	r4, r3
 8005788:	bb44      	cbnz	r4, 80057dc <_malloc_r+0x88>
 800578a:	4629      	mov	r1, r5
 800578c:	4630      	mov	r0, r6
 800578e:	f7ff ffbf 	bl	8005710 <sbrk_aligned>
 8005792:	1c43      	adds	r3, r0, #1
 8005794:	4604      	mov	r4, r0
 8005796:	d158      	bne.n	800584a <_malloc_r+0xf6>
 8005798:	f8d8 4000 	ldr.w	r4, [r8]
 800579c:	4627      	mov	r7, r4
 800579e:	2f00      	cmp	r7, #0
 80057a0:	d143      	bne.n	800582a <_malloc_r+0xd6>
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	d04b      	beq.n	800583e <_malloc_r+0xea>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	4639      	mov	r1, r7
 80057aa:	4630      	mov	r0, r6
 80057ac:	eb04 0903 	add.w	r9, r4, r3
 80057b0:	f000 fb5e 	bl	8005e70 <_sbrk_r>
 80057b4:	4581      	cmp	r9, r0
 80057b6:	d142      	bne.n	800583e <_malloc_r+0xea>
 80057b8:	6821      	ldr	r1, [r4, #0]
 80057ba:	4630      	mov	r0, r6
 80057bc:	1a6d      	subs	r5, r5, r1
 80057be:	4629      	mov	r1, r5
 80057c0:	f7ff ffa6 	bl	8005710 <sbrk_aligned>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d03a      	beq.n	800583e <_malloc_r+0xea>
 80057c8:	6823      	ldr	r3, [r4, #0]
 80057ca:	442b      	add	r3, r5
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	f8d8 3000 	ldr.w	r3, [r8]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	bb62      	cbnz	r2, 8005830 <_malloc_r+0xdc>
 80057d6:	f8c8 7000 	str.w	r7, [r8]
 80057da:	e00f      	b.n	80057fc <_malloc_r+0xa8>
 80057dc:	6822      	ldr	r2, [r4, #0]
 80057de:	1b52      	subs	r2, r2, r5
 80057e0:	d420      	bmi.n	8005824 <_malloc_r+0xd0>
 80057e2:	2a0b      	cmp	r2, #11
 80057e4:	d917      	bls.n	8005816 <_malloc_r+0xc2>
 80057e6:	1961      	adds	r1, r4, r5
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	6025      	str	r5, [r4, #0]
 80057ec:	bf18      	it	ne
 80057ee:	6059      	strne	r1, [r3, #4]
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	bf08      	it	eq
 80057f4:	f8c8 1000 	streq.w	r1, [r8]
 80057f8:	5162      	str	r2, [r4, r5]
 80057fa:	604b      	str	r3, [r1, #4]
 80057fc:	4630      	mov	r0, r6
 80057fe:	f000 f82f 	bl	8005860 <__malloc_unlock>
 8005802:	f104 000b 	add.w	r0, r4, #11
 8005806:	1d23      	adds	r3, r4, #4
 8005808:	f020 0007 	bic.w	r0, r0, #7
 800580c:	1ac2      	subs	r2, r0, r3
 800580e:	bf1c      	itt	ne
 8005810:	1a1b      	subne	r3, r3, r0
 8005812:	50a3      	strne	r3, [r4, r2]
 8005814:	e7af      	b.n	8005776 <_malloc_r+0x22>
 8005816:	6862      	ldr	r2, [r4, #4]
 8005818:	42a3      	cmp	r3, r4
 800581a:	bf0c      	ite	eq
 800581c:	f8c8 2000 	streq.w	r2, [r8]
 8005820:	605a      	strne	r2, [r3, #4]
 8005822:	e7eb      	b.n	80057fc <_malloc_r+0xa8>
 8005824:	4623      	mov	r3, r4
 8005826:	6864      	ldr	r4, [r4, #4]
 8005828:	e7ae      	b.n	8005788 <_malloc_r+0x34>
 800582a:	463c      	mov	r4, r7
 800582c:	687f      	ldr	r7, [r7, #4]
 800582e:	e7b6      	b.n	800579e <_malloc_r+0x4a>
 8005830:	461a      	mov	r2, r3
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	42a3      	cmp	r3, r4
 8005836:	d1fb      	bne.n	8005830 <_malloc_r+0xdc>
 8005838:	2300      	movs	r3, #0
 800583a:	6053      	str	r3, [r2, #4]
 800583c:	e7de      	b.n	80057fc <_malloc_r+0xa8>
 800583e:	230c      	movs	r3, #12
 8005840:	4630      	mov	r0, r6
 8005842:	6033      	str	r3, [r6, #0]
 8005844:	f000 f80c 	bl	8005860 <__malloc_unlock>
 8005848:	e794      	b.n	8005774 <_malloc_r+0x20>
 800584a:	6005      	str	r5, [r0, #0]
 800584c:	e7d6      	b.n	80057fc <_malloc_r+0xa8>
 800584e:	bf00      	nop
 8005850:	20001bec 	.word	0x20001bec

08005854 <__malloc_lock>:
 8005854:	4801      	ldr	r0, [pc, #4]	@ (800585c <__malloc_lock+0x8>)
 8005856:	f7ff bf03 	b.w	8005660 <__retarget_lock_acquire_recursive>
 800585a:	bf00      	nop
 800585c:	20001be4 	.word	0x20001be4

08005860 <__malloc_unlock>:
 8005860:	4801      	ldr	r0, [pc, #4]	@ (8005868 <__malloc_unlock+0x8>)
 8005862:	f7ff befe 	b.w	8005662 <__retarget_lock_release_recursive>
 8005866:	bf00      	nop
 8005868:	20001be4 	.word	0x20001be4

0800586c <__ssputs_r>:
 800586c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005870:	461f      	mov	r7, r3
 8005872:	688e      	ldr	r6, [r1, #8]
 8005874:	4682      	mov	sl, r0
 8005876:	42be      	cmp	r6, r7
 8005878:	460c      	mov	r4, r1
 800587a:	4690      	mov	r8, r2
 800587c:	680b      	ldr	r3, [r1, #0]
 800587e:	d82d      	bhi.n	80058dc <__ssputs_r+0x70>
 8005880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005888:	d026      	beq.n	80058d8 <__ssputs_r+0x6c>
 800588a:	6965      	ldr	r5, [r4, #20]
 800588c:	6909      	ldr	r1, [r1, #16]
 800588e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005892:	eba3 0901 	sub.w	r9, r3, r1
 8005896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800589a:	1c7b      	adds	r3, r7, #1
 800589c:	444b      	add	r3, r9
 800589e:	106d      	asrs	r5, r5, #1
 80058a0:	429d      	cmp	r5, r3
 80058a2:	bf38      	it	cc
 80058a4:	461d      	movcc	r5, r3
 80058a6:	0553      	lsls	r3, r2, #21
 80058a8:	d527      	bpl.n	80058fa <__ssputs_r+0x8e>
 80058aa:	4629      	mov	r1, r5
 80058ac:	f7ff ff52 	bl	8005754 <_malloc_r>
 80058b0:	4606      	mov	r6, r0
 80058b2:	b360      	cbz	r0, 800590e <__ssputs_r+0xa2>
 80058b4:	464a      	mov	r2, r9
 80058b6:	6921      	ldr	r1, [r4, #16]
 80058b8:	f7ff fed4 	bl	8005664 <memcpy>
 80058bc:	89a3      	ldrh	r3, [r4, #12]
 80058be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80058c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	6126      	str	r6, [r4, #16]
 80058ca:	444e      	add	r6, r9
 80058cc:	6026      	str	r6, [r4, #0]
 80058ce:	463e      	mov	r6, r7
 80058d0:	6165      	str	r5, [r4, #20]
 80058d2:	eba5 0509 	sub.w	r5, r5, r9
 80058d6:	60a5      	str	r5, [r4, #8]
 80058d8:	42be      	cmp	r6, r7
 80058da:	d900      	bls.n	80058de <__ssputs_r+0x72>
 80058dc:	463e      	mov	r6, r7
 80058de:	4632      	mov	r2, r6
 80058e0:	4641      	mov	r1, r8
 80058e2:	6820      	ldr	r0, [r4, #0]
 80058e4:	f000 faaa 	bl	8005e3c <memmove>
 80058e8:	2000      	movs	r0, #0
 80058ea:	68a3      	ldr	r3, [r4, #8]
 80058ec:	1b9b      	subs	r3, r3, r6
 80058ee:	60a3      	str	r3, [r4, #8]
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	4433      	add	r3, r6
 80058f4:	6023      	str	r3, [r4, #0]
 80058f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058fa:	462a      	mov	r2, r5
 80058fc:	f000 fad6 	bl	8005eac <_realloc_r>
 8005900:	4606      	mov	r6, r0
 8005902:	2800      	cmp	r0, #0
 8005904:	d1e0      	bne.n	80058c8 <__ssputs_r+0x5c>
 8005906:	4650      	mov	r0, sl
 8005908:	6921      	ldr	r1, [r4, #16]
 800590a:	f7ff feb9 	bl	8005680 <_free_r>
 800590e:	230c      	movs	r3, #12
 8005910:	f8ca 3000 	str.w	r3, [sl]
 8005914:	89a3      	ldrh	r3, [r4, #12]
 8005916:	f04f 30ff 	mov.w	r0, #4294967295
 800591a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800591e:	81a3      	strh	r3, [r4, #12]
 8005920:	e7e9      	b.n	80058f6 <__ssputs_r+0x8a>
	...

08005924 <_svfiprintf_r>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	4698      	mov	r8, r3
 800592a:	898b      	ldrh	r3, [r1, #12]
 800592c:	4607      	mov	r7, r0
 800592e:	061b      	lsls	r3, r3, #24
 8005930:	460d      	mov	r5, r1
 8005932:	4614      	mov	r4, r2
 8005934:	b09d      	sub	sp, #116	@ 0x74
 8005936:	d510      	bpl.n	800595a <_svfiprintf_r+0x36>
 8005938:	690b      	ldr	r3, [r1, #16]
 800593a:	b973      	cbnz	r3, 800595a <_svfiprintf_r+0x36>
 800593c:	2140      	movs	r1, #64	@ 0x40
 800593e:	f7ff ff09 	bl	8005754 <_malloc_r>
 8005942:	6028      	str	r0, [r5, #0]
 8005944:	6128      	str	r0, [r5, #16]
 8005946:	b930      	cbnz	r0, 8005956 <_svfiprintf_r+0x32>
 8005948:	230c      	movs	r3, #12
 800594a:	603b      	str	r3, [r7, #0]
 800594c:	f04f 30ff 	mov.w	r0, #4294967295
 8005950:	b01d      	add	sp, #116	@ 0x74
 8005952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005956:	2340      	movs	r3, #64	@ 0x40
 8005958:	616b      	str	r3, [r5, #20]
 800595a:	2300      	movs	r3, #0
 800595c:	9309      	str	r3, [sp, #36]	@ 0x24
 800595e:	2320      	movs	r3, #32
 8005960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005964:	2330      	movs	r3, #48	@ 0x30
 8005966:	f04f 0901 	mov.w	r9, #1
 800596a:	f8cd 800c 	str.w	r8, [sp, #12]
 800596e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005b08 <_svfiprintf_r+0x1e4>
 8005972:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005976:	4623      	mov	r3, r4
 8005978:	469a      	mov	sl, r3
 800597a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800597e:	b10a      	cbz	r2, 8005984 <_svfiprintf_r+0x60>
 8005980:	2a25      	cmp	r2, #37	@ 0x25
 8005982:	d1f9      	bne.n	8005978 <_svfiprintf_r+0x54>
 8005984:	ebba 0b04 	subs.w	fp, sl, r4
 8005988:	d00b      	beq.n	80059a2 <_svfiprintf_r+0x7e>
 800598a:	465b      	mov	r3, fp
 800598c:	4622      	mov	r2, r4
 800598e:	4629      	mov	r1, r5
 8005990:	4638      	mov	r0, r7
 8005992:	f7ff ff6b 	bl	800586c <__ssputs_r>
 8005996:	3001      	adds	r0, #1
 8005998:	f000 80a7 	beq.w	8005aea <_svfiprintf_r+0x1c6>
 800599c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800599e:	445a      	add	r2, fp
 80059a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80059a2:	f89a 3000 	ldrb.w	r3, [sl]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 809f 	beq.w	8005aea <_svfiprintf_r+0x1c6>
 80059ac:	2300      	movs	r3, #0
 80059ae:	f04f 32ff 	mov.w	r2, #4294967295
 80059b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059b6:	f10a 0a01 	add.w	sl, sl, #1
 80059ba:	9304      	str	r3, [sp, #16]
 80059bc:	9307      	str	r3, [sp, #28]
 80059be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80059c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80059c4:	4654      	mov	r4, sl
 80059c6:	2205      	movs	r2, #5
 80059c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059cc:	484e      	ldr	r0, [pc, #312]	@ (8005b08 <_svfiprintf_r+0x1e4>)
 80059ce:	f000 fa5f 	bl	8005e90 <memchr>
 80059d2:	9a04      	ldr	r2, [sp, #16]
 80059d4:	b9d8      	cbnz	r0, 8005a0e <_svfiprintf_r+0xea>
 80059d6:	06d0      	lsls	r0, r2, #27
 80059d8:	bf44      	itt	mi
 80059da:	2320      	movmi	r3, #32
 80059dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059e0:	0711      	lsls	r1, r2, #28
 80059e2:	bf44      	itt	mi
 80059e4:	232b      	movmi	r3, #43	@ 0x2b
 80059e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059ea:	f89a 3000 	ldrb.w	r3, [sl]
 80059ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80059f0:	d015      	beq.n	8005a1e <_svfiprintf_r+0xfa>
 80059f2:	4654      	mov	r4, sl
 80059f4:	2000      	movs	r0, #0
 80059f6:	f04f 0c0a 	mov.w	ip, #10
 80059fa:	9a07      	ldr	r2, [sp, #28]
 80059fc:	4621      	mov	r1, r4
 80059fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a02:	3b30      	subs	r3, #48	@ 0x30
 8005a04:	2b09      	cmp	r3, #9
 8005a06:	d94b      	bls.n	8005aa0 <_svfiprintf_r+0x17c>
 8005a08:	b1b0      	cbz	r0, 8005a38 <_svfiprintf_r+0x114>
 8005a0a:	9207      	str	r2, [sp, #28]
 8005a0c:	e014      	b.n	8005a38 <_svfiprintf_r+0x114>
 8005a0e:	eba0 0308 	sub.w	r3, r0, r8
 8005a12:	fa09 f303 	lsl.w	r3, r9, r3
 8005a16:	4313      	orrs	r3, r2
 8005a18:	46a2      	mov	sl, r4
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	e7d2      	b.n	80059c4 <_svfiprintf_r+0xa0>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	1d19      	adds	r1, r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	9103      	str	r1, [sp, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfbb      	ittet	lt
 8005a2a:	425b      	neglt	r3, r3
 8005a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a30:	9307      	strge	r3, [sp, #28]
 8005a32:	9307      	strlt	r3, [sp, #28]
 8005a34:	bfb8      	it	lt
 8005a36:	9204      	strlt	r2, [sp, #16]
 8005a38:	7823      	ldrb	r3, [r4, #0]
 8005a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a3c:	d10a      	bne.n	8005a54 <_svfiprintf_r+0x130>
 8005a3e:	7863      	ldrb	r3, [r4, #1]
 8005a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a42:	d132      	bne.n	8005aaa <_svfiprintf_r+0x186>
 8005a44:	9b03      	ldr	r3, [sp, #12]
 8005a46:	3402      	adds	r4, #2
 8005a48:	1d1a      	adds	r2, r3, #4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	9203      	str	r2, [sp, #12]
 8005a4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a52:	9305      	str	r3, [sp, #20]
 8005a54:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005b0c <_svfiprintf_r+0x1e8>
 8005a58:	2203      	movs	r2, #3
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	7821      	ldrb	r1, [r4, #0]
 8005a5e:	f000 fa17 	bl	8005e90 <memchr>
 8005a62:	b138      	cbz	r0, 8005a74 <_svfiprintf_r+0x150>
 8005a64:	2240      	movs	r2, #64	@ 0x40
 8005a66:	9b04      	ldr	r3, [sp, #16]
 8005a68:	eba0 000a 	sub.w	r0, r0, sl
 8005a6c:	4082      	lsls	r2, r0
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	3401      	adds	r4, #1
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a78:	2206      	movs	r2, #6
 8005a7a:	4825      	ldr	r0, [pc, #148]	@ (8005b10 <_svfiprintf_r+0x1ec>)
 8005a7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a80:	f000 fa06 	bl	8005e90 <memchr>
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d036      	beq.n	8005af6 <_svfiprintf_r+0x1d2>
 8005a88:	4b22      	ldr	r3, [pc, #136]	@ (8005b14 <_svfiprintf_r+0x1f0>)
 8005a8a:	bb1b      	cbnz	r3, 8005ad4 <_svfiprintf_r+0x1b0>
 8005a8c:	9b03      	ldr	r3, [sp, #12]
 8005a8e:	3307      	adds	r3, #7
 8005a90:	f023 0307 	bic.w	r3, r3, #7
 8005a94:	3308      	adds	r3, #8
 8005a96:	9303      	str	r3, [sp, #12]
 8005a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a9a:	4433      	add	r3, r6
 8005a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a9e:	e76a      	b.n	8005976 <_svfiprintf_r+0x52>
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	2001      	movs	r0, #1
 8005aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aa8:	e7a8      	b.n	80059fc <_svfiprintf_r+0xd8>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	f04f 0c0a 	mov.w	ip, #10
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	3401      	adds	r4, #1
 8005ab4:	9305      	str	r3, [sp, #20]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005abc:	3a30      	subs	r2, #48	@ 0x30
 8005abe:	2a09      	cmp	r2, #9
 8005ac0:	d903      	bls.n	8005aca <_svfiprintf_r+0x1a6>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d0c6      	beq.n	8005a54 <_svfiprintf_r+0x130>
 8005ac6:	9105      	str	r1, [sp, #20]
 8005ac8:	e7c4      	b.n	8005a54 <_svfiprintf_r+0x130>
 8005aca:	4604      	mov	r4, r0
 8005acc:	2301      	movs	r3, #1
 8005ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad2:	e7f0      	b.n	8005ab6 <_svfiprintf_r+0x192>
 8005ad4:	ab03      	add	r3, sp, #12
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	462a      	mov	r2, r5
 8005ada:	4638      	mov	r0, r7
 8005adc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b18 <_svfiprintf_r+0x1f4>)
 8005ade:	a904      	add	r1, sp, #16
 8005ae0:	f3af 8000 	nop.w
 8005ae4:	1c42      	adds	r2, r0, #1
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	d1d6      	bne.n	8005a98 <_svfiprintf_r+0x174>
 8005aea:	89ab      	ldrh	r3, [r5, #12]
 8005aec:	065b      	lsls	r3, r3, #25
 8005aee:	f53f af2d 	bmi.w	800594c <_svfiprintf_r+0x28>
 8005af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005af4:	e72c      	b.n	8005950 <_svfiprintf_r+0x2c>
 8005af6:	ab03      	add	r3, sp, #12
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	462a      	mov	r2, r5
 8005afc:	4638      	mov	r0, r7
 8005afe:	4b06      	ldr	r3, [pc, #24]	@ (8005b18 <_svfiprintf_r+0x1f4>)
 8005b00:	a904      	add	r1, sp, #16
 8005b02:	f000 f87d 	bl	8005c00 <_printf_i>
 8005b06:	e7ed      	b.n	8005ae4 <_svfiprintf_r+0x1c0>
 8005b08:	080060da 	.word	0x080060da
 8005b0c:	080060e0 	.word	0x080060e0
 8005b10:	080060e4 	.word	0x080060e4
 8005b14:	00000000 	.word	0x00000000
 8005b18:	0800586d 	.word	0x0800586d

08005b1c <_printf_common>:
 8005b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b20:	4616      	mov	r6, r2
 8005b22:	4698      	mov	r8, r3
 8005b24:	688a      	ldr	r2, [r1, #8]
 8005b26:	690b      	ldr	r3, [r1, #16]
 8005b28:	4607      	mov	r7, r0
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	bfb8      	it	lt
 8005b2e:	4613      	movlt	r3, r2
 8005b30:	6033      	str	r3, [r6, #0]
 8005b32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b36:	460c      	mov	r4, r1
 8005b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005b3c:	b10a      	cbz	r2, 8005b42 <_printf_common+0x26>
 8005b3e:	3301      	adds	r3, #1
 8005b40:	6033      	str	r3, [r6, #0]
 8005b42:	6823      	ldr	r3, [r4, #0]
 8005b44:	0699      	lsls	r1, r3, #26
 8005b46:	bf42      	ittt	mi
 8005b48:	6833      	ldrmi	r3, [r6, #0]
 8005b4a:	3302      	addmi	r3, #2
 8005b4c:	6033      	strmi	r3, [r6, #0]
 8005b4e:	6825      	ldr	r5, [r4, #0]
 8005b50:	f015 0506 	ands.w	r5, r5, #6
 8005b54:	d106      	bne.n	8005b64 <_printf_common+0x48>
 8005b56:	f104 0a19 	add.w	sl, r4, #25
 8005b5a:	68e3      	ldr	r3, [r4, #12]
 8005b5c:	6832      	ldr	r2, [r6, #0]
 8005b5e:	1a9b      	subs	r3, r3, r2
 8005b60:	42ab      	cmp	r3, r5
 8005b62:	dc2b      	bgt.n	8005bbc <_printf_common+0xa0>
 8005b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	3b00      	subs	r3, #0
 8005b6c:	bf18      	it	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	0692      	lsls	r2, r2, #26
 8005b72:	d430      	bmi.n	8005bd6 <_printf_common+0xba>
 8005b74:	4641      	mov	r1, r8
 8005b76:	4638      	mov	r0, r7
 8005b78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b7c:	47c8      	blx	r9
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d023      	beq.n	8005bca <_printf_common+0xae>
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	6922      	ldr	r2, [r4, #16]
 8005b86:	f003 0306 	and.w	r3, r3, #6
 8005b8a:	2b04      	cmp	r3, #4
 8005b8c:	bf14      	ite	ne
 8005b8e:	2500      	movne	r5, #0
 8005b90:	6833      	ldreq	r3, [r6, #0]
 8005b92:	f04f 0600 	mov.w	r6, #0
 8005b96:	bf08      	it	eq
 8005b98:	68e5      	ldreq	r5, [r4, #12]
 8005b9a:	f104 041a 	add.w	r4, r4, #26
 8005b9e:	bf08      	it	eq
 8005ba0:	1aed      	subeq	r5, r5, r3
 8005ba2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005ba6:	bf08      	it	eq
 8005ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bac:	4293      	cmp	r3, r2
 8005bae:	bfc4      	itt	gt
 8005bb0:	1a9b      	subgt	r3, r3, r2
 8005bb2:	18ed      	addgt	r5, r5, r3
 8005bb4:	42b5      	cmp	r5, r6
 8005bb6:	d11a      	bne.n	8005bee <_printf_common+0xd2>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	e008      	b.n	8005bce <_printf_common+0xb2>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	4652      	mov	r2, sl
 8005bc0:	4641      	mov	r1, r8
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	47c8      	blx	r9
 8005bc6:	3001      	adds	r0, #1
 8005bc8:	d103      	bne.n	8005bd2 <_printf_common+0xb6>
 8005bca:	f04f 30ff 	mov.w	r0, #4294967295
 8005bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd2:	3501      	adds	r5, #1
 8005bd4:	e7c1      	b.n	8005b5a <_printf_common+0x3e>
 8005bd6:	2030      	movs	r0, #48	@ 0x30
 8005bd8:	18e1      	adds	r1, r4, r3
 8005bda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005be4:	4422      	add	r2, r4
 8005be6:	3302      	adds	r3, #2
 8005be8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bec:	e7c2      	b.n	8005b74 <_printf_common+0x58>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4622      	mov	r2, r4
 8005bf2:	4641      	mov	r1, r8
 8005bf4:	4638      	mov	r0, r7
 8005bf6:	47c8      	blx	r9
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0e6      	beq.n	8005bca <_printf_common+0xae>
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7d9      	b.n	8005bb4 <_printf_common+0x98>

08005c00 <_printf_i>:
 8005c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c04:	7e0f      	ldrb	r7, [r1, #24]
 8005c06:	4691      	mov	r9, r2
 8005c08:	2f78      	cmp	r7, #120	@ 0x78
 8005c0a:	4680      	mov	r8, r0
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	469a      	mov	sl, r3
 8005c10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c16:	d807      	bhi.n	8005c28 <_printf_i+0x28>
 8005c18:	2f62      	cmp	r7, #98	@ 0x62
 8005c1a:	d80a      	bhi.n	8005c32 <_printf_i+0x32>
 8005c1c:	2f00      	cmp	r7, #0
 8005c1e:	f000 80d1 	beq.w	8005dc4 <_printf_i+0x1c4>
 8005c22:	2f58      	cmp	r7, #88	@ 0x58
 8005c24:	f000 80b8 	beq.w	8005d98 <_printf_i+0x198>
 8005c28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005c30:	e03a      	b.n	8005ca8 <_printf_i+0xa8>
 8005c32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005c36:	2b15      	cmp	r3, #21
 8005c38:	d8f6      	bhi.n	8005c28 <_printf_i+0x28>
 8005c3a:	a101      	add	r1, pc, #4	@ (adr r1, 8005c40 <_printf_i+0x40>)
 8005c3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c40:	08005c99 	.word	0x08005c99
 8005c44:	08005cad 	.word	0x08005cad
 8005c48:	08005c29 	.word	0x08005c29
 8005c4c:	08005c29 	.word	0x08005c29
 8005c50:	08005c29 	.word	0x08005c29
 8005c54:	08005c29 	.word	0x08005c29
 8005c58:	08005cad 	.word	0x08005cad
 8005c5c:	08005c29 	.word	0x08005c29
 8005c60:	08005c29 	.word	0x08005c29
 8005c64:	08005c29 	.word	0x08005c29
 8005c68:	08005c29 	.word	0x08005c29
 8005c6c:	08005dab 	.word	0x08005dab
 8005c70:	08005cd7 	.word	0x08005cd7
 8005c74:	08005d65 	.word	0x08005d65
 8005c78:	08005c29 	.word	0x08005c29
 8005c7c:	08005c29 	.word	0x08005c29
 8005c80:	08005dcd 	.word	0x08005dcd
 8005c84:	08005c29 	.word	0x08005c29
 8005c88:	08005cd7 	.word	0x08005cd7
 8005c8c:	08005c29 	.word	0x08005c29
 8005c90:	08005c29 	.word	0x08005c29
 8005c94:	08005d6d 	.word	0x08005d6d
 8005c98:	6833      	ldr	r3, [r6, #0]
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6032      	str	r2, [r6, #0]
 8005ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ca4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e09c      	b.n	8005de6 <_printf_i+0x1e6>
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	6820      	ldr	r0, [r4, #0]
 8005cb0:	1d19      	adds	r1, r3, #4
 8005cb2:	6031      	str	r1, [r6, #0]
 8005cb4:	0606      	lsls	r6, r0, #24
 8005cb6:	d501      	bpl.n	8005cbc <_printf_i+0xbc>
 8005cb8:	681d      	ldr	r5, [r3, #0]
 8005cba:	e003      	b.n	8005cc4 <_printf_i+0xc4>
 8005cbc:	0645      	lsls	r5, r0, #25
 8005cbe:	d5fb      	bpl.n	8005cb8 <_printf_i+0xb8>
 8005cc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005cc4:	2d00      	cmp	r5, #0
 8005cc6:	da03      	bge.n	8005cd0 <_printf_i+0xd0>
 8005cc8:	232d      	movs	r3, #45	@ 0x2d
 8005cca:	426d      	negs	r5, r5
 8005ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cd0:	230a      	movs	r3, #10
 8005cd2:	4858      	ldr	r0, [pc, #352]	@ (8005e34 <_printf_i+0x234>)
 8005cd4:	e011      	b.n	8005cfa <_printf_i+0xfa>
 8005cd6:	6821      	ldr	r1, [r4, #0]
 8005cd8:	6833      	ldr	r3, [r6, #0]
 8005cda:	0608      	lsls	r0, r1, #24
 8005cdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ce0:	d402      	bmi.n	8005ce8 <_printf_i+0xe8>
 8005ce2:	0649      	lsls	r1, r1, #25
 8005ce4:	bf48      	it	mi
 8005ce6:	b2ad      	uxthmi	r5, r5
 8005ce8:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	bf14      	ite	ne
 8005cee:	230a      	movne	r3, #10
 8005cf0:	2308      	moveq	r3, #8
 8005cf2:	4850      	ldr	r0, [pc, #320]	@ (8005e34 <_printf_i+0x234>)
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cfa:	6866      	ldr	r6, [r4, #4]
 8005cfc:	2e00      	cmp	r6, #0
 8005cfe:	60a6      	str	r6, [r4, #8]
 8005d00:	db05      	blt.n	8005d0e <_printf_i+0x10e>
 8005d02:	6821      	ldr	r1, [r4, #0]
 8005d04:	432e      	orrs	r6, r5
 8005d06:	f021 0104 	bic.w	r1, r1, #4
 8005d0a:	6021      	str	r1, [r4, #0]
 8005d0c:	d04b      	beq.n	8005da6 <_printf_i+0x1a6>
 8005d0e:	4616      	mov	r6, r2
 8005d10:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d14:	fb03 5711 	mls	r7, r3, r1, r5
 8005d18:	5dc7      	ldrb	r7, [r0, r7]
 8005d1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d1e:	462f      	mov	r7, r5
 8005d20:	42bb      	cmp	r3, r7
 8005d22:	460d      	mov	r5, r1
 8005d24:	d9f4      	bls.n	8005d10 <_printf_i+0x110>
 8005d26:	2b08      	cmp	r3, #8
 8005d28:	d10b      	bne.n	8005d42 <_printf_i+0x142>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	07df      	lsls	r7, r3, #31
 8005d2e:	d508      	bpl.n	8005d42 <_printf_i+0x142>
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	6861      	ldr	r1, [r4, #4]
 8005d34:	4299      	cmp	r1, r3
 8005d36:	bfde      	ittt	le
 8005d38:	2330      	movle	r3, #48	@ 0x30
 8005d3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d42:	1b92      	subs	r2, r2, r6
 8005d44:	6122      	str	r2, [r4, #16]
 8005d46:	464b      	mov	r3, r9
 8005d48:	4621      	mov	r1, r4
 8005d4a:	4640      	mov	r0, r8
 8005d4c:	f8cd a000 	str.w	sl, [sp]
 8005d50:	aa03      	add	r2, sp, #12
 8005d52:	f7ff fee3 	bl	8005b1c <_printf_common>
 8005d56:	3001      	adds	r0, #1
 8005d58:	d14a      	bne.n	8005df0 <_printf_i+0x1f0>
 8005d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5e:	b004      	add	sp, #16
 8005d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	f043 0320 	orr.w	r3, r3, #32
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	2778      	movs	r7, #120	@ 0x78
 8005d6e:	4832      	ldr	r0, [pc, #200]	@ (8005e38 <_printf_i+0x238>)
 8005d70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d74:	6823      	ldr	r3, [r4, #0]
 8005d76:	6831      	ldr	r1, [r6, #0]
 8005d78:	061f      	lsls	r7, r3, #24
 8005d7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d7e:	d402      	bmi.n	8005d86 <_printf_i+0x186>
 8005d80:	065f      	lsls	r7, r3, #25
 8005d82:	bf48      	it	mi
 8005d84:	b2ad      	uxthmi	r5, r5
 8005d86:	6031      	str	r1, [r6, #0]
 8005d88:	07d9      	lsls	r1, r3, #31
 8005d8a:	bf44      	itt	mi
 8005d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d90:	6023      	strmi	r3, [r4, #0]
 8005d92:	b11d      	cbz	r5, 8005d9c <_printf_i+0x19c>
 8005d94:	2310      	movs	r3, #16
 8005d96:	e7ad      	b.n	8005cf4 <_printf_i+0xf4>
 8005d98:	4826      	ldr	r0, [pc, #152]	@ (8005e34 <_printf_i+0x234>)
 8005d9a:	e7e9      	b.n	8005d70 <_printf_i+0x170>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	f023 0320 	bic.w	r3, r3, #32
 8005da2:	6023      	str	r3, [r4, #0]
 8005da4:	e7f6      	b.n	8005d94 <_printf_i+0x194>
 8005da6:	4616      	mov	r6, r2
 8005da8:	e7bd      	b.n	8005d26 <_printf_i+0x126>
 8005daa:	6833      	ldr	r3, [r6, #0]
 8005dac:	6825      	ldr	r5, [r4, #0]
 8005dae:	1d18      	adds	r0, r3, #4
 8005db0:	6961      	ldr	r1, [r4, #20]
 8005db2:	6030      	str	r0, [r6, #0]
 8005db4:	062e      	lsls	r6, r5, #24
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	d501      	bpl.n	8005dbe <_printf_i+0x1be>
 8005dba:	6019      	str	r1, [r3, #0]
 8005dbc:	e002      	b.n	8005dc4 <_printf_i+0x1c4>
 8005dbe:	0668      	lsls	r0, r5, #25
 8005dc0:	d5fb      	bpl.n	8005dba <_printf_i+0x1ba>
 8005dc2:	8019      	strh	r1, [r3, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	4616      	mov	r6, r2
 8005dc8:	6123      	str	r3, [r4, #16]
 8005dca:	e7bc      	b.n	8005d46 <_printf_i+0x146>
 8005dcc:	6833      	ldr	r3, [r6, #0]
 8005dce:	2100      	movs	r1, #0
 8005dd0:	1d1a      	adds	r2, r3, #4
 8005dd2:	6032      	str	r2, [r6, #0]
 8005dd4:	681e      	ldr	r6, [r3, #0]
 8005dd6:	6862      	ldr	r2, [r4, #4]
 8005dd8:	4630      	mov	r0, r6
 8005dda:	f000 f859 	bl	8005e90 <memchr>
 8005dde:	b108      	cbz	r0, 8005de4 <_printf_i+0x1e4>
 8005de0:	1b80      	subs	r0, r0, r6
 8005de2:	6060      	str	r0, [r4, #4]
 8005de4:	6863      	ldr	r3, [r4, #4]
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	2300      	movs	r3, #0
 8005dea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dee:	e7aa      	b.n	8005d46 <_printf_i+0x146>
 8005df0:	4632      	mov	r2, r6
 8005df2:	4649      	mov	r1, r9
 8005df4:	4640      	mov	r0, r8
 8005df6:	6923      	ldr	r3, [r4, #16]
 8005df8:	47d0      	blx	sl
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d0ad      	beq.n	8005d5a <_printf_i+0x15a>
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	079b      	lsls	r3, r3, #30
 8005e02:	d413      	bmi.n	8005e2c <_printf_i+0x22c>
 8005e04:	68e0      	ldr	r0, [r4, #12]
 8005e06:	9b03      	ldr	r3, [sp, #12]
 8005e08:	4298      	cmp	r0, r3
 8005e0a:	bfb8      	it	lt
 8005e0c:	4618      	movlt	r0, r3
 8005e0e:	e7a6      	b.n	8005d5e <_printf_i+0x15e>
 8005e10:	2301      	movs	r3, #1
 8005e12:	4632      	mov	r2, r6
 8005e14:	4649      	mov	r1, r9
 8005e16:	4640      	mov	r0, r8
 8005e18:	47d0      	blx	sl
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d09d      	beq.n	8005d5a <_printf_i+0x15a>
 8005e1e:	3501      	adds	r5, #1
 8005e20:	68e3      	ldr	r3, [r4, #12]
 8005e22:	9903      	ldr	r1, [sp, #12]
 8005e24:	1a5b      	subs	r3, r3, r1
 8005e26:	42ab      	cmp	r3, r5
 8005e28:	dcf2      	bgt.n	8005e10 <_printf_i+0x210>
 8005e2a:	e7eb      	b.n	8005e04 <_printf_i+0x204>
 8005e2c:	2500      	movs	r5, #0
 8005e2e:	f104 0619 	add.w	r6, r4, #25
 8005e32:	e7f5      	b.n	8005e20 <_printf_i+0x220>
 8005e34:	080060eb 	.word	0x080060eb
 8005e38:	080060fc 	.word	0x080060fc

08005e3c <memmove>:
 8005e3c:	4288      	cmp	r0, r1
 8005e3e:	b510      	push	{r4, lr}
 8005e40:	eb01 0402 	add.w	r4, r1, r2
 8005e44:	d902      	bls.n	8005e4c <memmove+0x10>
 8005e46:	4284      	cmp	r4, r0
 8005e48:	4623      	mov	r3, r4
 8005e4a:	d807      	bhi.n	8005e5c <memmove+0x20>
 8005e4c:	1e43      	subs	r3, r0, #1
 8005e4e:	42a1      	cmp	r1, r4
 8005e50:	d008      	beq.n	8005e64 <memmove+0x28>
 8005e52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e5a:	e7f8      	b.n	8005e4e <memmove+0x12>
 8005e5c:	4601      	mov	r1, r0
 8005e5e:	4402      	add	r2, r0
 8005e60:	428a      	cmp	r2, r1
 8005e62:	d100      	bne.n	8005e66 <memmove+0x2a>
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e6e:	e7f7      	b.n	8005e60 <memmove+0x24>

08005e70 <_sbrk_r>:
 8005e70:	b538      	push	{r3, r4, r5, lr}
 8005e72:	2300      	movs	r3, #0
 8005e74:	4d05      	ldr	r5, [pc, #20]	@ (8005e8c <_sbrk_r+0x1c>)
 8005e76:	4604      	mov	r4, r0
 8005e78:	4608      	mov	r0, r1
 8005e7a:	602b      	str	r3, [r5, #0]
 8005e7c:	f7fa fdb4 	bl	80009e8 <_sbrk>
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	d102      	bne.n	8005e8a <_sbrk_r+0x1a>
 8005e84:	682b      	ldr	r3, [r5, #0]
 8005e86:	b103      	cbz	r3, 8005e8a <_sbrk_r+0x1a>
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	bd38      	pop	{r3, r4, r5, pc}
 8005e8c:	20001be0 	.word	0x20001be0

08005e90 <memchr>:
 8005e90:	4603      	mov	r3, r0
 8005e92:	b510      	push	{r4, lr}
 8005e94:	b2c9      	uxtb	r1, r1
 8005e96:	4402      	add	r2, r0
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	d101      	bne.n	8005ea2 <memchr+0x12>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e003      	b.n	8005eaa <memchr+0x1a>
 8005ea2:	7804      	ldrb	r4, [r0, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	428c      	cmp	r4, r1
 8005ea8:	d1f6      	bne.n	8005e98 <memchr+0x8>
 8005eaa:	bd10      	pop	{r4, pc}

08005eac <_realloc_r>:
 8005eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	4614      	mov	r4, r2
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	b921      	cbnz	r1, 8005ec2 <_realloc_r+0x16>
 8005eb8:	4611      	mov	r1, r2
 8005eba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebe:	f7ff bc49 	b.w	8005754 <_malloc_r>
 8005ec2:	b92a      	cbnz	r2, 8005ed0 <_realloc_r+0x24>
 8005ec4:	f7ff fbdc 	bl	8005680 <_free_r>
 8005ec8:	4625      	mov	r5, r4
 8005eca:	4628      	mov	r0, r5
 8005ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed0:	f000 f81a 	bl	8005f08 <_malloc_usable_size_r>
 8005ed4:	4284      	cmp	r4, r0
 8005ed6:	4606      	mov	r6, r0
 8005ed8:	d802      	bhi.n	8005ee0 <_realloc_r+0x34>
 8005eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ede:	d8f4      	bhi.n	8005eca <_realloc_r+0x1e>
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4638      	mov	r0, r7
 8005ee4:	f7ff fc36 	bl	8005754 <_malloc_r>
 8005ee8:	4680      	mov	r8, r0
 8005eea:	b908      	cbnz	r0, 8005ef0 <_realloc_r+0x44>
 8005eec:	4645      	mov	r5, r8
 8005eee:	e7ec      	b.n	8005eca <_realloc_r+0x1e>
 8005ef0:	42b4      	cmp	r4, r6
 8005ef2:	4622      	mov	r2, r4
 8005ef4:	4629      	mov	r1, r5
 8005ef6:	bf28      	it	cs
 8005ef8:	4632      	movcs	r2, r6
 8005efa:	f7ff fbb3 	bl	8005664 <memcpy>
 8005efe:	4629      	mov	r1, r5
 8005f00:	4638      	mov	r0, r7
 8005f02:	f7ff fbbd 	bl	8005680 <_free_r>
 8005f06:	e7f1      	b.n	8005eec <_realloc_r+0x40>

08005f08 <_malloc_usable_size_r>:
 8005f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f0c:	1f18      	subs	r0, r3, #4
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	bfbc      	itt	lt
 8005f12:	580b      	ldrlt	r3, [r1, r0]
 8005f14:	18c0      	addlt	r0, r0, r3
 8005f16:	4770      	bx	lr

08005f18 <_init>:
 8005f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1a:	bf00      	nop
 8005f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f1e:	bc08      	pop	{r3}
 8005f20:	469e      	mov	lr, r3
 8005f22:	4770      	bx	lr

08005f24 <_fini>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr
