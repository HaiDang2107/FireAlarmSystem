
FireAlarmSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b90  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08006ca0  08006ca0  00007ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e44  08006e44  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e44  08006e44  00007e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e4c  08006e4c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e4c  08006e4c  00007e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e50  08006e50  00007e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006e54  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b80  20000060  08006eb4  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001be0  08006eb4  00008be0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133bb  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032be  00000000  00000000  0001b444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001e708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cae  00000000  00000000  0001f788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bb0  00000000  00000000  00020436  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001301e  00000000  00000000  00023fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d19  00000000  00000000  00037004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8d1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000491c  00000000  00000000  000c8d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000cd67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c88 	.word	0x08006c88

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006c88 	.word	0x08006c88

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__aeabi_f2iz>:
 800061c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000620:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000624:	d30f      	bcc.n	8000646 <__aeabi_f2iz+0x2a>
 8000626:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800062a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062e:	d90d      	bls.n	800064c <__aeabi_f2iz+0x30>
 8000630:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000634:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000638:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800063c:	fa23 f002 	lsr.w	r0, r3, r2
 8000640:	bf18      	it	ne
 8000642:	4240      	negne	r0, r0
 8000644:	4770      	bx	lr
 8000646:	f04f 0000 	mov.w	r0, #0
 800064a:	4770      	bx	lr
 800064c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000650:	d101      	bne.n	8000656 <__aeabi_f2iz+0x3a>
 8000652:	0242      	lsls	r2, r0, #9
 8000654:	d105      	bne.n	8000662 <__aeabi_f2iz+0x46>
 8000656:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800065a:	bf08      	it	eq
 800065c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000660:	4770      	bx	lr
 8000662:	f04f 0000 	mov.w	r0, #0
 8000666:	4770      	bx	lr

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 fc8a 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f850 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f994 	bl	80009a0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000678:	f000 f8a8 	bl	80007cc <MX_ADC1_Init>
  MX_ADC2_Init();
 800067c:	f000 f906 	bl	800088c <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000680:	f000 f964 	bl	800094c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000684:	f002 fef2 	bl	800346c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temperatureQueue */
  temperatureQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &temperatureQueue_attributes);
 8000688:	4a15      	ldr	r2, [pc, #84]	@ (80006e0 <main+0x78>)
 800068a:	2102      	movs	r1, #2
 800068c:	2002      	movs	r0, #2
 800068e:	f002 ffe2 	bl	8003656 <osMessageQueueNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <main+0x7c>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of airQualityQueue */
  airQualityQueueHandle = osMessageQueueNew (2, sizeof(uint16_t), &airQualityQueue_attributes);
 8000698:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <main+0x80>)
 800069a:	2102      	movs	r1, #2
 800069c:	2002      	movs	r0, #2
 800069e:	f002 ffda 	bl	8003656 <osMessageQueueNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a11      	ldr	r2, [pc, #68]	@ (80006ec <main+0x84>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask01, NULL, &myTask01_attributes);
 80006a8:	4a11      	ldr	r2, [pc, #68]	@ (80006f0 <main+0x88>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <main+0x8c>)
 80006ae:	f002 ff25 	bl	80034fc <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a10      	ldr	r2, [pc, #64]	@ (80006f8 <main+0x90>)
 80006b6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80006b8:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <main+0x94>)
 80006ba:	2100      	movs	r1, #0
 80006bc:	4810      	ldr	r0, [pc, #64]	@ (8000700 <main+0x98>)
 80006be:	f002 ff1d 	bl	80034fc <osThreadNew>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <main+0x9c>)
 80006c6:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <main+0xa0>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	480f      	ldr	r0, [pc, #60]	@ (800070c <main+0xa4>)
 80006ce:	f002 ff15 	bl	80034fc <osThreadNew>
 80006d2:	4603      	mov	r3, r0
 80006d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <main+0xa8>)
 80006d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006d8:	f002 feea 	bl	80034b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <main+0x74>
 80006e0:	08006db4 	.word	0x08006db4
 80006e4:	20000130 	.word	0x20000130
 80006e8:	08006dcc 	.word	0x08006dcc
 80006ec:	20000134 	.word	0x20000134
 80006f0:	08006d48 	.word	0x08006d48
 80006f4:	08000a35 	.word	0x08000a35
 80006f8:	20000124 	.word	0x20000124
 80006fc:	08006d6c 	.word	0x08006d6c
 8000700:	08000b1d 	.word	0x08000b1d
 8000704:	20000128 	.word	0x20000128
 8000708:	08006d90 	.word	0x08006d90
 800070c:	08000b81 	.word	0x08000b81
 8000710:	2000012c 	.word	0x2000012c

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800071e:	2228      	movs	r2, #40	@ 0x28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f005 fe22 	bl	800636c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000744:	2301      	movs	r3, #1
 8000746:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000752:	2301      	movs	r3, #1
 8000754:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800075e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000760:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076a:	4618      	mov	r0, r3
 800076c:	f001 fc1c 	bl	8001fa8 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000776:	f000 fa17 	bl	8000ba8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	230f      	movs	r3, #15
 800077c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077e:	2302      	movs	r3, #2
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800078a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fe87 	bl	80024ac <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 fa00 	bl	8000ba8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007a8:	2302      	movs	r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 80007ac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80007b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 f807 	bl	80027c8 <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007c0:	f000 f9f2 	bl	8000ba8 <Error_Handler>
  }
}
 80007c4:	bf00      	nop
 80007c6:	3750      	adds	r7, #80	@ 0x50
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
 80007e2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ee:	4b24      	ldr	r3, [pc, #144]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007f0:	4a24      	ldr	r2, [pc, #144]	@ (8000884 <MX_ADC1_Init+0xb8>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f4:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <MX_ADC1_Init+0xb4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000800:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000802:	2200      	movs	r2, #0
 8000804:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000806:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000808:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800080c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000816:	2201      	movs	r2, #1
 8000818:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800081a:	4819      	ldr	r0, [pc, #100]	@ (8000880 <MX_ADC1_Init+0xb4>)
 800081c:	f000 fc14 	bl	8001048 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8000826:	f000 f9bf 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800082a:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_ADC1_Init+0xbc>)
 800082c:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 4095;
 800082e:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000832:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_1;
 8000838:	2301      	movs	r3, #1
 800083a:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000848:	f000 ff58 	bl	80016fc <HAL_ADC_AnalogWDGConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000852:	f000 f9a9 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000856:	2301      	movs	r3, #1
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085a:	2301      	movs	r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC1_Init+0xb4>)
 8000868:	f000 fe50 	bl	800150c <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000872:	f000 f999 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2000007c 	.word	0x2000007c
 8000884:	40012400 	.word	0x40012400
 8000888:	00800200 	.word	0x00800200

0800088c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008ae:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008b0:	4a24      	ldr	r2, [pc, #144]	@ (8000944 <MX_ADC2_Init+0xb8>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008ba:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008c8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80008cc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008da:	4819      	ldr	r0, [pc, #100]	@ (8000940 <MX_ADC2_Init+0xb4>)
 80008dc:	f000 fbb4 	bl	8001048 <HAL_ADC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 80008e6:	f000 f95f 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_ADC2_Init+0xbc>)
 80008ec:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 4095;
 80008ee:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80008f2:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <MX_ADC2_Init+0xb4>)
 8000908:	f000 fef8 	bl	80016fc <HAL_ADC_AnalogWDGConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000912:	f000 f949 	bl	8000ba8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000916:	2302      	movs	r3, #2
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091a:	2301      	movs	r3, #1
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_ADC2_Init+0xb4>)
 8000928:	f000 fdf0 	bl	800150c <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000932:	f000 f939 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	@ 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000ac 	.word	0x200000ac
 8000944:	40012800 	.word	0x40012800
 8000948:	00800200 	.word	0x00800200

0800094c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000950:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	@ (800099c <MX_USART1_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_USART1_UART_Init+0x4c>)
 8000984:	f001 ffd6 	bl	8002934 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f90b 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000dc 	.word	0x200000dc
 800099c:	40013800 	.word	0x40013800

080009a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_GPIO_Init+0x8c>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <MX_GPIO_Init+0x8c>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_GPIO_Init+0x8c>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_GPIO_Init+0x8c>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a16      	ldr	r2, [pc, #88]	@ (8000a2c <MX_GPIO_Init+0x8c>)
 80009d2:	f043 0304 	orr.w	r3, r3, #4
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <MX_GPIO_Init+0x8c>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2130      	movs	r1, #48	@ 0x30
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_GPIO_Init+0x90>)
 80009ea:	f001 fac5 	bl	8001f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009ee:	2308      	movs	r3, #8
 80009f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	480b      	ldr	r0, [pc, #44]	@ (8000a30 <MX_GPIO_Init+0x90>)
 8000a02:	f001 f935 	bl	8001c70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a06:	2330      	movs	r3, #48	@ 0x30
 8000a08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2302      	movs	r3, #2
 8000a14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_GPIO_Init+0x90>)
 8000a1e:	f001 f927 	bl	8001c70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800

08000a34 <StartTask01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b09e      	sub	sp, #120	@ 0x78
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  char buffer[100];
	  int airConvert, temConvert;
	  if (osMessageQueueGetCount(airQualityQueueHandle) > 0) {
 8000a3c:	4b33      	ldr	r3, [pc, #204]	@ (8000b0c <StartTask01+0xd8>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 ff39 	bl	80038b8 <osMessageQueueGetCount>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d01e      	beq.n	8000a8a <StartTask01+0x56>
		  uint16_t air;
		  osMessageQueueGet(airQualityQueueHandle, &air, NULL, osWaitForever);
 8000a4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <StartTask01+0xd8>)
 8000a4e:	6818      	ldr	r0, [r3, #0]
 8000a50:	f107 016e 	add.w	r1, r7, #110	@ 0x6e
 8000a54:	f04f 33ff 	mov.w	r3, #4294967295
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f002 fecf 	bl	80037fc <osMessageQueueGet>

		  // Convert to millivoltage
		  airConvert = (int) 3300 * air / 4096.f;
 8000a5e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8000a62:	461a      	mov	r2, r3
 8000a64:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fc31 	bl	80002d4 <__aeabi_i2f>
 8000a72:	4603      	mov	r3, r0
 8000a74:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fd33 	bl	80004e4 <__aeabi_fdiv>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fdcb 	bl	800061c <__aeabi_f2iz>
 8000a86:	4603      	mov	r3, r0
 8000a88:	677b      	str	r3, [r7, #116]	@ 0x74
	  }

	  if (osMessageQueueGetCount(temperatureQueueHandle) > 0) {
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <StartTask01+0xdc>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f002 ff12 	bl	80038b8 <osMessageQueueGetCount>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d01e      	beq.n	8000ad8 <StartTask01+0xa4>
		  uint16_t temperature;
		  osMessageQueueGet(temperatureQueueHandle, &temperature, NULL, osWaitForever);
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000b10 <StartTask01+0xdc>)
 8000a9c:	6818      	ldr	r0, [r3, #0]
 8000a9e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f002 fea8 	bl	80037fc <osMessageQueueGet>

		  // Convert to temperature: 10mV ~ 1 Cencius degree
		  temConvert = (int) 330 * temperature / 4096.0f;
 8000aac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8000ab6:	fb02 f303 	mul.w	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fc0a 	bl	80002d4 <__aeabi_i2f>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fd0c 	bl	80004e4 <__aeabi_fdiv>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff fda4 	bl	800061c <__aeabi_f2iz>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	673b      	str	r3, [r7, #112]	@ 0x70
	  }

	  sprintf(buffer, "AO pin of air quality sensor: %d (mV).\nTemperature: %d (*C).\n==========", airConvert, temConvert);
 8000ad8:	f107 0008 	add.w	r0, r7, #8
 8000adc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ade:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000ae0:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <StartTask01+0xe0>)
 8000ae2:	f005 fc21 	bl	8006328 <siprintf>
	  HAL_UART_Transmit_IT(&huart1, (uint8_t*)buffer, strlen(buffer));
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb30 	bl	8000150 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <StartTask01+0xe4>)
 8000afc:	f001 ff6a 	bl	80029d4 <HAL_UART_Transmit_IT>
      osDelay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f002 fd8c 	bl	8003620 <osDelay>
  {
 8000b08:	e798      	b.n	8000a3c <StartTask01+0x8>
 8000b0a:	bf00      	nop
 8000b0c:	20000134 	.word	0x20000134
 8000b10:	20000130 	.word	0x20000130
 8000b14:	08006ce8 	.word	0x08006ce8
 8000b18:	200000dc 	.word	0x200000dc

08000b1c <StartTask02>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  if (threshold1 == 1 && threshold2 == 1) {
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <StartTask02+0x58>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d10e      	bne.n	8000b4a <StartTask02+0x2e>
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <StartTask02+0x5c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d10a      	bne.n	8000b4a <StartTask02+0x2e>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	4810      	ldr	r0, [pc, #64]	@ (8000b7c <StartTask02+0x60>)
 8000b3a:	f001 fa1d 	bl	8001f78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2120      	movs	r1, #32
 8000b42:	480e      	ldr	r0, [pc, #56]	@ (8000b7c <StartTask02+0x60>)
 8000b44:	f001 fa18 	bl	8001f78 <HAL_GPIO_WritePin>
 8000b48:	e00f      	b.n	8000b6a <StartTask02+0x4e>
	  } else {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	480b      	ldr	r0, [pc, #44]	@ (8000b7c <StartTask02+0x60>)
 8000b50:	f001 fa12 	bl	8001f78 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2120      	movs	r1, #32
 8000b58:	4808      	ldr	r0, [pc, #32]	@ (8000b7c <StartTask02+0x60>)
 8000b5a:	f001 fa0d 	bl	8001f78 <HAL_GPIO_WritePin>
		  threshold1 = 0;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <StartTask02+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
		  threshold2 = 0;
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <StartTask02+0x5c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
	  }
      osDelay(500);
 8000b6a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b6e:	f002 fd57 	bl	8003620 <osDelay>
	  if (threshold1 == 1 && threshold2 == 1) {
 8000b72:	e7d7      	b.n	8000b24 <StartTask02+0x8>
 8000b74:	20000138 	.word	0x20000138
 8000b78:	2000013c 	.word	0x2000013c
 8000b7c:	40010800 	.word	0x40010800

08000b80 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_IT(&hadc1);
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <StartTask03+0x20>)
 8000b8a:	f000 fb35 	bl	80011f8 <HAL_ADC_Start_IT>
	  HAL_ADC_Start_IT(&hadc2);
 8000b8e:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <StartTask03+0x24>)
 8000b90:	f000 fb32 	bl	80011f8 <HAL_ADC_Start_IT>
	  osDelay(200);
 8000b94:	20c8      	movs	r0, #200	@ 0xc8
 8000b96:	f002 fd43 	bl	8003620 <osDelay>
	  HAL_ADC_Start_IT(&hadc1);
 8000b9a:	bf00      	nop
 8000b9c:	e7f4      	b.n	8000b88 <StartTask03+0x8>
 8000b9e:	bf00      	nop
 8000ba0:	2000007c 	.word	0x2000007c
 8000ba4:	200000ac 	.word	0x200000ac

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bac:	b672      	cpsid	i
}
 8000bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <Error_Handler+0x8>

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_MspInit+0x68>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_MspInit+0x68>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6193      	str	r3, [r2, #24]
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_MspInit+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	60bb      	str	r3, [r7, #8]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <HAL_MspInit+0x68>)
 8000bd4:	69db      	ldr	r3, [r3, #28]
 8000bd6:	4a11      	ldr	r2, [pc, #68]	@ (8000c1c <HAL_MspInit+0x68>)
 8000bd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bdc:	61d3      	str	r3, [r2, #28]
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <HAL_MspInit+0x68>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	210f      	movs	r1, #15
 8000bee:	f06f 0001 	mvn.w	r0, #1
 8000bf2:	f000 ff54 	bl	8001a9e <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_MspInit+0x6c>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	@ (8000c20 <HAL_MspInit+0x6c>)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40010000 	.word	0x40010000

08000c24 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a30      	ldr	r2, [pc, #192]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d12a      	bne.n	8000c9a <HAL_ADC_MspInit+0x76>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c44:	4b2f      	ldr	r3, [pc, #188]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a2e      	ldr	r2, [pc, #184]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b29      	ldr	r3, [pc, #164]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a28      	ldr	r2, [pc, #160]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b26      	ldr	r3, [pc, #152]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4821      	ldr	r0, [pc, #132]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000c84:	f000 fff4 	bl	8001c70 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2105      	movs	r1, #5
 8000c8c:	2012      	movs	r0, #18
 8000c8e:	f000 ff06 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c92:	2012      	movs	r0, #18
 8000c94:	f000 ff1f 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c98:	e02e      	b.n	8000cf8 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <HAL_ADC_MspInit+0xe8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d129      	bne.n	8000cf8 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ca4:	4b17      	ldr	r3, [pc, #92]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	4a16      	ldr	r2, [pc, #88]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cae:	6193      	str	r3, [r2, #24]
 8000cb0:	4b14      	ldr	r3, [pc, #80]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b11      	ldr	r3, [pc, #68]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a10      	ldr	r2, [pc, #64]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0318 	add.w	r3, r7, #24
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000ce4:	f000 ffc4 	bl	8001c70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2105      	movs	r1, #5
 8000cec:	2012      	movs	r0, #18
 8000cee:	f000 fed6 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000cf2:	2012      	movs	r0, #18
 8000cf4:	f000 feef 	bl	8001ad6 <HAL_NVIC_EnableIRQ>
}
 8000cf8:	bf00      	nop
 8000cfa:	3728      	adds	r7, #40	@ 0x28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40012400 	.word	0x40012400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	40012800 	.word	0x40012800

08000d10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a20      	ldr	r2, [pc, #128]	@ (8000dac <HAL_UART_MspInit+0x9c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d139      	bne.n	8000da4 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a1e      	ldr	r2, [pc, #120]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a18      	ldr	r2, [pc, #96]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <HAL_UART_MspInit+0xa0>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 0310 	add.w	r3, r7, #16
 8000d72:	4619      	mov	r1, r3
 8000d74:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <HAL_UART_MspInit+0xa4>)
 8000d76:	f000 ff7b 	bl	8001c70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <HAL_UART_MspInit+0xa4>)
 8000d90:	f000 ff6e 	bl	8001c70 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2105      	movs	r1, #5
 8000d98:	2025      	movs	r0, #37	@ 0x25
 8000d9a:	f000 fe80 	bl	8001a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d9e:	2025      	movs	r0, #37	@ 0x25
 8000da0:	f000 fe99 	bl	8001ad6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000da4:	bf00      	nop
 8000da6:	3720      	adds	r7, #32
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40013800 	.word	0x40013800
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010800 	.word	0x40010800

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <NMI_Handler+0x4>

08000dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <HardFault_Handler+0x4>

08000dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <MemManage_Handler+0x4>

08000dd0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <BusFault_Handler+0x4>

08000dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <UsageFault_Handler+0x4>

08000de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f90e 	bl	8001010 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000df4:	f004 fa7e 	bl	80052f4 <xTaskGetSchedulerState>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d001      	beq.n	8000e02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dfe:	f005 f823 	bl	8005e48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e0c:	4803      	ldr	r0, [pc, #12]	@ (8000e1c <ADC1_2_IRQHandler+0x14>)
 8000e0e:	f000 fab5 	bl	800137c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000e12:	4803      	ldr	r0, [pc, #12]	@ (8000e20 <ADC1_2_IRQHandler+0x18>)
 8000e14:	f000 fab2 	bl	800137c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000007c 	.word	0x2000007c
 8000e20:	200000ac 	.word	0x200000ac

08000e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e28:	4802      	ldr	r0, [pc, #8]	@ (8000e34 <USART1_IRQHandler+0x10>)
 8000e2a:	f001 fe09 	bl	8002a40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000dc 	.word	0x200000dc

08000e38 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  // for each successful conversion
	if (hadc == &hadc1) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d115      	bne.n	8000e74 <HAL_ADC_ConvCpltCallback+0x3c>
		if (osMessageQueueGetCount(airQualityQueueHandle) < 2) {
 8000e48:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 fd33 	bl	80038b8 <osMessageQueueGetCount>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d80d      	bhi.n	8000e74 <HAL_ADC_ConvCpltCallback+0x3c>
			uint16_t air = HAL_ADC_GetValue(&hadc1);
 8000e58:	4815      	ldr	r0, [pc, #84]	@ (8000eb0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000e5a:	f000 fa83 	bl	8001364 <HAL_ADC_GetValue>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	81fb      	strh	r3, [r7, #14]
			osMessageQueuePut(airQualityQueueHandle, &air, 0, 10);
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000e66:	6818      	ldr	r0, [r3, #0]
 8000e68:	f107 010e 	add.w	r1, r7, #14
 8000e6c:	230a      	movs	r3, #10
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f002 fc64 	bl	800373c <osMessageQueuePut>
		}
	}

	if (hadc == &hadc2) {
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a10      	ldr	r2, [pc, #64]	@ (8000eb8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d115      	bne.n	8000ea8 <HAL_ADC_ConvCpltCallback+0x70>
		if (osMessageQueueGetCount(temperatureQueueHandle) < 2) {
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <HAL_ADC_ConvCpltCallback+0x84>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f002 fd19 	bl	80038b8 <osMessageQueueGetCount>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d80d      	bhi.n	8000ea8 <HAL_ADC_ConvCpltCallback+0x70>
			uint16_t temperature = HAL_ADC_GetValue(&hadc2);
 8000e8c:	480a      	ldr	r0, [pc, #40]	@ (8000eb8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000e8e:	f000 fa69 	bl	8001364 <HAL_ADC_GetValue>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	81bb      	strh	r3, [r7, #12]
			osMessageQueuePut(temperatureQueueHandle, &temperature, 0, 10);
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <HAL_ADC_ConvCpltCallback+0x84>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	f107 010c 	add.w	r1, r7, #12
 8000ea0:	230a      	movs	r3, #10
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f002 fc4a 	bl	800373c <osMessageQueuePut>
		}
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000007c 	.word	0x2000007c
 8000eb4:	20000134 	.word	0x20000134
 8000eb8:	200000ac 	.word	0x200000ac
 8000ebc:	20000130 	.word	0x20000130

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	@ (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f005 fa44 	bl	800637c <__errno>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20005000 	.word	0x20005000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	20000140 	.word	0x20000140
 8000f28:	20001be0 	.word	0x20001be0

08000f2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff fff8 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f3e:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f40:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f54:	4c09      	ldr	r4, [pc, #36]	@ (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f005 fa11 	bl	8006388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f66:	f7ff fb7f 	bl	8000668 <main>
  bx lr
 8000f6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f74:	08006e54 	.word	0x08006e54
  ldr r2, =_sbss
 8000f78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f7c:	20001be0 	.word	0x20001be0

08000f80 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <CAN1_RX1_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_Init+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_Init+0x28>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 fd77 	bl	8001a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fe08 	bl	8000bb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 fd8f 	bl	8001af2 <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 fd57 	bl	8001a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a03      	ldr	r2, [pc, #12]	@ (8001030 <HAL_IncTick+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000008 	.word	0x20000008
 8001030:	20000144 	.word	0x20000144

08001034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	@ (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	20000144 	.word	0x20000144

08001048 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0be      	b.n	80011e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fdcc 	bl	8000c24 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fbe5 	bl	800185c <ADC_ConversionStop_Disable>
 8001092:	4603      	mov	r3, r0
 8001094:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109a:	f003 0310 	and.w	r3, r3, #16
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f040 8099 	bne.w	80011d6 <HAL_ADC_Init+0x18e>
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 8095 	bne.w	80011d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010b4:	f023 0302 	bic.w	r3, r3, #2
 80010b8:	f043 0202 	orr.w	r2, r3, #2
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7b1b      	ldrb	r3, [r3, #12]
 80010ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010e0:	d003      	beq.n	80010ea <HAL_ADC_Init+0xa2>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d102      	bne.n	80010f0 <HAL_ADC_Init+0xa8>
 80010ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ee:	e000      	b.n	80010f2 <HAL_ADC_Init+0xaa>
 80010f0:	2300      	movs	r3, #0
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7d1b      	ldrb	r3, [r3, #20]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d119      	bne.n	8001134 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7b1b      	ldrb	r3, [r3, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	3b01      	subs	r3, #1
 800110e:	035a      	lsls	r2, r3, #13
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	e00b      	b.n	8001134 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001120:	f043 0220 	orr.w	r2, r3, #32
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800112c:	f043 0201 	orr.w	r2, r3, #1
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	430a      	orrs	r2, r1
 8001146:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b28      	ldr	r3, [pc, #160]	@ (80011f0 <HAL_ADC_Init+0x1a8>)
 8001150:	4013      	ands	r3, r2
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	6812      	ldr	r2, [r2, #0]
 8001156:	68b9      	ldr	r1, [r7, #8]
 8001158:	430b      	orrs	r3, r1
 800115a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001164:	d003      	beq.n	800116e <HAL_ADC_Init+0x126>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d104      	bne.n	8001178 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	3b01      	subs	r3, #1
 8001174:	051b      	lsls	r3, r3, #20
 8001176:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	430a      	orrs	r2, r1
 800118a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HAL_ADC_Init+0x1ac>)
 8001194:	4013      	ands	r3, r2
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	429a      	cmp	r2, r3
 800119a:	d10b      	bne.n	80011b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a6:	f023 0303 	bic.w	r3, r3, #3
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011b2:	e018      	b.n	80011e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011b8:	f023 0312 	bic.w	r3, r3, #18
 80011bc:	f043 0210 	orr.w	r2, r3, #16
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c8:	f043 0201 	orr.w	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d4:	e007      	b.n	80011e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011da:	f043 0210 	orr.w	r2, r3, #16
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	ffe1f7fd 	.word	0xffe1f7fd
 80011f4:	ff1f0efe 	.word	0xff1f0efe

080011f8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800120a:	2b01      	cmp	r3, #1
 800120c:	d101      	bne.n	8001212 <HAL_ADC_Start_IT+0x1a>
 800120e:	2302      	movs	r3, #2
 8001210:	e0a0      	b.n	8001354 <HAL_ADC_Start_IT+0x15c>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fac4 	bl	80017a8 <ADC_Enable>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	2b00      	cmp	r3, #0
 8001228:	f040 808f 	bne.w	800134a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001230:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001234:	f023 0301 	bic.w	r3, r3, #1
 8001238:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a45      	ldr	r2, [pc, #276]	@ (800135c <HAL_ADC_Start_IT+0x164>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d105      	bne.n	8001256 <HAL_ADC_Start_IT+0x5e>
 800124a:	4b45      	ldr	r3, [pc, #276]	@ (8001360 <HAL_ADC_Start_IT+0x168>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d115      	bne.n	8001282 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800125a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126c:	2b00      	cmp	r3, #0
 800126e:	d026      	beq.n	80012be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001274:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001278:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001280:	e01d      	b.n	80012be <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001286:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a33      	ldr	r2, [pc, #204]	@ (8001360 <HAL_ADC_Start_IT+0x168>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d004      	beq.n	80012a2 <HAL_ADC_Start_IT+0xaa>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <HAL_ADC_Start_IT+0x164>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10d      	bne.n	80012be <HAL_ADC_Start_IT+0xc6>
 80012a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <HAL_ADC_Start_IT+0x168>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d006      	beq.n	80012d8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ce:	f023 0206 	bic.w	r2, r3, #6
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012d6:	e002      	b.n	80012de <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f06f 0202 	mvn.w	r2, #2
 80012ee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0220 	orr.w	r2, r2, #32
 80012fe:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800130a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800130e:	d113      	bne.n	8001338 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001314:	4a11      	ldr	r2, [pc, #68]	@ (800135c <HAL_ADC_Start_IT+0x164>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d105      	bne.n	8001326 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <HAL_ADC_Start_IT+0x168>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001322:	2b00      	cmp	r3, #0
 8001324:	d108      	bne.n	8001338 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	e00c      	b.n	8001352 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	e003      	b.n	8001352 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40012800 	.word	0x40012800
 8001360:	40012400 	.word	0x40012400

08001364 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	f003 0320 	and.w	r3, r3, #32
 800139a:	2b00      	cmp	r3, #0
 800139c:	d03e      	beq.n	800141c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d039      	beq.n	800141c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	f003 0310 	and.w	r3, r3, #16
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d105      	bne.n	80013c0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013ce:	d11d      	bne.n	800140c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d119      	bne.n	800140c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0220 	bic.w	r2, r2, #32
 80013e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fd13 	bl	8000e38 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 0212 	mvn.w	r2, #18
 800141a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001422:	2b00      	cmp	r3, #0
 8001424:	d04d      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	2b00      	cmp	r3, #0
 800142e:	d048      	beq.n	80014c2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	2b00      	cmp	r3, #0
 800143a:	d105      	bne.n	8001448 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001440:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001452:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001456:	d012      	beq.n	800147e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001462:	2b00      	cmp	r3, #0
 8001464:	d125      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001470:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001474:	d11d      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800147a:	2b00      	cmp	r3, #0
 800147c:	d119      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800148c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001492:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d105      	bne.n	80014b2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fa13 	bl	80018de <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f06f 020c 	mvn.w	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d012      	beq.n	80014f2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00d      	beq.n	80014f2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f000 f809 	bl	80014fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f06f 0201 	mvn.w	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b083      	sub	sp, #12
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_ADC_ConfigChannel+0x20>
 8001528:	2302      	movs	r3, #2
 800152a:	e0dc      	b.n	80016e6 <HAL_ADC_ConfigChannel+0x1da>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b06      	cmp	r3, #6
 800153a:	d81c      	bhi.n	8001576 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	3b05      	subs	r3, #5
 800154e:	221f      	movs	r2, #31
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	4019      	ands	r1, r3
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6818      	ldr	r0, [r3, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	3b05      	subs	r3, #5
 8001568:	fa00 f203 	lsl.w	r2, r0, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	@ 0x34
 8001574:	e03c      	b.n	80015f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d81c      	bhi.n	80015b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	3b23      	subs	r3, #35	@ 0x23
 8001590:	221f      	movs	r2, #31
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	4019      	ands	r1, r3
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	6818      	ldr	r0, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b23      	subs	r3, #35	@ 0x23
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80015b6:	e01b      	b.n	80015f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	3b41      	subs	r3, #65	@ 0x41
 80015ca:	221f      	movs	r2, #31
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4019      	ands	r1, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6818      	ldr	r0, [r3, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	4413      	add	r3, r2
 80015e2:	3b41      	subs	r3, #65	@ 0x41
 80015e4:	fa00 f203 	lsl.w	r2, r0, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d91c      	bls.n	8001632 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	3b1e      	subs	r3, #30
 800160a:	2207      	movs	r2, #7
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	43db      	mvns	r3, r3
 8001612:	4019      	ands	r1, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	6898      	ldr	r0, [r3, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4613      	mov	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	4413      	add	r3, r2
 8001622:	3b1e      	subs	r3, #30
 8001624:	fa00 f203 	lsl.w	r2, r0, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	e019      	b.n	8001666 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6919      	ldr	r1, [r3, #16]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	2207      	movs	r2, #7
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4019      	ands	r1, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6898      	ldr	r0, [r3, #8]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	fa00 f203 	lsl.w	r2, r0, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b10      	cmp	r3, #16
 800166c:	d003      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001672:	2b11      	cmp	r3, #17
 8001674:	d132      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a1d      	ldr	r2, [pc, #116]	@ (80016f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d125      	bne.n	80016cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d126      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800169c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d11a      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a13      	ldr	r2, [pc, #76]	@ (80016f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80016ac:	fba2 2303 	umull	r2, r3, r2, r3
 80016b0:	0c9a      	lsrs	r2, r3, #18
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f9      	bne.n	80016be <HAL_ADC_ConfigChannel+0x1b2>
 80016ca:	e007      	b.n	80016dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d0:	f043 0220 	orr.w	r2, r3, #32
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	40012400 	.word	0x40012400
 80016f4:	20000000 	.word	0x20000000
 80016f8:	431bde83 	.word	0x431bde83

080016fc <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a24      	ldr	r2, [pc, #144]	@ (800179c <HAL_ADC_AnalogWDGConfig+0xa0>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d003      	beq.n	8001718 <HAL_ADC_AnalogWDGConfig+0x1c>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001714:	4a22      	ldr	r2, [pc, #136]	@ (80017a0 <HAL_ADC_AnalogWDGConfig+0xa4>)
 8001716:	4293      	cmp	r3, r2
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ADC_AnalogWDGConfig+0x2a>
 8001722:	2302      	movs	r3, #2
 8001724:	e035      	b.n	8001792 <HAL_ADC_AnalogWDGConfig+0x96>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d108      	bne.n	8001748 <HAL_ADC_AnalogWDGConfig+0x4c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	e007      	b.n	8001758 <HAL_ADC_AnalogWDGConfig+0x5c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001756:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	4b11      	ldr	r3, [pc, #68]	@ (80017a4 <HAL_ADC_AnalogWDGConfig+0xa8>)
 8001760:	4013      	ands	r3, r2
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	6811      	ldr	r1, [r2, #0]
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6852      	ldr	r2, [r2, #4]
 800176a:	4311      	orrs	r1, r2
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	430b      	orrs	r3, r1
 8001772:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	68d2      	ldr	r2, [r2, #12]
 800177c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	6912      	ldr	r2, [r2, #16]
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	00800200 	.word	0x00800200
 80017a0:	00400200 	.word	0x00400200
 80017a4:	ff3ffde0 	.word	0xff3ffde0

080017a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d040      	beq.n	8001848 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80017d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001854 <ADC_Enable+0xac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a1f      	ldr	r2, [pc, #124]	@ (8001858 <ADC_Enable+0xb0>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	0c9b      	lsrs	r3, r3, #18
 80017e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017e4:	e002      	b.n	80017ec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f9      	bne.n	80017e6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017f2:	f7ff fc1f 	bl	8001034 <HAL_GetTick>
 80017f6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80017f8:	e01f      	b.n	800183a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017fa:	f7ff fc1b 	bl	8001034 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d918      	bls.n	800183a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b01      	cmp	r3, #1
 8001814:	d011      	beq.n	800183a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	f043 0210 	orr.w	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e007      	b.n	800184a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b01      	cmp	r3, #1
 8001846:	d1d8      	bne.n	80017fa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000
 8001858:	431bde83 	.word	0x431bde83

0800185c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b01      	cmp	r3, #1
 8001874:	d12e      	bne.n	80018d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0201 	bic.w	r2, r2, #1
 8001884:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001886:	f7ff fbd5 	bl	8001034 <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800188c:	e01b      	b.n	80018c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800188e:	f7ff fbd1 	bl	8001034 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d914      	bls.n	80018c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d10d      	bne.n	80018c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ae:	f043 0210 	orr.w	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e007      	b.n	80018d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0301 	and.w	r3, r3, #1
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d0dc      	beq.n	800188e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001900:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800190c:	4013      	ands	r3, r2
 800190e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800191c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <__NVIC_SetPriorityGrouping+0x44>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800193c:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <__NVIC_GetPriorityGrouping+0x18>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	f003 0307 	and.w	r3, r3, #7
}
 8001946:	4618      	mov	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	2b00      	cmp	r3, #0
 8001964:	db0b      	blt.n	800197e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	f003 021f 	and.w	r2, r3, #31
 800196c:	4906      	ldr	r1, [pc, #24]	@ (8001988 <__NVIC_EnableIRQ+0x34>)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	095b      	lsrs	r3, r3, #5
 8001974:	2001      	movs	r0, #1
 8001976:	fa00 f202 	lsl.w	r2, r0, r2
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100

0800198c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	2b00      	cmp	r3, #0
 800199e:	db0a      	blt.n	80019b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	490c      	ldr	r1, [pc, #48]	@ (80019d8 <__NVIC_SetPriority+0x4c>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	0112      	lsls	r2, r2, #4
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	440b      	add	r3, r1
 80019b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019b4:	e00a      	b.n	80019cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4908      	ldr	r1, [pc, #32]	@ (80019dc <__NVIC_SetPriority+0x50>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	3b04      	subs	r3, #4
 80019c4:	0112      	lsls	r2, r2, #4
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	440b      	add	r3, r1
 80019ca:	761a      	strb	r2, [r3, #24]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bc80      	pop	{r7}
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	e000e100 	.word	0xe000e100
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b089      	sub	sp, #36	@ 0x24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	bf28      	it	cs
 80019fe:	2304      	movcs	r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3304      	adds	r3, #4
 8001a06:	2b06      	cmp	r3, #6
 8001a08:	d902      	bls.n	8001a10 <NVIC_EncodePriority+0x30>
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3b03      	subs	r3, #3
 8001a0e:	e000      	b.n	8001a12 <NVIC_EncodePriority+0x32>
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a14:	f04f 32ff 	mov.w	r2, #4294967295
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	401a      	ands	r2, r3
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a38:	4313      	orrs	r3, r2
         );
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3724      	adds	r7, #36	@ 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a54:	d301      	bcc.n	8001a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a56:	2301      	movs	r3, #1
 8001a58:	e00f      	b.n	8001a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <SysTick_Config+0x40>)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a62:	210f      	movs	r1, #15
 8001a64:	f04f 30ff 	mov.w	r0, #4294967295
 8001a68:	f7ff ff90 	bl	800198c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a6c:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <SysTick_Config+0x40>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a72:	4b04      	ldr	r3, [pc, #16]	@ (8001a84 <SysTick_Config+0x40>)
 8001a74:	2207      	movs	r2, #7
 8001a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	e000e010 	.word	0xe000e010

08001a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ff2d 	bl	80018f0 <__NVIC_SetPriorityGrouping>
}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab0:	f7ff ff42 	bl	8001938 <__NVIC_GetPriorityGrouping>
 8001ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68b9      	ldr	r1, [r7, #8]
 8001aba:	6978      	ldr	r0, [r7, #20]
 8001abc:	f7ff ff90 	bl	80019e0 <NVIC_EncodePriority>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff5f 	bl	800198c <__NVIC_SetPriority>
}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	4603      	mov	r3, r0
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff35 	bl	8001954 <__NVIC_EnableIRQ>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ffa2 	bl	8001a44 <SysTick_Config>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b085      	sub	sp, #20
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2204      	movs	r2, #4
 8001b26:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e020      	b.n	8001b76 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 020e 	bic.w	r2, r2, #14
 8001b42:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d005      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e051      	b.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 020e 	bic.w	r2, r2, #14
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0201 	bic.w	r2, r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	@ (8001c54 <HAL_DMA_Abort_IT+0xd4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d029      	beq.n	8001c22 <HAL_DMA_Abort_IT+0xa2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	@ (8001c58 <HAL_DMA_Abort_IT+0xd8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d022      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x9e>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c5c <HAL_DMA_Abort_IT+0xdc>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d01a      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x98>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c60 <HAL_DMA_Abort_IT+0xe0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d012      	beq.n	8001c12 <HAL_DMA_Abort_IT+0x92>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c64 <HAL_DMA_Abort_IT+0xe4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d00a      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x8c>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001c68 <HAL_DMA_Abort_IT+0xe8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d102      	bne.n	8001c06 <HAL_DMA_Abort_IT+0x86>
 8001c00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c04:	e00e      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c0a:	e00b      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c10:	e008      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c16:	e005      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c1c:	e002      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	2310      	movs	r3, #16
 8001c20:	e000      	b.n	8001c24 <HAL_DMA_Abort_IT+0xa4>
 8001c22:	2301      	movs	r3, #1
 8001c24:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <HAL_DMA_Abort_IT+0xec>)
 8001c26:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	4798      	blx	r3
    } 
  }
  return status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40020008 	.word	0x40020008
 8001c58:	4002001c 	.word	0x4002001c
 8001c5c:	40020030 	.word	0x40020030
 8001c60:	40020044 	.word	0x40020044
 8001c64:	40020058 	.word	0x40020058
 8001c68:	4002006c 	.word	0x4002006c
 8001c6c:	40020000 	.word	0x40020000

08001c70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b08b      	sub	sp, #44	@ 0x2c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c82:	e169      	b.n	8001f58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c84:	2201      	movs	r2, #1
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8158 	bne.w	8001f52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a9a      	ldr	r2, [pc, #616]	@ (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cac:	4a98      	ldr	r2, [pc, #608]	@ (8001f10 <HAL_GPIO_Init+0x2a0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d875      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cb2:	4a98      	ldr	r2, [pc, #608]	@ (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d058      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cb8:	4a96      	ldr	r2, [pc, #600]	@ (8001f14 <HAL_GPIO_Init+0x2a4>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d86f      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cbe:	4a96      	ldr	r2, [pc, #600]	@ (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d052      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cc4:	4a94      	ldr	r2, [pc, #592]	@ (8001f18 <HAL_GPIO_Init+0x2a8>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d869      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cca:	4a94      	ldr	r2, [pc, #592]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04c      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cd0:	4a92      	ldr	r2, [pc, #584]	@ (8001f1c <HAL_GPIO_Init+0x2ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d863      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cd6:	4a92      	ldr	r2, [pc, #584]	@ (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d046      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
 8001cdc:	4a90      	ldr	r2, [pc, #576]	@ (8001f20 <HAL_GPIO_Init+0x2b0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d85d      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001ce2:	2b12      	cmp	r3, #18
 8001ce4:	d82a      	bhi.n	8001d3c <HAL_GPIO_Init+0xcc>
 8001ce6:	2b12      	cmp	r3, #18
 8001ce8:	d859      	bhi.n	8001d9e <HAL_GPIO_Init+0x12e>
 8001cea:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf0 <HAL_GPIO_Init+0x80>)
 8001cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf0:	08001d6b 	.word	0x08001d6b
 8001cf4:	08001d45 	.word	0x08001d45
 8001cf8:	08001d57 	.word	0x08001d57
 8001cfc:	08001d99 	.word	0x08001d99
 8001d00:	08001d9f 	.word	0x08001d9f
 8001d04:	08001d9f 	.word	0x08001d9f
 8001d08:	08001d9f 	.word	0x08001d9f
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001d9f 	.word	0x08001d9f
 8001d14:	08001d9f 	.word	0x08001d9f
 8001d18:	08001d9f 	.word	0x08001d9f
 8001d1c:	08001d9f 	.word	0x08001d9f
 8001d20:	08001d9f 	.word	0x08001d9f
 8001d24:	08001d9f 	.word	0x08001d9f
 8001d28:	08001d9f 	.word	0x08001d9f
 8001d2c:	08001d9f 	.word	0x08001d9f
 8001d30:	08001d9f 	.word	0x08001d9f
 8001d34:	08001d4d 	.word	0x08001d4d
 8001d38:	08001d61 	.word	0x08001d61
 8001d3c:	4a79      	ldr	r2, [pc, #484]	@ (8001f24 <HAL_GPIO_Init+0x2b4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d42:	e02c      	b.n	8001d9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e029      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	3304      	adds	r3, #4
 8001d52:	623b      	str	r3, [r7, #32]
          break;
 8001d54:	e024      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	3308      	adds	r3, #8
 8001d5c:	623b      	str	r3, [r7, #32]
          break;
 8001d5e:	e01f      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	330c      	adds	r3, #12
 8001d66:	623b      	str	r3, [r7, #32]
          break;
 8001d68:	e01a      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d72:	2304      	movs	r3, #4
 8001d74:	623b      	str	r3, [r7, #32]
          break;
 8001d76:	e013      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d105      	bne.n	8001d8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d80:	2308      	movs	r3, #8
 8001d82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	69fa      	ldr	r2, [r7, #28]
 8001d88:	611a      	str	r2, [r3, #16]
          break;
 8001d8a:	e009      	b.n	8001da0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	615a      	str	r2, [r3, #20]
          break;
 8001d96:	e003      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
          break;
 8001d9c:	e000      	b.n	8001da0 <HAL_GPIO_Init+0x130>
          break;
 8001d9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	2bff      	cmp	r3, #255	@ 0xff
 8001da4:	d801      	bhi.n	8001daa <HAL_GPIO_Init+0x13a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	e001      	b.n	8001dae <HAL_GPIO_Init+0x13e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2bff      	cmp	r3, #255	@ 0xff
 8001db4:	d802      	bhi.n	8001dbc <HAL_GPIO_Init+0x14c>
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	e002      	b.n	8001dc2 <HAL_GPIO_Init+0x152>
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dbe:	3b08      	subs	r3, #8
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	210f      	movs	r1, #15
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	6a39      	ldr	r1, [r7, #32]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80b1 	beq.w	8001f52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001df0:	4b4d      	ldr	r3, [pc, #308]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6193      	str	r3, [r2, #24]
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	@ (8001f28 <HAL_GPIO_Init+0x2b8>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e08:	4a48      	ldr	r2, [pc, #288]	@ (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	220f      	movs	r2, #15
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a40      	ldr	r2, [pc, #256]	@ (8001f30 <HAL_GPIO_Init+0x2c0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_Init+0x1ec>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3f      	ldr	r2, [pc, #252]	@ (8001f34 <HAL_GPIO_Init+0x2c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_Init+0x1e8>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001f38 <HAL_GPIO_Init+0x2c8>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_Init+0x1e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3d      	ldr	r2, [pc, #244]	@ (8001f3c <HAL_GPIO_Init+0x2cc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_Init+0x1e0>
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_Init+0x1ee>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e6e:	492f      	ldr	r1, [pc, #188]	@ (8001f2c <HAL_GPIO_Init+0x2bc>)
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d006      	beq.n	8001e96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e88:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	492c      	ldr	r1, [pc, #176]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	608b      	str	r3, [r1, #8]
 8001e94:	e006      	b.n	8001ea4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e96:	4b2a      	ldr	r3, [pc, #168]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	4928      	ldr	r1, [pc, #160]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	4922      	ldr	r1, [pc, #136]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
 8001ebc:	e006      	b.n	8001ecc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	491e      	ldr	r1, [pc, #120]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d006      	beq.n	8001ee6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4918      	ldr	r1, [pc, #96]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee6:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	4914      	ldr	r1, [pc, #80]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d021      	beq.n	8001f44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	490e      	ldr	r1, [pc, #56]	@ (8001f40 <HAL_GPIO_Init+0x2d0>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e021      	b.n	8001f52 <HAL_GPIO_Init+0x2e2>
 8001f0e:	bf00      	nop
 8001f10:	10320000 	.word	0x10320000
 8001f14:	10310000 	.word	0x10310000
 8001f18:	10220000 	.word	0x10220000
 8001f1c:	10210000 	.word	0x10210000
 8001f20:	10120000 	.word	0x10120000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40010800 	.word	0x40010800
 8001f34:	40010c00 	.word	0x40010c00
 8001f38:	40011000 	.word	0x40011000
 8001f3c:	40011400 	.word	0x40011400
 8001f40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	43db      	mvns	r3, r3
 8001f4c:	4909      	ldr	r1, [pc, #36]	@ (8001f74 <HAL_GPIO_Init+0x304>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	3301      	adds	r3, #1
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f47f ae8e 	bne.w	8001c84 <HAL_GPIO_Init+0x14>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	372c      	adds	r7, #44	@ 0x2c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40010400 	.word	0x40010400

08001f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	807b      	strh	r3, [r7, #2]
 8001f84:	4613      	mov	r3, r2
 8001f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f88:	787b      	ldrb	r3, [r7, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f94:	e003      	b.n	8001f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f96:	887b      	ldrh	r3, [r7, #2]
 8001f98:	041a      	lsls	r2, r3, #16
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	611a      	str	r2, [r3, #16]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e272      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 8087 	beq.w	80020d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fc8:	4b92      	ldr	r3, [pc, #584]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d00c      	beq.n	8001fee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d112      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
 8001fe0:	4b8c      	ldr	r3, [pc, #560]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fec:	d10b      	bne.n	8002006 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fee:	4b89      	ldr	r3, [pc, #548]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d06c      	beq.n	80020d4 <HAL_RCC_OscConfig+0x12c>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d168      	bne.n	80020d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e24c      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200e:	d106      	bne.n	800201e <HAL_RCC_OscConfig+0x76>
 8002010:	4b80      	ldr	r3, [pc, #512]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a7f      	ldr	r2, [pc, #508]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	e02e      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x98>
 8002026:	4b7b      	ldr	r3, [pc, #492]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7a      	ldr	r2, [pc, #488]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800202c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b78      	ldr	r3, [pc, #480]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a77      	ldr	r2, [pc, #476]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002038:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0xbc>
 800204a:	4b72      	ldr	r3, [pc, #456]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a71      	ldr	r2, [pc, #452]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6f      	ldr	r3, [pc, #444]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6e      	ldr	r2, [pc, #440]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xd4>
 8002064:	4b6b      	ldr	r3, [pc, #428]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a6a      	ldr	r2, [pc, #424]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a67      	ldr	r2, [pc, #412]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ffd6 	bl	8001034 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7fe ffd2 	bl	8001034 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e200      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xe4>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe ffc2 	bl	8001034 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7fe ffbe 	bl	8001034 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1ec      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x10c>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d063      	beq.n	80021aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b4c      	ldr	r3, [pc, #304]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ee:	4b49      	ldr	r3, [pc, #292]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
 80020fa:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1c0      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4939      	ldr	r1, [pc, #228]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e03a      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b36      	ldr	r3, [pc, #216]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002142:	f7fe ff77 	bl	8001034 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe ff73 	bl	8001034 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1a1      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	4b2d      	ldr	r3, [pc, #180]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4927      	ldr	r1, [pc, #156]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_RCC_OscConfig+0x270>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe ff56 	bl	8001034 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7fe ff52 	bl	8001034 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e180      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03a      	beq.n	800222c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d019      	beq.n	80021f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <HAL_RCC_OscConfig+0x274>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7fe ff36 	bl	8001034 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe ff32 	bl	8001034 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e160      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 face 	bl	800278c <RCC_Delay>
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f2:	4b0a      	ldr	r3, [pc, #40]	@ (800221c <HAL_RCC_OscConfig+0x274>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f8:	f7fe ff1c 	bl	8001034 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fe:	e00f      	b.n	8002220 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002200:	f7fe ff18 	bl	8001034 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d908      	bls.n	8002220 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e146      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	42420000 	.word	0x42420000
 800221c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	4b92      	ldr	r3, [pc, #584]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e9      	bne.n	8002200 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a6 	beq.w	8002386 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800223e:	4b8b      	ldr	r3, [pc, #556]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10d      	bne.n	8002266 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224a:	4b88      	ldr	r3, [pc, #544]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	4a87      	ldr	r2, [pc, #540]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002254:	61d3      	str	r3, [r2, #28]
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	4b82      	ldr	r3, [pc, #520]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d118      	bne.n	80022a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002272:	4b7f      	ldr	r3, [pc, #508]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7e      	ldr	r2, [pc, #504]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 8002278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800227c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227e:	f7fe fed9 	bl	8001034 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002286:	f7fe fed5 	bl	8001034 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b64      	cmp	r3, #100	@ 0x64
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e103      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	4b75      	ldr	r3, [pc, #468]	@ (8002470 <HAL_RCC_OscConfig+0x4c8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x312>
 80022ac:	4b6f      	ldr	r3, [pc, #444]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a6e      	ldr	r2, [pc, #440]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	e02d      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x334>
 80022c2:	4b6a      	ldr	r3, [pc, #424]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a69      	ldr	r2, [pc, #420]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b67      	ldr	r3, [pc, #412]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a66      	ldr	r2, [pc, #408]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
 80022da:	e01c      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x356>
 80022e4:	4b61      	ldr	r3, [pc, #388]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	6a1b      	ldr	r3, [r3, #32]
 80022e8:	4a60      	ldr	r2, [pc, #384]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6213      	str	r3, [r2, #32]
 80022f0:	4b5e      	ldr	r3, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	4a5d      	ldr	r2, [pc, #372]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6213      	str	r3, [r2, #32]
 80022fc:	e00b      	b.n	8002316 <HAL_RCC_OscConfig+0x36e>
 80022fe:	4b5b      	ldr	r3, [pc, #364]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a5a      	ldr	r2, [pc, #360]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	f023 0301 	bic.w	r3, r3, #1
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	4b58      	ldr	r3, [pc, #352]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a57      	ldr	r2, [pc, #348]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002310:	f023 0304 	bic.w	r3, r3, #4
 8002314:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d015      	beq.n	800234a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231e:	f7fe fe89 	bl	8001034 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e00a      	b.n	800233c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fe85 	bl	8001034 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002334:	4293      	cmp	r3, r2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e0b1      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ee      	beq.n	8002326 <HAL_RCC_OscConfig+0x37e>
 8002348:	e014      	b.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800234a:	f7fe fe73 	bl	8001034 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	e00a      	b.n	8002368 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002352:	f7fe fe6f 	bl	8001034 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e09b      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1ee      	bne.n	8002352 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002374:	7dfb      	ldrb	r3, [r7, #23]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d105      	bne.n	8002386 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237a:	4b3c      	ldr	r3, [pc, #240]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a3b      	ldr	r2, [pc, #236]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002380:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8087 	beq.w	800249e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d061      	beq.n	8002460 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d146      	bne.n	8002432 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b33      	ldr	r3, [pc, #204]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fe43 	bl	8001034 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fe3f 	bl	8001034 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e06d      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c4:	4b29      	ldr	r3, [pc, #164]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a1b      	ldr	r3, [r3, #32]
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4921      	ldr	r1, [pc, #132]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a19      	ldr	r1, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023fc:	430b      	orrs	r3, r1
 80023fe:	491b      	ldr	r1, [pc, #108]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002404:	4b1b      	ldr	r3, [pc, #108]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002406:	2201      	movs	r2, #1
 8002408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240a:	f7fe fe13 	bl	8001034 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fe0f 	bl	8001034 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e03d      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002424:	4b11      	ldr	r3, [pc, #68]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x46a>
 8002430:	e035      	b.n	800249e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_OscConfig+0x4cc>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fdfc 	bl	8001034 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe fdf8 	bl	8001034 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e026      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	4b06      	ldr	r3, [pc, #24]	@ (800246c <HAL_RCC_OscConfig+0x4c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x498>
 800245e:	e01e      	b.n	800249e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e019      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
 8002474:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_RCC_OscConfig+0x500>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	429a      	cmp	r2, r3
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0d0      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d910      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b67      	ldr	r3, [pc, #412]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 0207 	bic.w	r2, r3, #7
 80024d6:	4965      	ldr	r1, [pc, #404]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4313      	orrs	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024de:	4b63      	ldr	r3, [pc, #396]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e0b8      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d020      	beq.n	800253e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d005      	beq.n	8002514 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002508:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a58      	ldr	r2, [pc, #352]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800250e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002512:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0308 	and.w	r3, r3, #8
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002520:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	4a52      	ldr	r2, [pc, #328]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800252a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800252c:	4b50      	ldr	r3, [pc, #320]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	494d      	ldr	r1, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d040      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b47      	ldr	r3, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d115      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e07f      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e073      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3d      	ldr	r3, [pc, #244]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06b      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4936      	ldr	r1, [pc, #216]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe fd4a 	bl	8001034 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7fe fd46 	bl	8001034 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e053      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b27      	ldr	r3, [pc, #156]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d210      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b24      	ldr	r3, [pc, #144]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4922      	ldr	r1, [pc, #136]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b20      	ldr	r3, [pc, #128]	@ (800266c <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e032      	b.n	8002662 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4916      	ldr	r1, [pc, #88]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002626:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800263a:	f000 f821 	bl	8002680 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0b      	ldr	r3, [pc, #44]	@ (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490a      	ldr	r1, [pc, #40]	@ (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	fa22 f303 	lsr.w	r3, r2, r3
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <HAL_RCC_ClockConfig+0x1cc>)
 8002654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002656:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_ClockConfig+0x1d0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fca8 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	40022000 	.word	0x40022000
 8002670:	40021000 	.word	0x40021000
 8002674:	08006de4 	.word	0x08006de4
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004

08002680 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800269a:	4b1e      	ldr	r3, [pc, #120]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x94>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d002      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x30>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d003      	beq.n	80026b6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ae:	e027      	b.n	8002700 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x98>)
 80026b2:	613b      	str	r3, [r7, #16]
      break;
 80026b4:	e027      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	0c9b      	lsrs	r3, r3, #18
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	4a17      	ldr	r2, [pc, #92]	@ (800271c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026c0:	5cd3      	ldrb	r3, [r2, r3]
 80026c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d010      	beq.n	80026f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <HAL_RCC_GetSysClockFreq+0x94>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	0c5b      	lsrs	r3, r3, #17
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x98>)
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	e004      	b.n	80026fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002724 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	613b      	str	r3, [r7, #16]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b05      	ldr	r3, [pc, #20]	@ (8002718 <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	613b      	str	r3, [r7, #16]
      break;
 8002704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002706:	693b      	ldr	r3, [r7, #16]
}
 8002708:	4618      	mov	r0, r3
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40021000 	.word	0x40021000
 8002718:	007a1200 	.word	0x007a1200
 800271c:	08006dfc 	.word	0x08006dfc
 8002720:	08006e0c 	.word	0x08006e0c
 8002724:	003d0900 	.word	0x003d0900

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b02      	ldr	r3, [pc, #8]	@ (8002738 <HAL_RCC_GetHCLKFreq+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000000 	.word	0x20000000

0800273c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002740:	f7ff fff2 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b05      	ldr	r3, [pc, #20]	@ (800275c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4903      	ldr	r1, [pc, #12]	@ (8002760 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	08006df4 	.word	0x08006df4

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002768:	f7ff ffde 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b05      	ldr	r3, [pc, #20]	@ (8002784 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4903      	ldr	r1, [pc, #12]	@ (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021000 	.word	0x40021000
 8002788:	08006df4 	.word	0x08006df4

0800278c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002794:	4b0a      	ldr	r3, [pc, #40]	@ (80027c0 <RCC_Delay+0x34>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	@ (80027c4 <RCC_Delay+0x38>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	0a5b      	lsrs	r3, r3, #9
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	fb02 f303 	mul.w	r3, r2, r3
 80027a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027a8:	bf00      	nop
  }
  while (Delay --);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	60fa      	str	r2, [r7, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f9      	bne.n	80027a8 <RCC_Delay+0x1c>
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	20000000 	.word	0x20000000
 80027c4:	10624dd3 	.word	0x10624dd3

080027c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d07d      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027e4:	2300      	movs	r3, #0
 80027e6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b4c      	ldr	r3, [pc, #304]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	61d3      	str	r3, [r2, #28]
 8002800:	4b49      	ldr	r3, [pc, #292]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002810:	4b46      	ldr	r3, [pc, #280]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d118      	bne.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800281c:	4b43      	ldr	r3, [pc, #268]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a42      	ldr	r2, [pc, #264]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002828:	f7fe fc04 	bl	8001034 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	e008      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002830:	f7fe fc00 	bl	8001034 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e06d      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002842:	4b3a      	ldr	r3, [pc, #232]	@ (800292c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800284e:	4b36      	ldr	r3, [pc, #216]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002856:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d02e      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	429a      	cmp	r2, r3
 800286a:	d027      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286c:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002874:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002876:	4b2e      	ldr	r3, [pc, #184]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800287c:	4b2c      	ldr	r3, [pc, #176]	@ (8002930 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002882:	4a29      	ldr	r2, [pc, #164]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d014      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fbcf 	bl	8001034 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7fe fbcb 	bl	8001034 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e036      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ee      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4917      	ldr	r1, [pc, #92]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d105      	bne.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d4:	4b14      	ldr	r3, [pc, #80]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a13      	ldr	r2, [pc, #76]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	490b      	ldr	r1, [pc, #44]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d008      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800290a:	4b07      	ldr	r3, [pc, #28]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	4313      	orrs	r3, r2
 800291a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	42420440 	.word	0x42420440

08002934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e042      	b.n	80029cc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d106      	bne.n	8002960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe f9d8 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2224      	movs	r2, #36	@ 0x24
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fcb5 	bl	80032e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800298c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695a      	ldr	r2, [r3, #20]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800299c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	4613      	mov	r3, r2
 80029e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d121      	bne.n	8002a32 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_UART_Transmit_IT+0x26>
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e01a      	b.n	8002a34 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	88fa      	ldrh	r2, [r7, #6]
 8002a08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	88fa      	ldrh	r2, [r7, #6]
 8002a0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2221      	movs	r2, #33	@ 0x21
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68da      	ldr	r2, [r3, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e000      	b.n	8002a34 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
  }
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b0ba      	sub	sp, #232	@ 0xe8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10f      	bne.n	8002aa6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d009      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x66>
 8002a92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fb63 	bl	800316a <UART_Receive_IT>
      return;
 8002aa4:	e25b      	b.n	8002f5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f000 80de 	beq.w	8002c6c <HAL_UART_IRQHandler+0x22c>
 8002ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80d1 	beq.w	8002c6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_UART_IRQHandler+0xae>
 8002ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d005      	beq.n	8002aee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	f043 0201 	orr.w	r2, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 0304 	and.w	r3, r3, #4
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00b      	beq.n	8002b12 <HAL_UART_IRQHandler+0xd2>
 8002afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d005      	beq.n	8002b12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0a:	f043 0202 	orr.w	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_UART_IRQHandler+0xf6>
 8002b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <HAL_UART_IRQHandler+0x126>
 8002b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d005      	beq.n	8002b66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5e:	f043 0208 	orr.w	r2, r3, #8
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 81f2 	beq.w	8002f54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b74:	f003 0320 	and.w	r3, r3, #32
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_UART_IRQHandler+0x14e>
 8002b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 faee 	bl	800316a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf14      	ite	ne
 8002b9c:	2301      	movne	r3, #1
 8002b9e:	2300      	moveq	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <HAL_UART_IRQHandler+0x17a>
 8002bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d04f      	beq.n	8002c5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f9f8 	bl	8002fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d041      	beq.n	8002c52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bdc:	e853 3f00 	ldrex	r3, [r3]
 8002be0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002be4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002be8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3314      	adds	r3, #20
 8002bf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002bfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002c06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002c0a:	e841 2300 	strex	r3, r2, [r1]
 8002c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002c12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1d9      	bne.n	8002bce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d013      	beq.n	8002c4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c26:	4a7e      	ldr	r2, [pc, #504]	@ (8002e20 <HAL_UART_IRQHandler+0x3e0>)
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe ffa6 	bl	8001b80 <HAL_DMA_Abort_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c44:	4610      	mov	r0, r2
 8002c46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c48:	e00e      	b.n	8002c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f99c 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	e00a      	b.n	8002c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f998 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c58:	e006      	b.n	8002c68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f994 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c66:	e175      	b.n	8002f54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c68:	bf00      	nop
    return;
 8002c6a:	e173      	b.n	8002f54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f040 814f 	bne.w	8002f14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c7a:	f003 0310 	and.w	r3, r3, #16
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 8148 	beq.w	8002f14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8141 	beq.w	8002f14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b6 	beq.w	8002e24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8145 	beq.w	8002f58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	f080 813e 	bcs.w	8002f58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002ce2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	f000 8088 	beq.w	8002e00 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	330c      	adds	r3, #12
 8002d18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d1c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d24:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d2c:	e841 2300 	strex	r3, r2, [r1]
 8002d30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1d9      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3314      	adds	r3, #20
 8002d42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d46:	e853 3f00 	ldrex	r3, [r3]
 8002d4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d4e:	f023 0301 	bic.w	r3, r3, #1
 8002d52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3314      	adds	r3, #20
 8002d5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d60:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d6c:	e841 2300 	strex	r3, r2, [r1]
 8002d70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e1      	bne.n	8002d3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d82:	e853 3f00 	ldrex	r3, [r3]
 8002d86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3314      	adds	r3, #20
 8002d98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002da2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002daa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e3      	bne.n	8002d78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002dce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd0:	f023 0310 	bic.w	r3, r3, #16
 8002dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002de2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002de4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002de8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002df0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e3      	bne.n	8002dbe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fe85 	bl	8001b0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f8bf 	bl	8002f9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e1c:	e09c      	b.n	8002f58 <HAL_UART_IRQHandler+0x518>
 8002e1e:	bf00      	nop
 8002e20:	08003075 	.word	0x08003075
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 808e 	beq.w	8002f5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8089 	beq.w	8002f5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	330c      	adds	r3, #12
 8002e50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e54:	e853 3f00 	ldrex	r3, [r3]
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e76:	e841 2300 	strex	r3, r2, [r1]
 8002e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1e3      	bne.n	8002e4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3314      	adds	r3, #20
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8c:	e853 3f00 	ldrex	r3, [r3]
 8002e90:	623b      	str	r3, [r7, #32]
   return(result);
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3314      	adds	r3, #20
 8002ea2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002ea6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eae:	e841 2300 	strex	r3, r2, [r1]
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1e3      	bne.n	8002e82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2220      	movs	r2, #32
 8002ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	330c      	adds	r3, #12
 8002ece:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	e853 3f00 	ldrex	r3, [r3]
 8002ed6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0310 	bic.w	r3, r3, #16
 8002ede:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002eec:	61fa      	str	r2, [r7, #28]
 8002eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	69b9      	ldr	r1, [r7, #24]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	e841 2300 	strex	r3, r2, [r1]
 8002ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1e3      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f844 	bl	8002f9a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f12:	e023      	b.n	8002f5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_UART_IRQHandler+0x4f4>
 8002f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d003      	beq.n	8002f34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f8b5 	bl	800309c <UART_Transmit_IT>
    return;
 8002f32:	e014      	b.n	8002f5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <HAL_UART_IRQHandler+0x51e>
 8002f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f8f4 	bl	800313a <UART_EndTransmit_IT>
    return;
 8002f52:	e004      	b.n	8002f5e <HAL_UART_IRQHandler+0x51e>
    return;
 8002f54:	bf00      	nop
 8002f56:	e002      	b.n	8002f5e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <HAL_UART_IRQHandler+0x51e>
      return;
 8002f5c:	bf00      	nop
  }
}
 8002f5e:	37e8      	adds	r7, #232	@ 0xe8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr

08002f76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bc80      	pop	{r7}
 8002f86:	4770      	bx	lr

08002f88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bc80      	pop	{r7}
 8002fae:	4770      	bx	lr

08002fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b095      	sub	sp, #84	@ 0x54
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	330c      	adds	r3, #12
 8002fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc2:	e853 3f00 	ldrex	r3, [r3]
 8002fc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fd8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fe0:	e841 2300 	strex	r3, r2, [r1]
 8002fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e5      	bne.n	8002fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3314      	adds	r3, #20
 8002ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3314      	adds	r3, #20
 800300a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800300c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800300e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e5      	bne.n	8002fec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003024:	2b01      	cmp	r3, #1
 8003026:	d119      	bne.n	800305c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	330c      	adds	r3, #12
 800302e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	e853 3f00 	ldrex	r3, [r3]
 8003036:	60bb      	str	r3, [r7, #8]
   return(result);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f023 0310 	bic.w	r3, r3, #16
 800303e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003048:	61ba      	str	r2, [r7, #24]
 800304a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	e841 2300 	strex	r3, r2, [r1]
 8003054:	613b      	str	r3, [r7, #16]
   return(result);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e5      	bne.n	8003028 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2220      	movs	r2, #32
 8003060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800306a:	bf00      	nop
 800306c:	3754      	adds	r7, #84	@ 0x54
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff ff7a 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003094:	bf00      	nop
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b21      	cmp	r3, #33	@ 0x21
 80030ae:	d13e      	bne.n	800312e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b8:	d114      	bne.n	80030e4 <UART_Transmit_IT+0x48>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d110      	bne.n	80030e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	1c9a      	adds	r2, r3, #2
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	621a      	str	r2, [r3, #32]
 80030e2:	e008      	b.n	80030f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	1c59      	adds	r1, r3, #1
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6211      	str	r1, [r2, #32]
 80030ee:	781a      	ldrb	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29b      	uxth	r3, r3
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4619      	mov	r1, r3
 8003104:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003118:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003128:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800312e:	2302      	movs	r3, #2
  }
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b082      	sub	sp, #8
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68da      	ldr	r2, [r3, #12]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003150:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff ff02 	bl	8002f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b08c      	sub	sp, #48	@ 0x30
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b22      	cmp	r3, #34	@ 0x22
 800317c:	f040 80ae 	bne.w	80032dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003188:	d117      	bne.n	80031ba <UART_Receive_IT+0x50>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d113      	bne.n	80031ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	1c9a      	adds	r2, r3, #2
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80031b8:	e026      	b.n	8003208 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80031c0:	2300      	movs	r3, #0
 80031c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031cc:	d007      	beq.n	80031de <UART_Receive_IT+0x74>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <UART_Receive_IT+0x82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e008      	b.n	80031fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29b      	uxth	r3, r3
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4619      	mov	r1, r3
 8003216:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003218:	2b00      	cmp	r3, #0
 800321a:	d15d      	bne.n	80032d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0220 	bic.w	r2, r2, #32
 800322a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800323a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	2b01      	cmp	r3, #1
 8003260:	d135      	bne.n	80032ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	330c      	adds	r3, #12
 800326e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f023 0310 	bic.w	r3, r3, #16
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003288:	623a      	str	r2, [r7, #32]
 800328a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	69f9      	ldr	r1, [r7, #28]
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	61bb      	str	r3, [r7, #24]
   return(result);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d10a      	bne.n	80032c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f7ff fe67 	bl	8002f9a <HAL_UARTEx_RxEventCallback>
 80032cc:	e002      	b.n	80032d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff fe51 	bl	8002f76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	e002      	b.n	80032de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3730      	adds	r7, #48	@ 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68da      	ldr	r2, [r3, #12]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	4313      	orrs	r3, r2
 8003316:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003322:	f023 030c 	bic.w	r3, r3, #12
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	68b9      	ldr	r1, [r7, #8]
 800332c:	430b      	orrs	r3, r1
 800332e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2c      	ldr	r2, [pc, #176]	@ (80033fc <UART_SetConfig+0x114>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d103      	bne.n	8003358 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003350:	f7ff fa08 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	e002      	b.n	800335e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003358:	f7ff f9f0 	bl	800273c <HAL_RCC_GetPCLK1Freq>
 800335c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	009a      	lsls	r2, r3, #2
 8003368:	441a      	add	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	fbb2 f3f3 	udiv	r3, r2, r3
 8003374:	4a22      	ldr	r2, [pc, #136]	@ (8003400 <UART_SetConfig+0x118>)
 8003376:	fba2 2303 	umull	r2, r3, r2, r3
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	0119      	lsls	r1, r3, #4
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009a      	lsls	r2, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fbb2 f2f3 	udiv	r2, r2, r3
 8003394:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <UART_SetConfig+0x118>)
 8003396:	fba3 0302 	umull	r0, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2064      	movs	r0, #100	@ 0x64
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	@ 0x32
 80033a8:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <UART_SetConfig+0x118>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033b4:	4419      	add	r1, r3
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	009a      	lsls	r2, r3, #2
 80033c0:	441a      	add	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <UART_SetConfig+0x118>)
 80033ce:	fba3 0302 	umull	r0, r3, r3, r2
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	2064      	movs	r0, #100	@ 0x64
 80033d6:	fb00 f303 	mul.w	r3, r0, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	3332      	adds	r3, #50	@ 0x32
 80033e0:	4a07      	ldr	r2, [pc, #28]	@ (8003400 <UART_SetConfig+0x118>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	095b      	lsrs	r3, r3, #5
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	440a      	add	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40013800 	.word	0x40013800
 8003400:	51eb851f 	.word	0x51eb851f

08003404 <__NVIC_SetPriority>:
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	6039      	str	r1, [r7, #0]
 800340e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	2b00      	cmp	r3, #0
 8003416:	db0a      	blt.n	800342e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	490c      	ldr	r1, [pc, #48]	@ (8003450 <__NVIC_SetPriority+0x4c>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	0112      	lsls	r2, r2, #4
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	440b      	add	r3, r1
 8003428:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800342c:	e00a      	b.n	8003444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4908      	ldr	r1, [pc, #32]	@ (8003454 <__NVIC_SetPriority+0x50>)
 8003434:	79fb      	ldrb	r3, [r7, #7]
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3b04      	subs	r3, #4
 800343c:	0112      	lsls	r2, r2, #4
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	440b      	add	r3, r1
 8003442:	761a      	strb	r2, [r3, #24]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	e000e100 	.word	0xe000e100
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800345c:	2100      	movs	r1, #0
 800345e:	f06f 0004 	mvn.w	r0, #4
 8003462:	f7ff ffcf 	bl	8003404 <__NVIC_SetPriority>
#endif
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003472:	f3ef 8305 	mrs	r3, IPSR
 8003476:	603b      	str	r3, [r7, #0]
  return(result);
 8003478:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800347e:	f06f 0305 	mvn.w	r3, #5
 8003482:	607b      	str	r3, [r7, #4]
 8003484:	e00c      	b.n	80034a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003486:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <osKernelInitialize+0x40>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d105      	bne.n	800349a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800348e:	4b07      	ldr	r3, [pc, #28]	@ (80034ac <osKernelInitialize+0x40>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
 8003498:	e002      	b.n	80034a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800349a:	f04f 33ff 	mov.w	r3, #4294967295
 800349e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034a0:	687b      	ldr	r3, [r7, #4]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr
 80034ac:	20000148 	.word	0x20000148

080034b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034b6:	f3ef 8305 	mrs	r3, IPSR
 80034ba:	603b      	str	r3, [r7, #0]
  return(result);
 80034bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80034c2:	f06f 0305 	mvn.w	r3, #5
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	e010      	b.n	80034ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034ca:	4b0b      	ldr	r3, [pc, #44]	@ (80034f8 <osKernelStart+0x48>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d109      	bne.n	80034e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034d2:	f7ff ffc1 	bl	8003458 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034d6:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <osKernelStart+0x48>)
 80034d8:	2202      	movs	r2, #2
 80034da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034dc:	f001 fabe 	bl	8004a5c <vTaskStartScheduler>
      stat = osOK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	e002      	b.n	80034ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034ec:	687b      	ldr	r3, [r7, #4]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000148 	.word	0x20000148

080034fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08e      	sub	sp, #56	@ 0x38
 8003500:	af04      	add	r7, sp, #16
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800350c:	f3ef 8305 	mrs	r3, IPSR
 8003510:	617b      	str	r3, [r7, #20]
  return(result);
 8003512:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003514:	2b00      	cmp	r3, #0
 8003516:	d17e      	bne.n	8003616 <osThreadNew+0x11a>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d07b      	beq.n	8003616 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003522:	2318      	movs	r3, #24
 8003524:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800352a:	f04f 33ff 	mov.w	r3, #4294967295
 800352e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d045      	beq.n	80035c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <osThreadNew+0x48>
        name = attr->name;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d008      	beq.n	800356a <osThreadNew+0x6e>
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	2b38      	cmp	r3, #56	@ 0x38
 800355c:	d805      	bhi.n	800356a <osThreadNew+0x6e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <osThreadNew+0x72>
        return (NULL);
 800356a:	2300      	movs	r3, #0
 800356c:	e054      	b.n	8003618 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	089b      	lsrs	r3, r3, #2
 800357c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00e      	beq.n	80035a4 <osThreadNew+0xa8>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b5b      	cmp	r3, #91	@ 0x5b
 800358c:	d90a      	bls.n	80035a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <osThreadNew+0xa8>
        mem = 1;
 800359e:	2301      	movs	r3, #1
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	e010      	b.n	80035c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10c      	bne.n	80035c6 <osThreadNew+0xca>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d108      	bne.n	80035c6 <osThreadNew+0xca>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <osThreadNew+0xca>
          mem = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	61bb      	str	r3, [r7, #24]
 80035c0:	e001      	b.n	80035c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d110      	bne.n	80035ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035d4:	9202      	str	r2, [sp, #8]
 80035d6:	9301      	str	r3, [sp, #4]
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6a3a      	ldr	r2, [r7, #32]
 80035e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f001 f85e 	bl	80046a4 <xTaskCreateStatic>
 80035e8:	4603      	mov	r3, r0
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	e013      	b.n	8003616 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d110      	bne.n	8003616 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f107 0310 	add.w	r3, r7, #16
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f001 f8ac 	bl	8004764 <xTaskCreate>
 800360c:	4603      	mov	r3, r0
 800360e:	2b01      	cmp	r3, #1
 8003610:	d001      	beq.n	8003616 <osThreadNew+0x11a>
            hTask = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003616:	693b      	ldr	r3, [r7, #16]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3728      	adds	r7, #40	@ 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003628:	f3ef 8305 	mrs	r3, IPSR
 800362c:	60bb      	str	r3, [r7, #8]
  return(result);
 800362e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <osDelay+0x1c>
    stat = osErrorISR;
 8003634:	f06f 0305 	mvn.w	r3, #5
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e007      	b.n	800364c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800363c:	2300      	movs	r3, #0
 800363e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f001 f9d2 	bl	80049f0 <vTaskDelay>
    }
  }

  return (stat);
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003656:	b580      	push	{r7, lr}
 8003658:	b08a      	sub	sp, #40	@ 0x28
 800365a:	af02      	add	r7, sp, #8
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003666:	f3ef 8305 	mrs	r3, IPSR
 800366a:	613b      	str	r3, [r7, #16]
  return(result);
 800366c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800366e:	2b00      	cmp	r3, #0
 8003670:	d15f      	bne.n	8003732 <osMessageQueueNew+0xdc>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d05c      	beq.n	8003732 <osMessageQueueNew+0xdc>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d059      	beq.n	8003732 <osMessageQueueNew+0xdc>
    mem = -1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d029      	beq.n	80036de <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d012      	beq.n	80036b8 <osMessageQueueNew+0x62>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2b4f      	cmp	r3, #79	@ 0x4f
 8003698:	d90e      	bls.n	80036b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	fb01 f303 	mul.w	r3, r1, r3
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d302      	bcc.n	80036b8 <osMessageQueueNew+0x62>
        mem = 1;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e014      	b.n	80036e2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <osMessageQueueNew+0x8c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10c      	bne.n	80036e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d108      	bne.n	80036e2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d104      	bne.n	80036e2 <osMessageQueueNew+0x8c>
          mem = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	e001      	b.n	80036e2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d10b      	bne.n	8003700 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2100      	movs	r1, #0
 80036f2:	9100      	str	r1, [sp, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa4a 	bl	8003b90 <xQueueGenericCreateStatic>
 80036fc:	61f8      	str	r0, [r7, #28]
 80036fe:	e008      	b.n	8003712 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d105      	bne.n	8003712 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003706:	2200      	movs	r2, #0
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fabd 	bl	8003c8a <xQueueGenericCreate>
 8003710:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <osMessageQueueNew+0xd0>
        name = attr->name;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	e001      	b.n	800372a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	69f8      	ldr	r0, [r7, #28]
 800372e:	f000 ff5d 	bl	80045ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003732:	69fb      	ldr	r3, [r7, #28]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3720      	adds	r7, #32
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003750:	2300      	movs	r3, #0
 8003752:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003754:	f3ef 8305 	mrs	r3, IPSR
 8003758:	617b      	str	r3, [r7, #20]
  return(result);
 800375a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800375c:	2b00      	cmp	r3, #0
 800375e:	d028      	beq.n	80037b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d005      	beq.n	8003772 <osMessageQueuePut+0x36>
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <osMessageQueuePut+0x36>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003772:	f06f 0303 	mvn.w	r3, #3
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e038      	b.n	80037ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800377e:	f107 0210 	add.w	r2, r7, #16
 8003782:	2300      	movs	r3, #0
 8003784:	68b9      	ldr	r1, [r7, #8]
 8003786:	69b8      	ldr	r0, [r7, #24]
 8003788:	f000 fbe0 	bl	8003f4c <xQueueGenericSendFromISR>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d003      	beq.n	800379a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003792:	f06f 0302 	mvn.w	r3, #2
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e028      	b.n	80037ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d025      	beq.n	80037ec <osMessageQueuePut+0xb0>
 80037a0:	4b15      	ldr	r3, [pc, #84]	@ (80037f8 <osMessageQueuePut+0xbc>)
 80037a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	e01c      	b.n	80037ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <osMessageQueuePut+0x82>
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d103      	bne.n	80037c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80037be:	f06f 0303 	mvn.w	r3, #3
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	e012      	b.n	80037ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80037c6:	2300      	movs	r3, #0
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	68b9      	ldr	r1, [r7, #8]
 80037cc:	69b8      	ldr	r0, [r7, #24]
 80037ce:	f000 fabb 	bl	8003d48 <xQueueGenericSend>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d009      	beq.n	80037ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d003      	beq.n	80037e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80037de:	f06f 0301 	mvn.w	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e002      	b.n	80037ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80037e6:	f06f 0302 	mvn.w	r3, #2
 80037ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80037ec:	69fb      	ldr	r3, [r7, #28]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
 8003808:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800380e:	2300      	movs	r3, #0
 8003810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003812:	f3ef 8305 	mrs	r3, IPSR
 8003816:	617b      	str	r3, [r7, #20]
  return(result);
 8003818:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800381a:	2b00      	cmp	r3, #0
 800381c:	d028      	beq.n	8003870 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <osMessageQueueGet+0x34>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <osMessageQueueGet+0x34>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003830:	f06f 0303 	mvn.w	r3, #3
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	e037      	b.n	80038a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800383c:	f107 0310 	add.w	r3, r7, #16
 8003840:	461a      	mov	r2, r3
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	69b8      	ldr	r0, [r7, #24]
 8003846:	f000 fd01 	bl	800424c <xQueueReceiveFromISR>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d003      	beq.n	8003858 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003850:	f06f 0302 	mvn.w	r3, #2
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e027      	b.n	80038a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d024      	beq.n	80038a8 <osMessageQueueGet+0xac>
 800385e:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <osMessageQueueGet+0xb8>)
 8003860:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003864:	601a      	str	r2, [r3, #0]
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	e01b      	b.n	80038a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d002      	beq.n	800387c <osMessageQueueGet+0x80>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d103      	bne.n	8003884 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800387c:	f06f 0303 	mvn.w	r3, #3
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e011      	b.n	80038a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	69b8      	ldr	r0, [r7, #24]
 800388a:	f000 fbfd 	bl	8004088 <xQueueReceive>
 800388e:	4603      	mov	r3, r0
 8003890:	2b01      	cmp	r3, #1
 8003892:	d009      	beq.n	80038a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800389a:	f06f 0301 	mvn.w	r3, #1
 800389e:	61fb      	str	r3, [r7, #28]
 80038a0:	e002      	b.n	80038a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80038a2:	f06f 0302 	mvn.w	r3, #2
 80038a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80038a8:	69fb      	ldr	r3, [r7, #28]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3720      	adds	r7, #32
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d102      	bne.n	80038d0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00e      	b.n	80038ee <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d0:	f3ef 8305 	mrs	r3, IPSR
 80038d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80038d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f000 fd56 	bl	800438e <uxQueueMessagesWaitingFromISR>
 80038e2:	6178      	str	r0, [r7, #20]
 80038e4:	e003      	b.n	80038ee <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80038e6:	6938      	ldr	r0, [r7, #16]
 80038e8:	f000 fd32 	bl	8004350 <uxQueueMessagesWaiting>
 80038ec:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80038ee:	697b      	ldr	r3, [r7, #20]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4a06      	ldr	r2, [pc, #24]	@ (8003920 <vApplicationGetIdleTaskMemory+0x28>)
 8003908:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	4a05      	ldr	r2, [pc, #20]	@ (8003924 <vApplicationGetIdleTaskMemory+0x2c>)
 800390e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2280      	movs	r2, #128	@ 0x80
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	2000014c 	.word	0x2000014c
 8003924:	200001a8 	.word	0x200001a8

08003928 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a07      	ldr	r2, [pc, #28]	@ (8003954 <vApplicationGetTimerTaskMemory+0x2c>)
 8003938:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4a06      	ldr	r2, [pc, #24]	@ (8003958 <vApplicationGetTimerTaskMemory+0x30>)
 800393e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	bc80      	pop	{r7}
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200003a8 	.word	0x200003a8
 8003958:	20000404 	.word	0x20000404

0800395c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f103 0208 	add.w	r2, r3, #8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f04f 32ff 	mov.w	r2, #4294967295
 8003974:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f103 0208 	add.w	r2, r3, #8
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f103 0208 	add.w	r2, r3, #8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr

0800399a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d103      	bne.n	8003a18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e00c      	b.n	8003a32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e002      	b.n	8003a26 <vListInsert+0x2e>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	60fb      	str	r3, [r7, #12]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d2f6      	bcs.n	8003a20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr

08003a68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d103      	bne.n	8003a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3714      	adds	r7, #20
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
	...

08003abc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10b      	bne.n	8003ae8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	e7fd      	b.n	8003ae4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ae8:	f002 f930 	bl	8005d4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	68f9      	ldr	r1, [r7, #12]
 8003af6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	441a      	add	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	441a      	add	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	22ff      	movs	r2, #255	@ 0xff
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	22ff      	movs	r2, #255	@ 0xff
 8003b34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d114      	bne.n	8003b68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01a      	beq.n	8003b7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3310      	adds	r3, #16
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fa12 	bl	8004f74 <xTaskRemoveFromEventList>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d012      	beq.n	8003b7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <xQueueGenericReset+0xd0>)
 8003b58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	e009      	b.n	8003b7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3310      	adds	r3, #16
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fef5 	bl	800395c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3324      	adds	r3, #36	@ 0x24
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7ff fef0 	bl	800395c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b7c:	f002 f916 	bl	8005dac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b80:	2301      	movs	r3, #1
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	e000ed04 	.word	0xe000ed04

08003b90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08e      	sub	sp, #56	@ 0x38
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d10b      	bne.n	8003bbc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <xQueueGenericCreateStatic+0x56>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <xQueueGenericCreateStatic+0x5a>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericCreateStatic+0x5c>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <xQueueGenericCreateStatic+0x84>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <xQueueGenericCreateStatic+0x88>
 8003c14:	2301      	movs	r3, #1
 8003c16:	e000      	b.n	8003c1a <xQueueGenericCreateStatic+0x8a>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10b      	bne.n	8003c36 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	61fb      	str	r3, [r7, #28]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c36:	2350      	movs	r3, #80	@ 0x50
 8003c38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b50      	cmp	r3, #80	@ 0x50
 8003c3e:	d00b      	beq.n	8003c58 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c44:	f383 8811 	msr	BASEPRI, r3
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	f3bf 8f4f 	dsb	sy
 8003c50:	61bb      	str	r3, [r7, #24]
}
 8003c52:	bf00      	nop
 8003c54:	bf00      	nop
 8003c56:	e7fd      	b.n	8003c54 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00d      	beq.n	8003c80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c6c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4613      	mov	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	68b9      	ldr	r1, [r7, #8]
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f840 	bl	8003d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3730      	adds	r7, #48	@ 0x30
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b08a      	sub	sp, #40	@ 0x28
 8003c8e:	af02      	add	r7, sp, #8
 8003c90:	60f8      	str	r0, [r7, #12]
 8003c92:	60b9      	str	r1, [r7, #8]
 8003c94:	4613      	mov	r3, r2
 8003c96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	613b      	str	r3, [r7, #16]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3350      	adds	r3, #80	@ 0x50
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 f943 	bl	8005f50 <pvPortMalloc>
 8003cca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d011      	beq.n	8003cf6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3350      	adds	r3, #80	@ 0x50
 8003cda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ce4:	79fa      	ldrb	r2, [r7, #7]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	4613      	mov	r3, r2
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f805 	bl	8003d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d103      	bne.n	8003d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	e002      	b.n	8003d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d2e:	2101      	movs	r1, #1
 8003d30:	69b8      	ldr	r0, [r7, #24]
 8003d32:	f7ff fec3 	bl	8003abc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d3e:	bf00      	nop
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08e      	sub	sp, #56	@ 0x38
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <xQueueGenericSend+0x34>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d103      	bne.n	8003d8a <xQueueGenericSend+0x42>
 8003d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <xQueueGenericSend+0x46>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e000      	b.n	8003d90 <xQueueGenericSend+0x48>
 8003d8e:	2300      	movs	r3, #0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xQueueGenericSend+0x64>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d103      	bne.n	8003dba <xQueueGenericSend+0x72>
 8003db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d101      	bne.n	8003dbe <xQueueGenericSend+0x76>
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <xQueueGenericSend+0x78>
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d10b      	bne.n	8003ddc <xQueueGenericSend+0x94>
	__asm volatile
 8003dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	623b      	str	r3, [r7, #32]
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	e7fd      	b.n	8003dd8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ddc:	f001 fa8a 	bl	80052f4 <xTaskGetSchedulerState>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <xQueueGenericSend+0xa4>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <xQueueGenericSend+0xa8>
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <xQueueGenericSend+0xaa>
 8003df0:	2300      	movs	r3, #0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <xQueueGenericSend+0xc6>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	61fb      	str	r3, [r7, #28]
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	e7fd      	b.n	8003e0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e0e:	f001 ff9d 	bl	8005d4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <xQueueGenericSend+0xdc>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d129      	bne.n	8003e78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e2a:	f000 face 	bl	80043ca <prvCopyDataToQueue>
 8003e2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d010      	beq.n	8003e5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3a:	3324      	adds	r3, #36	@ 0x24
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f001 f899 	bl	8004f74 <xTaskRemoveFromEventList>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d013      	beq.n	8003e70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e48:	4b3f      	ldr	r3, [pc, #252]	@ (8003f48 <xQueueGenericSend+0x200>)
 8003e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	e00a      	b.n	8003e70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e60:	4b39      	ldr	r3, [pc, #228]	@ (8003f48 <xQueueGenericSend+0x200>)
 8003e62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e70:	f001 ff9c 	bl	8005dac <vPortExitCritical>
				return pdPASS;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e063      	b.n	8003f40 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d103      	bne.n	8003e86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e7e:	f001 ff95 	bl	8005dac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e82:	2300      	movs	r3, #0
 8003e84:	e05c      	b.n	8003f40 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d106      	bne.n	8003e9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f8d3 	bl	800503c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e9a:	f001 ff87 	bl	8005dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e9e:	f000 fe45 	bl	8004b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ea2:	f001 ff53 	bl	8005d4c <vPortEnterCritical>
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eac:	b25b      	sxtb	r3, r3
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d103      	bne.n	8003ebc <xQueueGenericSend+0x174>
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGenericSend+0x18a>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ed2:	f001 ff6b 	bl	8005dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed6:	1d3a      	adds	r2, r7, #4
 8003ed8:	f107 0314 	add.w	r3, r7, #20
 8003edc:	4611      	mov	r1, r2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f001 f8c2 	bl	8005068 <xTaskCheckForTimeOut>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d124      	bne.n	8003f34 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003eea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003eec:	f000 fb65 	bl	80045ba <prvIsQueueFull>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d018      	beq.n	8003f28 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	3310      	adds	r3, #16
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4611      	mov	r1, r2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 ffe6 	bl	8004ed0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f06:	f000 faf0 	bl	80044ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f0a:	f000 fe1d 	bl	8004b48 <xTaskResumeAll>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f47f af7c 	bne.w	8003e0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f16:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <xQueueGenericSend+0x200>)
 8003f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	e772      	b.n	8003e0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f2a:	f000 fade 	bl	80044ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2e:	f000 fe0b 	bl	8004b48 <xTaskResumeAll>
 8003f32:	e76c      	b.n	8003e0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f36:	f000 fad8 	bl	80044ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f3a:	f000 fe05 	bl	8004b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3738      	adds	r7, #56	@ 0x38
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b090      	sub	sp, #64	@ 0x40
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10b      	bne.n	8003f7c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f76:	bf00      	nop
 8003f78:	bf00      	nop
 8003f7a:	e7fd      	b.n	8003f78 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <xQueueGenericSendFromISR+0x3e>
 8003f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <xQueueGenericSendFromISR+0x42>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <xQueueGenericSendFromISR+0x44>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d10b      	bne.n	8003fac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f98:	f383 8811 	msr	BASEPRI, r3
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fa6:	bf00      	nop
 8003fa8:	bf00      	nop
 8003faa:	e7fd      	b.n	8003fa8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d103      	bne.n	8003fba <xQueueGenericSendFromISR+0x6e>
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <xQueueGenericSendFromISR+0x72>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <xQueueGenericSendFromISR+0x74>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	623b      	str	r3, [r7, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fdc:	f001 ff78 	bl	8005ed0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fe0:	f3ef 8211 	mrs	r2, BASEPRI
 8003fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	61fa      	str	r2, [r7, #28]
 8003ff6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ffa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004000:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004002:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004004:	429a      	cmp	r2, r3
 8004006:	d302      	bcc.n	800400e <xQueueGenericSendFromISR+0xc2>
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d12f      	bne.n	800406e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800400e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004010:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004014:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800401c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	68b9      	ldr	r1, [r7, #8]
 8004022:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004024:	f000 f9d1 	bl	80043ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004028:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800402c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004030:	d112      	bne.n	8004058 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800403a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403c:	3324      	adds	r3, #36	@ 0x24
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ff98 	bl	8004f74 <xTaskRemoveFromEventList>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00e      	beq.n	8004068 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00b      	beq.n	8004068 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e007      	b.n	8004068 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004058:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800405c:	3301      	adds	r3, #1
 800405e:	b2db      	uxtb	r3, r3
 8004060:	b25a      	sxtb	r2, r3
 8004062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004068:	2301      	movs	r3, #1
 800406a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800406c:	e001      	b.n	8004072 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800406e:	2300      	movs	r3, #0
 8004070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004074:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800407c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800407e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004080:	4618      	mov	r0, r3
 8004082:	3740      	adds	r7, #64	@ 0x40
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08c      	sub	sp, #48	@ 0x30
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004094:	2300      	movs	r3, #0
 8004096:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800409c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <xQueueReceive+0x32>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	623b      	str	r3, [r7, #32]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <xQueueReceive+0x40>
 80040c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <xQueueReceive+0x44>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <xQueueReceive+0x46>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <xQueueReceive+0x62>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	61fb      	str	r3, [r7, #28]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040ea:	f001 f903 	bl	80052f4 <xTaskGetSchedulerState>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <xQueueReceive+0x72>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <xQueueReceive+0x76>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <xQueueReceive+0x78>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d10b      	bne.n	800411c <xQueueReceive+0x94>
	__asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	61bb      	str	r3, [r7, #24]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800411c:	f001 fe16 	bl	8005d4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01f      	beq.n	800416c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800412c:	68b9      	ldr	r1, [r7, #8]
 800412e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004130:	f000 f9b5 	bl	800449e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004136:	1e5a      	subs	r2, r3, #1
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00f      	beq.n	8004164 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004146:	3310      	adds	r3, #16
 8004148:	4618      	mov	r0, r3
 800414a:	f000 ff13 	bl	8004f74 <xTaskRemoveFromEventList>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d007      	beq.n	8004164 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004154:	4b3c      	ldr	r3, [pc, #240]	@ (8004248 <xQueueReceive+0x1c0>)
 8004156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004164:	f001 fe22 	bl	8005dac <vPortExitCritical>
				return pdPASS;
 8004168:	2301      	movs	r3, #1
 800416a:	e069      	b.n	8004240 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004172:	f001 fe1b 	bl	8005dac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004176:	2300      	movs	r3, #0
 8004178:	e062      	b.n	8004240 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004180:	f107 0310 	add.w	r3, r7, #16
 8004184:	4618      	mov	r0, r3
 8004186:	f000 ff59 	bl	800503c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800418a:	2301      	movs	r3, #1
 800418c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800418e:	f001 fe0d 	bl	8005dac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004192:	f000 fccb 	bl	8004b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004196:	f001 fdd9 	bl	8005d4c <vPortEnterCritical>
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a6:	d103      	bne.n	80041b0 <xQueueReceive+0x128>
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b6:	b25b      	sxtb	r3, r3
 80041b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041bc:	d103      	bne.n	80041c6 <xQueueReceive+0x13e>
 80041be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c6:	f001 fdf1 	bl	8005dac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041ca:	1d3a      	adds	r2, r7, #4
 80041cc:	f107 0310 	add.w	r3, r7, #16
 80041d0:	4611      	mov	r1, r2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 ff48 	bl	8005068 <xTaskCheckForTimeOut>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d123      	bne.n	8004226 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041e0:	f000 f9d5 	bl	800458e <prvIsQueueEmpty>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d017      	beq.n	800421a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	3324      	adds	r3, #36	@ 0x24
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	4611      	mov	r1, r2
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 fe6c 	bl	8004ed0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041fa:	f000 f976 	bl	80044ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041fe:	f000 fca3 	bl	8004b48 <xTaskResumeAll>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d189      	bne.n	800411c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004208:	4b0f      	ldr	r3, [pc, #60]	@ (8004248 <xQueueReceive+0x1c0>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	e780      	b.n	800411c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800421a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800421c:	f000 f965 	bl	80044ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004220:	f000 fc92 	bl	8004b48 <xTaskResumeAll>
 8004224:	e77a      	b.n	800411c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004228:	f000 f95f 	bl	80044ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800422c:	f000 fc8c 	bl	8004b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004232:	f000 f9ac 	bl	800458e <prvIsQueueEmpty>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	f43f af6f 	beq.w	800411c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800423e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004240:	4618      	mov	r0, r3
 8004242:	3730      	adds	r7, #48	@ 0x30
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	e000ed04 	.word	0xe000ed04

0800424c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08e      	sub	sp, #56	@ 0x38
 8004250:	af00      	add	r7, sp, #0
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10b      	bne.n	800427a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	623b      	str	r3, [r7, #32]
}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	e7fd      	b.n	8004276 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d103      	bne.n	8004288 <xQueueReceiveFromISR+0x3c>
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <xQueueReceiveFromISR+0x40>
 8004288:	2301      	movs	r3, #1
 800428a:	e000      	b.n	800428e <xQueueReceiveFromISR+0x42>
 800428c:	2300      	movs	r3, #0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	61fb      	str	r3, [r7, #28]
}
 80042a4:	bf00      	nop
 80042a6:	bf00      	nop
 80042a8:	e7fd      	b.n	80042a6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042aa:	f001 fe11 	bl	8005ed0 <vPortValidateInterruptPriority>
	__asm volatile
 80042ae:	f3ef 8211 	mrs	r2, BASEPRI
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	61ba      	str	r2, [r7, #24]
 80042c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80042c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d02f      	beq.n	8004336 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80042e4:	f000 f8db 	bl	800449e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80042f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d112      	bne.n	8004320 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d016      	beq.n	8004330 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004304:	3310      	adds	r3, #16
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fe34 	bl	8004f74 <xTaskRemoveFromEventList>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00e      	beq.n	8004330 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e007      	b.n	8004330 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004320:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004324:	3301      	adds	r3, #1
 8004326:	b2db      	uxtb	r3, r3
 8004328:	b25a      	sxtb	r2, r3
 800432a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004330:	2301      	movs	r3, #1
 8004332:	637b      	str	r3, [r7, #52]	@ 0x34
 8004334:	e001      	b.n	800433a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004336:	2300      	movs	r3, #0
 8004338:	637b      	str	r3, [r7, #52]	@ 0x34
 800433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f383 8811 	msr	BASEPRI, r3
}
 8004344:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004348:	4618      	mov	r0, r3
 800434a:	3738      	adds	r7, #56	@ 0x38
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10b      	bne.n	8004376 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	60bb      	str	r3, [r7, #8]
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	e7fd      	b.n	8004372 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8004376:	f001 fce9 	bl	8005d4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800437e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004380:	f001 fd14 	bl	8005dac <vPortExitCritical>

	return uxReturn;
 8004384:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800438e:	b480      	push	{r7}
 8004390:	b087      	sub	sp, #28
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	e7fd      	b.n	80043b4 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80043be:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80043c0:	4618      	mov	r0, r3
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bc80      	pop	{r7}
 80043c8:	4770      	bx	lr

080043ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b086      	sub	sp, #24
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10d      	bne.n	8004404 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d14d      	bne.n	800448c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 ff9b 	bl	8005330 <xTaskPriorityDisinherit>
 80043fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	609a      	str	r2, [r3, #8]
 8004402:	e043      	b.n	800448c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d119      	bne.n	800443e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6858      	ldr	r0, [r3, #4]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	461a      	mov	r2, r3
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	f001 ffdd 	bl	80063d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	441a      	add	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	429a      	cmp	r2, r3
 8004432:	d32b      	bcc.n	800448c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
 800443c:	e026      	b.n	800448c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68d8      	ldr	r0, [r3, #12]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	461a      	mov	r2, r3
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	f001 ffc3 	bl	80063d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	425b      	negs	r3, r3
 8004458:	441a      	add	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d207      	bcs.n	800447a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	425b      	negs	r3, r3
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d105      	bne.n	800448c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	3b01      	subs	r3, #1
 800448a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004494:	697b      	ldr	r3, [r7, #20]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800449e:	b580      	push	{r7, lr}
 80044a0:	b082      	sub	sp, #8
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
 80044a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d018      	beq.n	80044e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	441a      	add	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d303      	bcc.n	80044d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68d9      	ldr	r1, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	461a      	mov	r2, r3
 80044dc:	6838      	ldr	r0, [r7, #0]
 80044de:	f001 ff79 	bl	80063d4 <memcpy>
	}
}
 80044e2:	bf00      	nop
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044f2:	f001 fc2b 	bl	8005d4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044fe:	e011      	b.n	8004524 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	2b00      	cmp	r3, #0
 8004506:	d012      	beq.n	800452e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3324      	adds	r3, #36	@ 0x24
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fd31 	bl	8004f74 <xTaskRemoveFromEventList>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004518:	f000 fe0a 	bl	8005130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	3b01      	subs	r3, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004528:	2b00      	cmp	r3, #0
 800452a:	dce9      	bgt.n	8004500 <prvUnlockQueue+0x16>
 800452c:	e000      	b.n	8004530 <prvUnlockQueue+0x46>
					break;
 800452e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	22ff      	movs	r2, #255	@ 0xff
 8004534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004538:	f001 fc38 	bl	8005dac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800453c:	f001 fc06 	bl	8005d4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004546:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004548:	e011      	b.n	800456e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d012      	beq.n	8004578 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3310      	adds	r3, #16
 8004556:	4618      	mov	r0, r3
 8004558:	f000 fd0c 	bl	8004f74 <xTaskRemoveFromEventList>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004562:	f000 fde5 	bl	8005130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004566:	7bbb      	ldrb	r3, [r7, #14]
 8004568:	3b01      	subs	r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800456e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004572:	2b00      	cmp	r3, #0
 8004574:	dce9      	bgt.n	800454a <prvUnlockQueue+0x60>
 8004576:	e000      	b.n	800457a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004578:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	22ff      	movs	r2, #255	@ 0xff
 800457e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004582:	f001 fc13 	bl	8005dac <vPortExitCritical>
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004596:	f001 fbd9 	bl	8005d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045a2:	2301      	movs	r3, #1
 80045a4:	60fb      	str	r3, [r7, #12]
 80045a6:	e001      	b.n	80045ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ac:	f001 fbfe 	bl	8005dac <vPortExitCritical>

	return xReturn;
 80045b0:	68fb      	ldr	r3, [r7, #12]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b084      	sub	sp, #16
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045c2:	f001 fbc3 	bl	8005d4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d102      	bne.n	80045d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045d2:	2301      	movs	r3, #1
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e001      	b.n	80045dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045dc:	f001 fbe6 	bl	8005dac <vPortExitCritical>

	return xReturn;
 80045e0:	68fb      	ldr	r3, [r7, #12]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
	...

080045ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	e014      	b.n	8004626 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004638 <vQueueAddToRegistry+0x4c>)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004608:	490b      	ldr	r1, [pc, #44]	@ (8004638 <vQueueAddToRegistry+0x4c>)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004612:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <vQueueAddToRegistry+0x4c>)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	4413      	add	r3, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800461e:	e006      	b.n	800462e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b07      	cmp	r3, #7
 800462a:	d9e7      	bls.n	80045fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr
 8004638:	20000804 	.word	0x20000804

0800463c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800464c:	f001 fb7e 	bl	8005d4c <vPortEnterCritical>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004656:	b25b      	sxtb	r3, r3
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d103      	bne.n	8004666 <vQueueWaitForMessageRestricted+0x2a>
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800466c:	b25b      	sxtb	r3, r3
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004672:	d103      	bne.n	800467c <vQueueWaitForMessageRestricted+0x40>
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800467c:	f001 fb96 	bl	8005dac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	3324      	adds	r3, #36	@ 0x24
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68b9      	ldr	r1, [r7, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fc43 	bl	8004f1c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004696:	6978      	ldr	r0, [r7, #20]
 8004698:	f7ff ff27 	bl	80044ea <prvUnlockQueue>
	}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b08e      	sub	sp, #56	@ 0x38
 80046a8:	af04      	add	r7, sp, #16
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	61fb      	str	r3, [r7, #28]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046ee:	235c      	movs	r3, #92	@ 0x5c
 80046f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80046f6:	d00b      	beq.n	8004710 <xTaskCreateStatic+0x6c>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	61bb      	str	r3, [r7, #24]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004710:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01e      	beq.n	8004756 <xTaskCreateStatic+0xb2>
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471a:	2b00      	cmp	r3, #0
 800471c:	d01b      	beq.n	8004756 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004726:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004730:	2300      	movs	r3, #0
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	f107 0314 	add.w	r3, r7, #20
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f850 	bl	80047ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800474e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004750:	f000 f8de 	bl	8004910 <prvAddNewTaskToReadyList>
 8004754:	e001      	b.n	800475a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800475a:	697b      	ldr	r3, [r7, #20]
	}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	@ 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004764:	b580      	push	{r7, lr}
 8004766:	b08c      	sub	sp, #48	@ 0x30
 8004768:	af04      	add	r7, sp, #16
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	4613      	mov	r3, r2
 8004772:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fbe9 	bl	8005f50 <pvPortMalloc>
 800477e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00e      	beq.n	80047a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004786:	205c      	movs	r0, #92	@ 0x5c
 8004788:	f001 fbe2 	bl	8005f50 <pvPortMalloc>
 800478c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	631a      	str	r2, [r3, #48]	@ 0x30
 800479a:	e005      	b.n	80047a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800479c:	6978      	ldr	r0, [r7, #20]
 800479e:	f001 fca5 	bl	80060ec <vPortFree>
 80047a2:	e001      	b.n	80047a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047a4:	2300      	movs	r3, #0
 80047a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d017      	beq.n	80047de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047b6:	88fa      	ldrh	r2, [r7, #6]
 80047b8:	2300      	movs	r3, #0
 80047ba:	9303      	str	r3, [sp, #12]
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	9302      	str	r3, [sp, #8]
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	9301      	str	r3, [sp, #4]
 80047c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f80e 	bl	80047ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047d2:	69f8      	ldr	r0, [r7, #28]
 80047d4:	f000 f89c 	bl	8004910 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047d8:	2301      	movs	r3, #1
 80047da:	61bb      	str	r3, [r7, #24]
 80047dc:	e002      	b.n	80047e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047e4:	69bb      	ldr	r3, [r7, #24]
	}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b088      	sub	sp, #32
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	461a      	mov	r2, r3
 8004806:	21a5      	movs	r1, #165	@ 0xa5
 8004808:	f001 fdb0 	bl	800636c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004816:	3b01      	subs	r3, #1
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f023 0307 	bic.w	r3, r3, #7
 8004824:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	617b      	str	r3, [r7, #20]
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d01f      	beq.n	800488e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e012      	b.n	800487a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	7819      	ldrb	r1, [r3, #0]
 800485c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	3334      	adds	r3, #52	@ 0x34
 8004864:	460a      	mov	r2, r1
 8004866:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d006      	beq.n	8004882 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b0f      	cmp	r3, #15
 800487e:	d9e9      	bls.n	8004854 <prvInitialiseNewTask+0x66>
 8004880:	e000      	b.n	8004884 <prvInitialiseNewTask+0x96>
			{
				break;
 8004882:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800488c:	e003      	b.n	8004896 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800488e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004898:	2b37      	cmp	r3, #55	@ 0x37
 800489a:	d901      	bls.n	80048a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800489c:	2337      	movs	r3, #55	@ 0x37
 800489e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ae:	2200      	movs	r2, #0
 80048b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b4:	3304      	adds	r3, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f86f 	bl	800399a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048be:	3318      	adds	r3, #24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7ff f86a 	bl	800399a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	2200      	movs	r2, #0
 80048e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	69b8      	ldr	r0, [r7, #24]
 80048f0:	f001 f93a 	bl	8005b68 <pxPortInitialiseStack>
 80048f4:	4602      	mov	r2, r0
 80048f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004904:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004906:	bf00      	nop
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004918:	f001 fa18 	bl	8005d4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800491c:	4b2d      	ldr	r3, [pc, #180]	@ (80049d4 <prvAddNewTaskToReadyList+0xc4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	4a2c      	ldr	r2, [pc, #176]	@ (80049d4 <prvAddNewTaskToReadyList+0xc4>)
 8004924:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004926:	4b2c      	ldr	r3, [pc, #176]	@ (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d109      	bne.n	8004942 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800492e:	4a2a      	ldr	r2, [pc, #168]	@ (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004934:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <prvAddNewTaskToReadyList+0xc4>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d110      	bne.n	800495e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800493c:	f000 fc1c 	bl	8005178 <prvInitialiseTaskLists>
 8004940:	e00d      	b.n	800495e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004942:	4b26      	ldr	r3, [pc, #152]	@ (80049dc <prvAddNewTaskToReadyList+0xcc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800494a:	4b23      	ldr	r3, [pc, #140]	@ (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	429a      	cmp	r2, r3
 8004956:	d802      	bhi.n	800495e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004958:	4a1f      	ldr	r2, [pc, #124]	@ (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800495e:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <prvAddNewTaskToReadyList+0xd0>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3301      	adds	r3, #1
 8004964:	4a1e      	ldr	r2, [pc, #120]	@ (80049e0 <prvAddNewTaskToReadyList+0xd0>)
 8004966:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004968:	4b1d      	ldr	r3, [pc, #116]	@ (80049e0 <prvAddNewTaskToReadyList+0xd0>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	4b1b      	ldr	r3, [pc, #108]	@ (80049e4 <prvAddNewTaskToReadyList+0xd4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d903      	bls.n	8004984 <prvAddNewTaskToReadyList+0x74>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <prvAddNewTaskToReadyList+0xd4>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a15      	ldr	r2, [pc, #84]	@ (80049e8 <prvAddNewTaskToReadyList+0xd8>)
 8004992:	441a      	add	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7ff f809 	bl	80039b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049a0:	f001 fa04 	bl	8005dac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049a4:	4b0d      	ldr	r3, [pc, #52]	@ (80049dc <prvAddNewTaskToReadyList+0xcc>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00e      	beq.n	80049ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049ac:	4b0a      	ldr	r3, [pc, #40]	@ (80049d8 <prvAddNewTaskToReadyList+0xc8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d207      	bcs.n	80049ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049ba:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <prvAddNewTaskToReadyList+0xdc>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ca:	bf00      	nop
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000d18 	.word	0x20000d18
 80049d8:	20000844 	.word	0x20000844
 80049dc:	20000d24 	.word	0x20000d24
 80049e0:	20000d34 	.word	0x20000d34
 80049e4:	20000d20 	.word	0x20000d20
 80049e8:	20000848 	.word	0x20000848
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d018      	beq.n	8004a34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a02:	4b14      	ldr	r3, [pc, #80]	@ (8004a54 <vTaskDelay+0x64>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00b      	beq.n	8004a22 <vTaskDelay+0x32>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	60bb      	str	r3, [r7, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a22:	f000 f883 	bl	8004b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a26:	2100      	movs	r1, #0
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 fcf1 	bl	8005410 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a2e:	f000 f88b 	bl	8004b48 <xTaskResumeAll>
 8004a32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d107      	bne.n	8004a4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a3a:	4b07      	ldr	r3, [pc, #28]	@ (8004a58 <vTaskDelay+0x68>)
 8004a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a4a:	bf00      	nop
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000d40 	.word	0x20000d40
 8004a58:	e000ed04 	.word	0xe000ed04

08004a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	@ 0x28
 8004a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a6a:	463a      	mov	r2, r7
 8004a6c:	1d39      	adds	r1, r7, #4
 8004a6e:	f107 0308 	add.w	r3, r7, #8
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fe ff40 	bl	80038f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68ba      	ldr	r2, [r7, #8]
 8004a7e:	9202      	str	r2, [sp, #8]
 8004a80:	9301      	str	r3, [sp, #4]
 8004a82:	2300      	movs	r3, #0
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	2300      	movs	r3, #0
 8004a88:	460a      	mov	r2, r1
 8004a8a:	4922      	ldr	r1, [pc, #136]	@ (8004b14 <vTaskStartScheduler+0xb8>)
 8004a8c:	4822      	ldr	r0, [pc, #136]	@ (8004b18 <vTaskStartScheduler+0xbc>)
 8004a8e:	f7ff fe09 	bl	80046a4 <xTaskCreateStatic>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4a21      	ldr	r2, [pc, #132]	@ (8004b1c <vTaskStartScheduler+0xc0>)
 8004a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a98:	4b20      	ldr	r3, [pc, #128]	@ (8004b1c <vTaskStartScheduler+0xc0>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d002      	beq.n	8004aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e001      	b.n	8004aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ab0:	f000 fd02 	bl	80054b8 <xTimerCreateTimerTask>
 8004ab4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d116      	bne.n	8004aea <vTaskStartScheduler+0x8e>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	613b      	str	r3, [r7, #16]
}
 8004ace:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad0:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <vTaskStartScheduler+0xc4>)
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ad8:	4b12      	ldr	r3, [pc, #72]	@ (8004b24 <vTaskStartScheduler+0xc8>)
 8004ada:	2201      	movs	r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <vTaskStartScheduler+0xcc>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ae4:	f001 f8c0 	bl	8005c68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ae8:	e00f      	b.n	8004b0a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d10b      	bne.n	8004b0a <vTaskStartScheduler+0xae>
	__asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60fb      	str	r3, [r7, #12]
}
 8004b04:	bf00      	nop
 8004b06:	bf00      	nop
 8004b08:	e7fd      	b.n	8004b06 <vTaskStartScheduler+0xaa>
}
 8004b0a:	bf00      	nop
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	08006d30 	.word	0x08006d30
 8004b18:	08005149 	.word	0x08005149
 8004b1c:	20000d3c 	.word	0x20000d3c
 8004b20:	20000d38 	.word	0x20000d38
 8004b24:	20000d24 	.word	0x20000d24
 8004b28:	20000d1c 	.word	0x20000d1c

08004b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b30:	4b04      	ldr	r3, [pc, #16]	@ (8004b44 <vTaskSuspendAll+0x18>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	4a03      	ldr	r2, [pc, #12]	@ (8004b44 <vTaskSuspendAll+0x18>)
 8004b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000d40 	.word	0x20000d40

08004b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b56:	4b42      	ldr	r3, [pc, #264]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b76:	f001 f8e9 	bl	8005d4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d162      	bne.n	8004c52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b8c:	4b35      	ldr	r3, [pc, #212]	@ (8004c64 <xTaskResumeAll+0x11c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05e      	beq.n	8004c52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b94:	e02f      	b.n	8004bf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b96:	4b34      	ldr	r3, [pc, #208]	@ (8004c68 <xTaskResumeAll+0x120>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3318      	adds	r3, #24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe ff60 	bl	8003a68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe ff5b 	bl	8003a68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <xTaskResumeAll+0x124>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d903      	bls.n	8004bc6 <xTaskResumeAll+0x7e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <xTaskResumeAll+0x124>)
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4a27      	ldr	r2, [pc, #156]	@ (8004c70 <xTaskResumeAll+0x128>)
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fe fee8 	bl	80039b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be6:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <xTaskResumeAll+0x12c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <xTaskResumeAll+0x130>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c68 <xTaskResumeAll+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cb      	bne.n	8004b96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c04:	f000 fb56 	bl	80052b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c08:	4b1c      	ldr	r3, [pc, #112]	@ (8004c7c <xTaskResumeAll+0x134>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c14:	f000 f844 	bl	8004ca0 <xTaskIncrementTick>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <xTaskResumeAll+0x130>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f1      	bne.n	8004c14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004c30:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <xTaskResumeAll+0x134>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c36:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <xTaskResumeAll+0x130>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <xTaskResumeAll+0x138>)
 8004c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f001 f8ab 	bl	8005dac <vPortExitCritical>

	return xAlreadyYielded;
 8004c56:	68bb      	ldr	r3, [r7, #8]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000d40 	.word	0x20000d40
 8004c64:	20000d18 	.word	0x20000d18
 8004c68:	20000cd8 	.word	0x20000cd8
 8004c6c:	20000d20 	.word	0x20000d20
 8004c70:	20000848 	.word	0x20000848
 8004c74:	20000844 	.word	0x20000844
 8004c78:	20000d2c 	.word	0x20000d2c
 8004c7c:	20000d28 	.word	0x20000d28
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c8a:	4b04      	ldr	r3, [pc, #16]	@ (8004c9c <xTaskGetTickCount+0x18>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	20000d1c 	.word	0x20000d1c

08004ca0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004caa:	4b4f      	ldr	r3, [pc, #316]	@ (8004de8 <xTaskIncrementTick+0x148>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 8090 	bne.w	8004dd4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	@ (8004dec <xTaskIncrementTick+0x14c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8004dec <xTaskIncrementTick+0x14c>)
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d121      	bne.n	8004d0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cc8:	4b49      	ldr	r3, [pc, #292]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	603b      	str	r3, [r7, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xTaskIncrementTick+0x46>
 8004cea:	4b41      	ldr	r3, [pc, #260]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	4b40      	ldr	r3, [pc, #256]	@ (8004df4 <xTaskIncrementTick+0x154>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8004df4 <xTaskIncrementTick+0x154>)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8004df8 <xTaskIncrementTick+0x158>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a3c      	ldr	r2, [pc, #240]	@ (8004df8 <xTaskIncrementTick+0x158>)
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	f000 fad4 	bl	80052b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <xTaskIncrementTick+0x15c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d349      	bcc.n	8004daa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d16:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d20:	4b36      	ldr	r3, [pc, #216]	@ (8004dfc <xTaskIncrementTick+0x15c>)
 8004d22:	f04f 32ff 	mov.w	r2, #4294967295
 8004d26:	601a      	str	r2, [r3, #0]
					break;
 8004d28:	e03f      	b.n	8004daa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2a:	4b31      	ldr	r3, [pc, #196]	@ (8004df0 <xTaskIncrementTick+0x150>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d203      	bcs.n	8004d4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d42:	4a2e      	ldr	r2, [pc, #184]	@ (8004dfc <xTaskIncrementTick+0x15c>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d48:	e02f      	b.n	8004daa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fe fe8a 	bl	8003a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3318      	adds	r3, #24
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fe fe81 	bl	8003a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6a:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <xTaskIncrementTick+0x160>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d903      	bls.n	8004d7a <xTaskIncrementTick+0xda>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	4a22      	ldr	r2, [pc, #136]	@ (8004e00 <xTaskIncrementTick+0x160>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <xTaskIncrementTick+0x164>)
 8004d88:	441a      	add	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4610      	mov	r0, r2
 8004d92:	f7fe fe0e 	bl	80039b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <xTaskIncrementTick+0x168>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d3b8      	bcc.n	8004d16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004da4:	2301      	movs	r3, #1
 8004da6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004da8:	e7b5      	b.n	8004d16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004daa:	4b17      	ldr	r3, [pc, #92]	@ (8004e08 <xTaskIncrementTick+0x168>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db0:	4914      	ldr	r1, [pc, #80]	@ (8004e04 <xTaskIncrementTick+0x164>)
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	440b      	add	r3, r1
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d901      	bls.n	8004dc6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004dc6:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <xTaskIncrementTick+0x16c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	e004      	b.n	8004dde <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8004e10 <xTaskIncrementTick+0x170>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3301      	adds	r3, #1
 8004dda:	4a0d      	ldr	r2, [pc, #52]	@ (8004e10 <xTaskIncrementTick+0x170>)
 8004ddc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004dde:	697b      	ldr	r3, [r7, #20]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000d40 	.word	0x20000d40
 8004dec:	20000d1c 	.word	0x20000d1c
 8004df0:	20000cd0 	.word	0x20000cd0
 8004df4:	20000cd4 	.word	0x20000cd4
 8004df8:	20000d30 	.word	0x20000d30
 8004dfc:	20000d38 	.word	0x20000d38
 8004e00:	20000d20 	.word	0x20000d20
 8004e04:	20000848 	.word	0x20000848
 8004e08:	20000844 	.word	0x20000844
 8004e0c:	20000d2c 	.word	0x20000d2c
 8004e10:	20000d28 	.word	0x20000d28

08004e14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e1a:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <vTaskSwitchContext+0xa8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e22:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <vTaskSwitchContext+0xac>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e28:	e042      	b.n	8004eb0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004e2a:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <vTaskSwitchContext+0xac>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e30:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <vTaskSwitchContext+0xb0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e011      	b.n	8004e5c <vTaskSwitchContext+0x48>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <vTaskSwitchContext+0x42>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	607b      	str	r3, [r7, #4]
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <vTaskSwitchContext+0x3e>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	491a      	ldr	r1, [pc, #104]	@ (8004ec8 <vTaskSwitchContext+0xb4>)
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	440b      	add	r3, r1
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0e3      	beq.n	8004e38 <vTaskSwitchContext+0x24>
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <vTaskSwitchContext+0xb4>)
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60bb      	str	r3, [r7, #8]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	685a      	ldr	r2, [r3, #4]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	605a      	str	r2, [r3, #4]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3308      	adds	r3, #8
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d104      	bne.n	8004ea0 <vTaskSwitchContext+0x8c>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	605a      	str	r2, [r3, #4]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <vTaskSwitchContext+0xb8>)
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4a06      	ldr	r2, [pc, #24]	@ (8004ec4 <vTaskSwitchContext+0xb0>)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bc80      	pop	{r7}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20000d40 	.word	0x20000d40
 8004ec0:	20000d2c 	.word	0x20000d2c
 8004ec4:	20000d20 	.word	0x20000d20
 8004ec8:	20000848 	.word	0x20000848
 8004ecc:	20000844 	.word	0x20000844

08004ed0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	60fb      	str	r3, [r7, #12]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef8:	4b07      	ldr	r3, [pc, #28]	@ (8004f18 <vTaskPlaceOnEventList+0x48>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3318      	adds	r3, #24
 8004efe:	4619      	mov	r1, r3
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f7fe fd79 	bl	80039f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f06:	2101      	movs	r1, #1
 8004f08:	6838      	ldr	r0, [r7, #0]
 8004f0a:	f000 fa81 	bl	8005410 <prvAddCurrentTaskToDelayedList>
}
 8004f0e:	bf00      	nop
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000844 	.word	0x20000844

08004f1c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	617b      	str	r3, [r7, #20]
}
 8004f40:	bf00      	nop
 8004f42:	bf00      	nop
 8004f44:	e7fd      	b.n	8004f42 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f46:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3318      	adds	r3, #24
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f7fe fd2f 	bl	80039b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	68b8      	ldr	r0, [r7, #8]
 8004f64:	f000 fa54 	bl	8005410 <prvAddCurrentTaskToDelayedList>
	}
 8004f68:	bf00      	nop
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	20000844 	.word	0x20000844

08004f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7fe fd5e 	bl	8003a68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fac:	4b1d      	ldr	r3, [pc, #116]	@ (8005024 <xTaskRemoveFromEventList+0xb0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d11d      	bne.n	8004ff0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe fd55 	bl	8003a68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc2:	4b19      	ldr	r3, [pc, #100]	@ (8005028 <xTaskRemoveFromEventList+0xb4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d903      	bls.n	8004fd2 <xTaskRemoveFromEventList+0x5e>
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fce:	4a16      	ldr	r2, [pc, #88]	@ (8005028 <xTaskRemoveFromEventList+0xb4>)
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4a13      	ldr	r2, [pc, #76]	@ (800502c <xTaskRemoveFromEventList+0xb8>)
 8004fe0:	441a      	add	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7fe fce2 	bl	80039b2 <vListInsertEnd>
 8004fee:	e005      	b.n	8004ffc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	3318      	adds	r3, #24
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	480e      	ldr	r0, [pc, #56]	@ (8005030 <xTaskRemoveFromEventList+0xbc>)
 8004ff8:	f7fe fcdb 	bl	80039b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005000:	4b0c      	ldr	r3, [pc, #48]	@ (8005034 <xTaskRemoveFromEventList+0xc0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005006:	429a      	cmp	r2, r3
 8005008:	d905      	bls.n	8005016 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800500e:	4b0a      	ldr	r3, [pc, #40]	@ (8005038 <xTaskRemoveFromEventList+0xc4>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	e001      	b.n	800501a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005016:	2300      	movs	r3, #0
 8005018:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800501a:	697b      	ldr	r3, [r7, #20]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000d40 	.word	0x20000d40
 8005028:	20000d20 	.word	0x20000d20
 800502c:	20000848 	.word	0x20000848
 8005030:	20000cd8 	.word	0x20000cd8
 8005034:	20000844 	.word	0x20000844
 8005038:	20000d2c 	.word	0x20000d2c

0800503c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005044:	4b06      	ldr	r3, [pc, #24]	@ (8005060 <vTaskInternalSetTimeOutState+0x24>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <vTaskInternalSetTimeOutState+0x28>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	bc80      	pop	{r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	20000d30 	.word	0x20000d30
 8005064:	20000d1c 	.word	0x20000d1c

08005068 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10b      	bne.n	8005090 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	613b      	str	r3, [r7, #16]
}
 800508a:	bf00      	nop
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60fb      	str	r3, [r7, #12]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80050ae:	f000 fe4d 	bl	8005d4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005128 <xTaskCheckForTimeOut+0xc0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d102      	bne.n	80050d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	e023      	b.n	800511a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	4b15      	ldr	r3, [pc, #84]	@ (800512c <xTaskCheckForTimeOut+0xc4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d007      	beq.n	80050ee <xTaskCheckForTimeOut+0x86>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d302      	bcc.n	80050ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050e8:	2301      	movs	r3, #1
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e015      	b.n	800511a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d20b      	bcs.n	8005110 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	1ad2      	subs	r2, r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff99 	bl	800503c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	e004      	b.n	800511a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005116:	2301      	movs	r3, #1
 8005118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800511a:	f000 fe47 	bl	8005dac <vPortExitCritical>

	return xReturn;
 800511e:	69fb      	ldr	r3, [r7, #28]
}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	20000d1c 	.word	0x20000d1c
 800512c:	20000d30 	.word	0x20000d30

08005130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005134:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <vTaskMissedYield+0x14>)
 8005136:	2201      	movs	r2, #1
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	20000d2c 	.word	0x20000d2c

08005148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005150:	f000 f852 	bl	80051f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005154:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <prvIdleTask+0x28>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d9f9      	bls.n	8005150 <prvIdleTask+0x8>
			{
				taskYIELD();
 800515c:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <prvIdleTask+0x2c>)
 800515e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005162:	601a      	str	r2, [r3, #0]
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800516c:	e7f0      	b.n	8005150 <prvIdleTask+0x8>
 800516e:	bf00      	nop
 8005170:	20000848 	.word	0x20000848
 8005174:	e000ed04 	.word	0xe000ed04

08005178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800517e:	2300      	movs	r3, #0
 8005180:	607b      	str	r3, [r7, #4]
 8005182:	e00c      	b.n	800519e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	4a12      	ldr	r2, [pc, #72]	@ (80051d8 <prvInitialiseTaskLists+0x60>)
 8005190:	4413      	add	r3, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f7fe fbe2 	bl	800395c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b37      	cmp	r3, #55	@ 0x37
 80051a2:	d9ef      	bls.n	8005184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051a4:	480d      	ldr	r0, [pc, #52]	@ (80051dc <prvInitialiseTaskLists+0x64>)
 80051a6:	f7fe fbd9 	bl	800395c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051aa:	480d      	ldr	r0, [pc, #52]	@ (80051e0 <prvInitialiseTaskLists+0x68>)
 80051ac:	f7fe fbd6 	bl	800395c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051b0:	480c      	ldr	r0, [pc, #48]	@ (80051e4 <prvInitialiseTaskLists+0x6c>)
 80051b2:	f7fe fbd3 	bl	800395c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051b6:	480c      	ldr	r0, [pc, #48]	@ (80051e8 <prvInitialiseTaskLists+0x70>)
 80051b8:	f7fe fbd0 	bl	800395c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051bc:	480b      	ldr	r0, [pc, #44]	@ (80051ec <prvInitialiseTaskLists+0x74>)
 80051be:	f7fe fbcd 	bl	800395c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051c2:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <prvInitialiseTaskLists+0x78>)
 80051c4:	4a05      	ldr	r2, [pc, #20]	@ (80051dc <prvInitialiseTaskLists+0x64>)
 80051c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051c8:	4b0a      	ldr	r3, [pc, #40]	@ (80051f4 <prvInitialiseTaskLists+0x7c>)
 80051ca:	4a05      	ldr	r2, [pc, #20]	@ (80051e0 <prvInitialiseTaskLists+0x68>)
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000848 	.word	0x20000848
 80051dc:	20000ca8 	.word	0x20000ca8
 80051e0:	20000cbc 	.word	0x20000cbc
 80051e4:	20000cd8 	.word	0x20000cd8
 80051e8:	20000cec 	.word	0x20000cec
 80051ec:	20000d04 	.word	0x20000d04
 80051f0:	20000cd0 	.word	0x20000cd0
 80051f4:	20000cd4 	.word	0x20000cd4

080051f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051fe:	e019      	b.n	8005234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005200:	f000 fda4 	bl	8005d4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005204:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <prvCheckTasksWaitingTermination+0x50>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe fc29 	bl	8003a68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005216:	4b0d      	ldr	r3, [pc, #52]	@ (800524c <prvCheckTasksWaitingTermination+0x54>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3b01      	subs	r3, #1
 800521c:	4a0b      	ldr	r2, [pc, #44]	@ (800524c <prvCheckTasksWaitingTermination+0x54>)
 800521e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <prvCheckTasksWaitingTermination+0x58>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3b01      	subs	r3, #1
 8005226:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <prvCheckTasksWaitingTermination+0x58>)
 8005228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800522a:	f000 fdbf 	bl	8005dac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f810 	bl	8005254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005234:	4b06      	ldr	r3, [pc, #24]	@ (8005250 <prvCheckTasksWaitingTermination+0x58>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e1      	bne.n	8005200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800523c:	bf00      	nop
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000cec 	.word	0x20000cec
 800524c:	20000d18 	.word	0x20000d18
 8005250:	20000d00 	.word	0x20000d00

08005254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005262:	2b00      	cmp	r3, #0
 8005264:	d108      	bne.n	8005278 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526a:	4618      	mov	r0, r3
 800526c:	f000 ff3e 	bl	80060ec <vPortFree>
				vPortFree( pxTCB );
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 ff3b 	bl	80060ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005276:	e019      	b.n	80052ac <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800527e:	2b01      	cmp	r3, #1
 8005280:	d103      	bne.n	800528a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 ff32 	bl	80060ec <vPortFree>
	}
 8005288:	e010      	b.n	80052ac <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005290:	2b02      	cmp	r3, #2
 8005292:	d00b      	beq.n	80052ac <prvDeleteTCB+0x58>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60fb      	str	r3, [r7, #12]
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <prvDeleteTCB+0x54>
	}
 80052ac:	bf00      	nop
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ba:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <prvResetNextTaskUnblockTime+0x38>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052c4:	4b0a      	ldr	r3, [pc, #40]	@ (80052f0 <prvResetNextTaskUnblockTime+0x3c>)
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052cc:	e008      	b.n	80052e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ce:	4b07      	ldr	r3, [pc, #28]	@ (80052ec <prvResetNextTaskUnblockTime+0x38>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a04      	ldr	r2, [pc, #16]	@ (80052f0 <prvResetNextTaskUnblockTime+0x3c>)
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bc80      	pop	{r7}
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000cd0 	.word	0x20000cd0
 80052f0:	20000d38 	.word	0x20000d38

080052f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005328 <xTaskGetSchedulerState+0x34>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d102      	bne.n	8005308 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005302:	2301      	movs	r3, #1
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	e008      	b.n	800531a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005308:	4b08      	ldr	r3, [pc, #32]	@ (800532c <xTaskGetSchedulerState+0x38>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d102      	bne.n	8005316 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005310:	2302      	movs	r3, #2
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	e001      	b.n	800531a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800531a:	687b      	ldr	r3, [r7, #4]
	}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	bc80      	pop	{r7}
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000d24 	.word	0x20000d24
 800532c:	20000d40 	.word	0x20000d40

08005330 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800533c:	2300      	movs	r3, #0
 800533e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d058      	beq.n	80053f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005346:	4b2f      	ldr	r3, [pc, #188]	@ (8005404 <xTaskPriorityDisinherit+0xd4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	429a      	cmp	r2, r3
 800534e:	d00b      	beq.n	8005368 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	60fb      	str	r3, [r7, #12]
}
 8005362:	bf00      	nop
 8005364:	bf00      	nop
 8005366:	e7fd      	b.n	8005364 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10b      	bne.n	8005388 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	60bb      	str	r3, [r7, #8]
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538c:	1e5a      	subs	r2, r3, #1
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800539a:	429a      	cmp	r2, r3
 800539c:	d02c      	beq.n	80053f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d128      	bne.n	80053f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7fe fb5c 	bl	8003a68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005408 <xTaskPriorityDisinherit+0xd8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d903      	bls.n	80053d8 <xTaskPriorityDisinherit+0xa8>
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005408 <xTaskPriorityDisinherit+0xd8>)
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053dc:	4613      	mov	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4a09      	ldr	r2, [pc, #36]	@ (800540c <xTaskPriorityDisinherit+0xdc>)
 80053e6:	441a      	add	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f7fe fadf 	bl	80039b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053f4:	2301      	movs	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053f8:	697b      	ldr	r3, [r7, #20]
	}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3718      	adds	r7, #24
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20000844 	.word	0x20000844
 8005408:	20000d20 	.word	0x20000d20
 800540c:	20000848 	.word	0x20000848

08005410 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800541a:	4b21      	ldr	r3, [pc, #132]	@ (80054a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005420:	4b20      	ldr	r3, [pc, #128]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3304      	adds	r3, #4
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fb1e 	bl	8003a68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005432:	d10a      	bne.n	800544a <prvAddCurrentTaskToDelayedList+0x3a>
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800543a:	4b1a      	ldr	r3, [pc, #104]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4819      	ldr	r0, [pc, #100]	@ (80054a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005444:	f7fe fab5 	bl	80039b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005448:	e026      	b.n	8005498 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005452:	4b14      	ldr	r3, [pc, #80]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	429a      	cmp	r2, r3
 8005460:	d209      	bcs.n	8005476 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005462:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	4b0f      	ldr	r3, [pc, #60]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f7fe fac2 	bl	80039f8 <vListInsert>
}
 8005474:	e010      	b.n	8005498 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005476:	4b0e      	ldr	r3, [pc, #56]	@ (80054b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3304      	adds	r3, #4
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f7fe fab8 	bl	80039f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005488:	4b0a      	ldr	r3, [pc, #40]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	429a      	cmp	r2, r3
 8005490:	d202      	bcs.n	8005498 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005492:	4a08      	ldr	r2, [pc, #32]	@ (80054b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6013      	str	r3, [r2, #0]
}
 8005498:	bf00      	nop
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000d1c 	.word	0x20000d1c
 80054a4:	20000844 	.word	0x20000844
 80054a8:	20000d04 	.word	0x20000d04
 80054ac:	20000cd4 	.word	0x20000cd4
 80054b0:	20000cd0 	.word	0x20000cd0
 80054b4:	20000d38 	.word	0x20000d38

080054b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	@ 0x28
 80054bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054be:	2300      	movs	r3, #0
 80054c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054c2:	f000 fb11 	bl	8005ae8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054c6:	4b1d      	ldr	r3, [pc, #116]	@ (800553c <xTimerCreateTimerTask+0x84>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d021      	beq.n	8005512 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054d6:	1d3a      	adds	r2, r7, #4
 80054d8:	f107 0108 	add.w	r1, r7, #8
 80054dc:	f107 030c 	add.w	r3, r7, #12
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7fe fa21 	bl	8003928 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	9202      	str	r2, [sp, #8]
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	2302      	movs	r3, #2
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	460a      	mov	r2, r1
 80054f8:	4911      	ldr	r1, [pc, #68]	@ (8005540 <xTimerCreateTimerTask+0x88>)
 80054fa:	4812      	ldr	r0, [pc, #72]	@ (8005544 <xTimerCreateTimerTask+0x8c>)
 80054fc:	f7ff f8d2 	bl	80046a4 <xTaskCreateStatic>
 8005500:	4603      	mov	r3, r0
 8005502:	4a11      	ldr	r2, [pc, #68]	@ (8005548 <xTimerCreateTimerTask+0x90>)
 8005504:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005506:	4b10      	ldr	r3, [pc, #64]	@ (8005548 <xTimerCreateTimerTask+0x90>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800550e:	2301      	movs	r3, #1
 8005510:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	613b      	str	r3, [r7, #16]
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	e7fd      	b.n	800552c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005530:	697b      	ldr	r3, [r7, #20]
}
 8005532:	4618      	mov	r0, r3
 8005534:	3718      	adds	r7, #24
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	bf00      	nop
 800553c:	20000d74 	.word	0x20000d74
 8005540:	08006d38 	.word	0x08006d38
 8005544:	08005685 	.word	0x08005685
 8005548:	20000d78 	.word	0x20000d78

0800554c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d10b      	bne.n	800557c <xTimerGenericCommand+0x30>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	623b      	str	r3, [r7, #32]
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800557c:	4b19      	ldr	r3, [pc, #100]	@ (80055e4 <xTimerGenericCommand+0x98>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d02a      	beq.n	80055da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2b05      	cmp	r3, #5
 8005594:	dc18      	bgt.n	80055c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005596:	f7ff fead 	bl	80052f4 <xTaskGetSchedulerState>
 800559a:	4603      	mov	r3, r0
 800559c:	2b02      	cmp	r3, #2
 800559e:	d109      	bne.n	80055b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055a0:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <xTimerGenericCommand+0x98>)
 80055a2:	6818      	ldr	r0, [r3, #0]
 80055a4:	f107 0110 	add.w	r1, r7, #16
 80055a8:	2300      	movs	r3, #0
 80055aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ac:	f7fe fbcc 	bl	8003d48 <xQueueGenericSend>
 80055b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80055b2:	e012      	b.n	80055da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055b4:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <xTimerGenericCommand+0x98>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	f107 0110 	add.w	r1, r7, #16
 80055bc:	2300      	movs	r3, #0
 80055be:	2200      	movs	r2, #0
 80055c0:	f7fe fbc2 	bl	8003d48 <xQueueGenericSend>
 80055c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80055c6:	e008      	b.n	80055da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055c8:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <xTimerGenericCommand+0x98>)
 80055ca:	6818      	ldr	r0, [r3, #0]
 80055cc:	f107 0110 	add.w	r1, r7, #16
 80055d0:	2300      	movs	r3, #0
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	f7fe fcba 	bl	8003f4c <xQueueGenericSendFromISR>
 80055d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3728      	adds	r7, #40	@ 0x28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	20000d74 	.word	0x20000d74

080055e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af02      	add	r7, sp, #8
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f2:	4b23      	ldr	r3, [pc, #140]	@ (8005680 <prvProcessExpiredTimer+0x98>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	3304      	adds	r3, #4
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fa31 	bl	8003a68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d023      	beq.n	800565c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	18d1      	adds	r1, r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f000 f8d3 	bl	80057cc <prvInsertTimerInActiveList>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d020      	beq.n	800566e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2300      	movs	r3, #0
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	2100      	movs	r1, #0
 8005636:	6978      	ldr	r0, [r7, #20]
 8005638:	f7ff ff88 	bl	800554c <xTimerGenericCommand>
 800563c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d114      	bne.n	800566e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	60fb      	str	r3, [r7, #12]
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	e7fd      	b.n	8005658 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	b2da      	uxtb	r2, r3
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	6978      	ldr	r0, [r7, #20]
 8005674:	4798      	blx	r3
}
 8005676:	bf00      	nop
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000d6c 	.word	0x20000d6c

08005684 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800568c:	f107 0308 	add.w	r3, r7, #8
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f859 	bl	8005748 <prvGetNextExpireTime>
 8005696:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4619      	mov	r1, r3
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f805 	bl	80056ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056a2:	f000 f8d5 	bl	8005850 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056a6:	bf00      	nop
 80056a8:	e7f0      	b.n	800568c <prvTimerTask+0x8>
	...

080056ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056b6:	f7ff fa39 	bl	8004b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f864 	bl	800578c <prvSampleTimeNow>
 80056c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d130      	bne.n	800572e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d806      	bhi.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056da:	f7ff fa35 	bl	8004b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff81 	bl	80055e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056e6:	e024      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ee:	4b13      	ldr	r3, [pc, #76]	@ (800573c <prvProcessTimerOrBlockTask+0x90>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <prvProcessTimerOrBlockTask+0x50>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <prvProcessTimerOrBlockTask+0x52>
 80056fc:	2300      	movs	r3, #0
 80056fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005700:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <prvProcessTimerOrBlockTask+0x94>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	f7fe ff95 	bl	800463c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005712:	f7ff fa19 	bl	8004b48 <xTaskResumeAll>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800571c:	4b09      	ldr	r3, [pc, #36]	@ (8005744 <prvProcessTimerOrBlockTask+0x98>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
}
 800572c:	e001      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800572e:	f7ff fa0b 	bl	8004b48 <xTaskResumeAll>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000d70 	.word	0x20000d70
 8005740:	20000d74 	.word	0x20000d74
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005750:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <prvGetNextExpireTime+0x40>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <prvGetNextExpireTime+0x16>
 800575a:	2201      	movs	r2, #1
 800575c:	e000      	b.n	8005760 <prvGetNextExpireTime+0x18>
 800575e:	2200      	movs	r2, #0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800576c:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <prvGetNextExpireTime+0x40>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e001      	b.n	800577c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	20000d6c 	.word	0x20000d6c

0800578c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005794:	f7ff fa76 	bl	8004c84 <xTaskGetTickCount>
 8005798:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800579a:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <prvSampleTimeNow+0x3c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d205      	bcs.n	80057b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057a4:	f000 f93a 	bl	8005a1c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e002      	b.n	80057b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057b6:	4a04      	ldr	r2, [pc, #16]	@ (80057c8 <prvSampleTimeNow+0x3c>)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057bc:	68fb      	ldr	r3, [r7, #12]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000d7c 	.word	0x20000d7c

080057cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d812      	bhi.n	8005818 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	1ad2      	subs	r2, r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d302      	bcc.n	8005806 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005800:	2301      	movs	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	e01b      	b.n	800583e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005806:	4b10      	ldr	r3, [pc, #64]	@ (8005848 <prvInsertTimerInActiveList+0x7c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7fe f8f1 	bl	80039f8 <vListInsert>
 8005816:	e012      	b.n	800583e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d206      	bcs.n	800582e <prvInsertTimerInActiveList+0x62>
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d302      	bcc.n	800582e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e007      	b.n	800583e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800582e:	4b07      	ldr	r3, [pc, #28]	@ (800584c <prvInsertTimerInActiveList+0x80>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3304      	adds	r3, #4
 8005836:	4619      	mov	r1, r3
 8005838:	4610      	mov	r0, r2
 800583a:	f7fe f8dd 	bl	80039f8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800583e:	697b      	ldr	r3, [r7, #20]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3718      	adds	r7, #24
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	20000d70 	.word	0x20000d70
 800584c:	20000d6c 	.word	0x20000d6c

08005850 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b08e      	sub	sp, #56	@ 0x38
 8005854:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005856:	e0ce      	b.n	80059f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	da19      	bge.n	8005892 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800585e:	1d3b      	adds	r3, r7, #4
 8005860:	3304      	adds	r3, #4
 8005862:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	61fb      	str	r3, [r7, #28]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005888:	6850      	ldr	r0, [r2, #4]
 800588a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800588c:	6892      	ldr	r2, [r2, #8]
 800588e:	4611      	mov	r1, r2
 8005890:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	f2c0 80ae 	blt.w	80059f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800589e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	3304      	adds	r3, #4
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fe f8dc 	bl	8003a68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058b0:	463b      	mov	r3, r7
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff ff6a 	bl	800578c <prvSampleTimeNow>
 80058b8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b09      	cmp	r3, #9
 80058be:	f200 8097 	bhi.w	80059f0 <prvProcessReceivedCommands+0x1a0>
 80058c2:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <prvProcessReceivedCommands+0x78>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058f1 	.word	0x080058f1
 80058cc:	080058f1 	.word	0x080058f1
 80058d0:	080058f1 	.word	0x080058f1
 80058d4:	08005967 	.word	0x08005967
 80058d8:	0800597b 	.word	0x0800597b
 80058dc:	080059c7 	.word	0x080059c7
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	080058f1 	.word	0x080058f1
 80058e8:	08005967 	.word	0x08005967
 80058ec:	0800597b 	.word	0x0800597b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058f6:	f043 0301 	orr.w	r3, r3, #1
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	18d1      	adds	r1, r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005910:	f7ff ff5c 	bl	80057cc <prvInsertTimerInActiveList>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d06c      	beq.n	80059f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800591a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005920:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005924:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d061      	beq.n	80059f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	441a      	add	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	2100      	movs	r1, #0
 8005940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005942:	f7ff fe03 	bl	800554c <xTimerGenericCommand>
 8005946:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d152      	bne.n	80059f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	61bb      	str	r3, [r7, #24]
}
 8005960:	bf00      	nop
 8005962:	bf00      	nop
 8005964:	e7fd      	b.n	8005962 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	b2da      	uxtb	r2, r3
 8005972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005974:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005978:	e03d      	b.n	80059f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800597a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	b2da      	uxtb	r2, r3
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005988:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005990:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10b      	bne.n	80059b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	617b      	str	r3, [r7, #20]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	18d1      	adds	r1, r2, r3
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	f7ff ff04 	bl	80057cc <prvInsertTimerInActiveList>
					break;
 80059c4:	e017      	b.n	80059f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d103      	bne.n	80059dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059d6:	f000 fb89 	bl	80060ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059da:	e00c      	b.n	80059f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80059ee:	e002      	b.n	80059f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80059f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059f6:	4b08      	ldr	r3, [pc, #32]	@ (8005a18 <prvProcessReceivedCommands+0x1c8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1d39      	adds	r1, r7, #4
 80059fc:	2200      	movs	r2, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fb42 	bl	8004088 <xQueueReceive>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f47f af26 	bne.w	8005858 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	3730      	adds	r7, #48	@ 0x30
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000d74 	.word	0x20000d74

08005a1c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b088      	sub	sp, #32
 8005a20:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a22:	e049      	b.n	8005ab8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a24:	4b2e      	ldr	r3, [pc, #184]	@ (8005ae0 <prvSwitchTimerLists+0xc4>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ae0 <prvSwitchTimerLists+0xc4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe f813 	bl	8003a68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d02f      	beq.n	8005ab8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4413      	add	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d90e      	bls.n	8005a88 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a76:	4b1a      	ldr	r3, [pc, #104]	@ (8005ae0 <prvSwitchTimerLists+0xc4>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f7fd ffb9 	bl	80039f8 <vListInsert>
 8005a86:	e017      	b.n	8005ab8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a88:	2300      	movs	r3, #0
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	2100      	movs	r1, #0
 8005a92:	68f8      	ldr	r0, [r7, #12]
 8005a94:	f7ff fd5a 	bl	800554c <xTimerGenericCommand>
 8005a98:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10b      	bne.n	8005ab8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	603b      	str	r3, [r7, #0]
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ab8:	4b09      	ldr	r3, [pc, #36]	@ (8005ae0 <prvSwitchTimerLists+0xc4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1b0      	bne.n	8005a24 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ac2:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <prvSwitchTimerLists+0xc4>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ac8:	4b06      	ldr	r3, [pc, #24]	@ (8005ae4 <prvSwitchTimerLists+0xc8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a04      	ldr	r2, [pc, #16]	@ (8005ae0 <prvSwitchTimerLists+0xc4>)
 8005ace:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ad0:	4a04      	ldr	r2, [pc, #16]	@ (8005ae4 <prvSwitchTimerLists+0xc8>)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6013      	str	r3, [r2, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000d6c 	.word	0x20000d6c
 8005ae4:	20000d70 	.word	0x20000d70

08005ae8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aee:	f000 f92d 	bl	8005d4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005af2:	4b15      	ldr	r3, [pc, #84]	@ (8005b48 <prvCheckForValidListAndQueue+0x60>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d120      	bne.n	8005b3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005afa:	4814      	ldr	r0, [pc, #80]	@ (8005b4c <prvCheckForValidListAndQueue+0x64>)
 8005afc:	f7fd ff2e 	bl	800395c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b00:	4813      	ldr	r0, [pc, #76]	@ (8005b50 <prvCheckForValidListAndQueue+0x68>)
 8005b02:	f7fd ff2b 	bl	800395c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b06:	4b13      	ldr	r3, [pc, #76]	@ (8005b54 <prvCheckForValidListAndQueue+0x6c>)
 8005b08:	4a10      	ldr	r2, [pc, #64]	@ (8005b4c <prvCheckForValidListAndQueue+0x64>)
 8005b0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b0c:	4b12      	ldr	r3, [pc, #72]	@ (8005b58 <prvCheckForValidListAndQueue+0x70>)
 8005b0e:	4a10      	ldr	r2, [pc, #64]	@ (8005b50 <prvCheckForValidListAndQueue+0x68>)
 8005b10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b12:	2300      	movs	r3, #0
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	4b11      	ldr	r3, [pc, #68]	@ (8005b5c <prvCheckForValidListAndQueue+0x74>)
 8005b18:	4a11      	ldr	r2, [pc, #68]	@ (8005b60 <prvCheckForValidListAndQueue+0x78>)
 8005b1a:	2110      	movs	r1, #16
 8005b1c:	200a      	movs	r0, #10
 8005b1e:	f7fe f837 	bl	8003b90 <xQueueGenericCreateStatic>
 8005b22:	4603      	mov	r3, r0
 8005b24:	4a08      	ldr	r2, [pc, #32]	@ (8005b48 <prvCheckForValidListAndQueue+0x60>)
 8005b26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b28:	4b07      	ldr	r3, [pc, #28]	@ (8005b48 <prvCheckForValidListAndQueue+0x60>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b30:	4b05      	ldr	r3, [pc, #20]	@ (8005b48 <prvCheckForValidListAndQueue+0x60>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	490b      	ldr	r1, [pc, #44]	@ (8005b64 <prvCheckForValidListAndQueue+0x7c>)
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fd58 	bl	80045ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b3c:	f000 f936 	bl	8005dac <vPortExitCritical>
}
 8005b40:	bf00      	nop
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000d74 	.word	0x20000d74
 8005b4c:	20000d44 	.word	0x20000d44
 8005b50:	20000d58 	.word	0x20000d58
 8005b54:	20000d6c 	.word	0x20000d6c
 8005b58:	20000d70 	.word	0x20000d70
 8005b5c:	20000e20 	.word	0x20000e20
 8005b60:	20000d80 	.word	0x20000d80
 8005b64:	08006d40 	.word	0x08006d40

08005b68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3b04      	subs	r3, #4
 8005b78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3b04      	subs	r3, #4
 8005b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0201 	bic.w	r2, r3, #1
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b04      	subs	r3, #4
 8005b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b98:	4a08      	ldr	r2, [pc, #32]	@ (8005bbc <pxPortInitialiseStack+0x54>)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b14      	subs	r3, #20
 8005ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b20      	subs	r3, #32
 8005bae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bc80      	pop	{r7}
 8005bba:	4770      	bx	lr
 8005bbc:	08005bc1 	.word	0x08005bc1

08005bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bca:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <prvTaskExitError+0x54>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd2:	d00b      	beq.n	8005bec <prvTaskExitError+0x2c>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	60fb      	str	r3, [r7, #12]
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	e7fd      	b.n	8005be8 <prvTaskExitError+0x28>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60bb      	str	r3, [r7, #8]
}
 8005bfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c00:	bf00      	nop
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0fc      	beq.n	8005c02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c08:	bf00      	nop
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bc80      	pop	{r7}
 8005c12:	4770      	bx	lr
 8005c14:	2000000c 	.word	0x2000000c
	...

08005c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c20:	4b07      	ldr	r3, [pc, #28]	@ (8005c40 <pxCurrentTCBConst2>)
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005c2a:	f380 8809 	msr	PSP, r0
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f380 8811 	msr	BASEPRI, r0
 8005c3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005c3e:	4770      	bx	lr

08005c40 <pxCurrentTCBConst2>:
 8005c40:	20000844 	.word	0x20000844
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005c48:	4806      	ldr	r0, [pc, #24]	@ (8005c64 <prvPortStartFirstTask+0x1c>)
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	f380 8808 	msr	MSP, r0
 8005c52:	b662      	cpsie	i
 8005c54:	b661      	cpsie	f
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	df00      	svc	0
 8005c60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c62:	bf00      	nop
 8005c64:	e000ed08 	.word	0xe000ed08

08005c68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c6e:	4b32      	ldr	r3, [pc, #200]	@ (8005d38 <xPortStartScheduler+0xd0>)
 8005c70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	22ff      	movs	r2, #255	@ 0xff
 8005c7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	4b2a      	ldr	r3, [pc, #168]	@ (8005d3c <xPortStartScheduler+0xd4>)
 8005c94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c96:	4b2a      	ldr	r3, [pc, #168]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005c98:	2207      	movs	r2, #7
 8005c9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c9c:	e009      	b.n	8005cb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005c9e:	4b28      	ldr	r3, [pc, #160]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	4a26      	ldr	r2, [pc, #152]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005ca6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	005b      	lsls	r3, r3, #1
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b80      	cmp	r3, #128	@ 0x80
 8005cbc:	d0ef      	beq.n	8005c9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cbe:	4b20      	ldr	r3, [pc, #128]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f1c3 0307 	rsb	r3, r3, #7
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d00b      	beq.n	8005ce2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cce:	f383 8811 	msr	BASEPRI, r3
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	60bb      	str	r3, [r7, #8]
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	e7fd      	b.n	8005cde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ce2:	4b17      	ldr	r3, [pc, #92]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	4a15      	ldr	r2, [pc, #84]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005cea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005cec:	4b14      	ldr	r3, [pc, #80]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005cf4:	4a12      	ldr	r2, [pc, #72]	@ (8005d40 <xPortStartScheduler+0xd8>)
 8005cf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d00:	4b10      	ldr	r3, [pc, #64]	@ (8005d44 <xPortStartScheduler+0xdc>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a0f      	ldr	r2, [pc, #60]	@ (8005d44 <xPortStartScheduler+0xdc>)
 8005d06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <xPortStartScheduler+0xdc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a0c      	ldr	r2, [pc, #48]	@ (8005d44 <xPortStartScheduler+0xdc>)
 8005d12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005d16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d18:	f000 f8b8 	bl	8005e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8005d48 <xPortStartScheduler+0xe0>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d22:	f7ff ff91 	bl	8005c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d26:	f7ff f875 	bl	8004e14 <vTaskSwitchContext>
	prvTaskExitError();
 8005d2a:	f7ff ff49 	bl	8005bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	e000e400 	.word	0xe000e400
 8005d3c:	20000e70 	.word	0x20000e70
 8005d40:	20000e74 	.word	0x20000e74
 8005d44:	e000ed20 	.word	0xe000ed20
 8005d48:	2000000c 	.word	0x2000000c

08005d4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
	__asm volatile
 8005d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d56:	f383 8811 	msr	BASEPRI, r3
 8005d5a:	f3bf 8f6f 	isb	sy
 8005d5e:	f3bf 8f4f 	dsb	sy
 8005d62:	607b      	str	r3, [r7, #4]
}
 8005d64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d66:	4b0f      	ldr	r3, [pc, #60]	@ (8005da4 <vPortEnterCritical+0x58>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8005da4 <vPortEnterCritical+0x58>)
 8005d6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d70:	4b0c      	ldr	r3, [pc, #48]	@ (8005da4 <vPortEnterCritical+0x58>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d110      	bne.n	8005d9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d78:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <vPortEnterCritical+0x5c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <vPortEnterCritical+0x4e>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	603b      	str	r3, [r7, #0]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <vPortEnterCritical+0x4a>
	}
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bc80      	pop	{r7}
 8005da2:	4770      	bx	lr
 8005da4:	2000000c 	.word	0x2000000c
 8005da8:	e000ed04 	.word	0xe000ed04

08005dac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005db2:	4b12      	ldr	r3, [pc, #72]	@ (8005dfc <vPortExitCritical+0x50>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <vPortExitCritical+0x26>
	__asm volatile
 8005dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	607b      	str	r3, [r7, #4]
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	e7fd      	b.n	8005dce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dfc <vPortExitCritical+0x50>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	4a08      	ldr	r2, [pc, #32]	@ (8005dfc <vPortExitCritical+0x50>)
 8005dda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ddc:	4b07      	ldr	r3, [pc, #28]	@ (8005dfc <vPortExitCritical+0x50>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <vPortExitCritical+0x44>
 8005de4:	2300      	movs	r3, #0
 8005de6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	f383 8811 	msr	BASEPRI, r3
}
 8005dee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	2000000c 	.word	0x2000000c

08005e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e00:	f3ef 8009 	mrs	r0, PSP
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	4b0d      	ldr	r3, [pc, #52]	@ (8005e40 <pxCurrentTCBConst>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e10:	6010      	str	r0, [r2, #0]
 8005e12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005e16:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005e1a:	f380 8811 	msr	BASEPRI, r0
 8005e1e:	f7fe fff9 	bl	8004e14 <vTaskSwitchContext>
 8005e22:	f04f 0000 	mov.w	r0, #0
 8005e26:	f380 8811 	msr	BASEPRI, r0
 8005e2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005e2e:	6819      	ldr	r1, [r3, #0]
 8005e30:	6808      	ldr	r0, [r1, #0]
 8005e32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e36:	f380 8809 	msr	PSP, r0
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	4770      	bx	lr

08005e40 <pxCurrentTCBConst>:
 8005e40:	20000844 	.word	0x20000844
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e62:	f7fe ff1d 	bl	8004ca0 <xTaskIncrementTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	@ (8005e88 <xPortSysTickHandler+0x40>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e90:	4b0a      	ldr	r3, [pc, #40]	@ (8005ebc <vPortSetupTimerInterrupt+0x30>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e96:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e9c:	4b09      	ldr	r3, [pc, #36]	@ (8005ec4 <vPortSetupTimerInterrupt+0x38>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a09      	ldr	r2, [pc, #36]	@ (8005ec8 <vPortSetupTimerInterrupt+0x3c>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	4a08      	ldr	r2, [pc, #32]	@ (8005ecc <vPortSetupTimerInterrupt+0x40>)
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eae:	4b03      	ldr	r3, [pc, #12]	@ (8005ebc <vPortSetupTimerInterrupt+0x30>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	e000e010 	.word	0xe000e010
 8005ec0:	e000e018 	.word	0xe000e018
 8005ec4:	20000000 	.word	0x20000000
 8005ec8:	10624dd3 	.word	0x10624dd3
 8005ecc:	e000e014 	.word	0xe000e014

08005ed0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ed6:	f3ef 8305 	mrs	r3, IPSR
 8005eda:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2b0f      	cmp	r3, #15
 8005ee0:	d915      	bls.n	8005f0e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ee2:	4a17      	ldr	r2, [pc, #92]	@ (8005f40 <vPortValidateInterruptPriority+0x70>)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005eec:	4b15      	ldr	r3, [pc, #84]	@ (8005f44 <vPortValidateInterruptPriority+0x74>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	7afa      	ldrb	r2, [r7, #11]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d20b      	bcs.n	8005f0e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	607b      	str	r3, [r7, #4]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <vPortValidateInterruptPriority+0x78>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f16:	4b0d      	ldr	r3, [pc, #52]	@ (8005f4c <vPortValidateInterruptPriority+0x7c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d90b      	bls.n	8005f36 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	603b      	str	r3, [r7, #0]
}
 8005f30:	bf00      	nop
 8005f32:	bf00      	nop
 8005f34:	e7fd      	b.n	8005f32 <vPortValidateInterruptPriority+0x62>
	}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bc80      	pop	{r7}
 8005f3e:	4770      	bx	lr
 8005f40:	e000e3f0 	.word	0xe000e3f0
 8005f44:	20000e70 	.word	0x20000e70
 8005f48:	e000ed0c 	.word	0xe000ed0c
 8005f4c:	20000e74 	.word	0x20000e74

08005f50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b08a      	sub	sp, #40	@ 0x28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f5c:	f7fe fde6 	bl	8004b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f60:	4b5c      	ldr	r3, [pc, #368]	@ (80060d4 <pvPortMalloc+0x184>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f68:	f000 f924 	bl	80061b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f6c:	4b5a      	ldr	r3, [pc, #360]	@ (80060d8 <pvPortMalloc+0x188>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f040 8095 	bne.w	80060a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01e      	beq.n	8005fbe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f80:	2208      	movs	r2, #8
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d015      	beq.n	8005fbe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f023 0307 	bic.w	r3, r3, #7
 8005f98:	3308      	adds	r3, #8
 8005f9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <pvPortMalloc+0x6e>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	617b      	str	r3, [r7, #20]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d06f      	beq.n	80060a4 <pvPortMalloc+0x154>
 8005fc4:	4b45      	ldr	r3, [pc, #276]	@ (80060dc <pvPortMalloc+0x18c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d86a      	bhi.n	80060a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fce:	4b44      	ldr	r3, [pc, #272]	@ (80060e0 <pvPortMalloc+0x190>)
 8005fd0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fd2:	4b43      	ldr	r3, [pc, #268]	@ (80060e0 <pvPortMalloc+0x190>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fd8:	e004      	b.n	8005fe4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d903      	bls.n	8005ff6 <pvPortMalloc+0xa6>
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f1      	bne.n	8005fda <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <pvPortMalloc+0x184>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d051      	beq.n	80060a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2208      	movs	r2, #8
 8006006:	4413      	add	r3, r2
 8006008:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1ad2      	subs	r2, r2, r3
 800601a:	2308      	movs	r3, #8
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	429a      	cmp	r2, r3
 8006020:	d920      	bls.n	8006064 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4413      	add	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00b      	beq.n	800604c <pvPortMalloc+0xfc>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
}
 8006046:	bf00      	nop
 8006048:	bf00      	nop
 800604a:	e7fd      	b.n	8006048 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	1ad2      	subs	r2, r2, r3
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800605e:	69b8      	ldr	r0, [r7, #24]
 8006060:	f000 f90a 	bl	8006278 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006064:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <pvPortMalloc+0x18c>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	4a1b      	ldr	r2, [pc, #108]	@ (80060dc <pvPortMalloc+0x18c>)
 8006070:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006072:	4b1a      	ldr	r3, [pc, #104]	@ (80060dc <pvPortMalloc+0x18c>)
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	4b1b      	ldr	r3, [pc, #108]	@ (80060e4 <pvPortMalloc+0x194>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	429a      	cmp	r2, r3
 800607c:	d203      	bcs.n	8006086 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800607e:	4b17      	ldr	r3, [pc, #92]	@ (80060dc <pvPortMalloc+0x18c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <pvPortMalloc+0x194>)
 8006084:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	685a      	ldr	r2, [r3, #4]
 800608a:	4b13      	ldr	r3, [pc, #76]	@ (80060d8 <pvPortMalloc+0x188>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	431a      	orrs	r2, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006092:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800609a:	4b13      	ldr	r3, [pc, #76]	@ (80060e8 <pvPortMalloc+0x198>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	4a11      	ldr	r2, [pc, #68]	@ (80060e8 <pvPortMalloc+0x198>)
 80060a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060a4:	f7fe fd50 	bl	8004b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f003 0307 	and.w	r3, r3, #7
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00b      	beq.n	80060ca <pvPortMalloc+0x17a>
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	60fb      	str	r3, [r7, #12]
}
 80060c4:	bf00      	nop
 80060c6:	bf00      	nop
 80060c8:	e7fd      	b.n	80060c6 <pvPortMalloc+0x176>
	return pvReturn;
 80060ca:	69fb      	ldr	r3, [r7, #28]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3728      	adds	r7, #40	@ 0x28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	20001a80 	.word	0x20001a80
 80060d8:	20001a94 	.word	0x20001a94
 80060dc:	20001a84 	.word	0x20001a84
 80060e0:	20001a78 	.word	0x20001a78
 80060e4:	20001a88 	.word	0x20001a88
 80060e8:	20001a8c 	.word	0x20001a8c

080060ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04f      	beq.n	800619e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060fe:	2308      	movs	r3, #8
 8006100:	425b      	negs	r3, r3
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	4413      	add	r3, r2
 8006106:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	4b25      	ldr	r3, [pc, #148]	@ (80061a8 <vPortFree+0xbc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10b      	bne.n	8006132 <vPortFree+0x46>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	60fb      	str	r3, [r7, #12]
}
 800612c:	bf00      	nop
 800612e:	bf00      	nop
 8006130:	e7fd      	b.n	800612e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00b      	beq.n	8006152 <vPortFree+0x66>
	__asm volatile
 800613a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613e:	f383 8811 	msr	BASEPRI, r3
 8006142:	f3bf 8f6f 	isb	sy
 8006146:	f3bf 8f4f 	dsb	sy
 800614a:	60bb      	str	r3, [r7, #8]
}
 800614c:	bf00      	nop
 800614e:	bf00      	nop
 8006150:	e7fd      	b.n	800614e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4b14      	ldr	r3, [pc, #80]	@ (80061a8 <vPortFree+0xbc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4013      	ands	r3, r2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01e      	beq.n	800619e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d11a      	bne.n	800619e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	4b0e      	ldr	r3, [pc, #56]	@ (80061a8 <vPortFree+0xbc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	43db      	mvns	r3, r3
 8006172:	401a      	ands	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006178:	f7fe fcd8 	bl	8004b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <vPortFree+0xc0>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4413      	add	r3, r2
 8006186:	4a09      	ldr	r2, [pc, #36]	@ (80061ac <vPortFree+0xc0>)
 8006188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800618a:	6938      	ldr	r0, [r7, #16]
 800618c:	f000 f874 	bl	8006278 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006190:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <vPortFree+0xc4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a06      	ldr	r2, [pc, #24]	@ (80061b0 <vPortFree+0xc4>)
 8006198:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800619a:	f7fe fcd5 	bl	8004b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800619e:	bf00      	nop
 80061a0:	3718      	adds	r7, #24
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20001a94 	.word	0x20001a94
 80061ac:	20001a84 	.word	0x20001a84
 80061b0:	20001a90 	.word	0x20001a90

080061b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80061be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061c0:	4b27      	ldr	r3, [pc, #156]	@ (8006260 <prvHeapInit+0xac>)
 80061c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3307      	adds	r3, #7
 80061d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f023 0307 	bic.w	r3, r3, #7
 80061da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006260 <prvHeapInit+0xac>)
 80061e4:	4413      	add	r3, r2
 80061e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006264 <prvHeapInit+0xb0>)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061f2:	4b1c      	ldr	r3, [pc, #112]	@ (8006264 <prvHeapInit+0xb0>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	4413      	add	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006200:	2208      	movs	r2, #8
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0307 	bic.w	r3, r3, #7
 800620e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4a15      	ldr	r2, [pc, #84]	@ (8006268 <prvHeapInit+0xb4>)
 8006214:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006216:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <prvHeapInit+0xb4>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2200      	movs	r2, #0
 800621c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800621e:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <prvHeapInit+0xb4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	1ad2      	subs	r2, r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006234:	4b0c      	ldr	r3, [pc, #48]	@ (8006268 <prvHeapInit+0xb4>)
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <prvHeapInit+0xb8>)
 8006242:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <prvHeapInit+0xbc>)
 800624a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800624c:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <prvHeapInit+0xc0>)
 800624e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006252:	601a      	str	r2, [r3, #0]
}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr
 800625e:	bf00      	nop
 8006260:	20000e78 	.word	0x20000e78
 8006264:	20001a78 	.word	0x20001a78
 8006268:	20001a80 	.word	0x20001a80
 800626c:	20001a88 	.word	0x20001a88
 8006270:	20001a84 	.word	0x20001a84
 8006274:	20001a94 	.word	0x20001a94

08006278 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006280:	4b27      	ldr	r3, [pc, #156]	@ (8006320 <prvInsertBlockIntoFreeList+0xa8>)
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e002      	b.n	800628c <prvInsertBlockIntoFreeList+0x14>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	429a      	cmp	r2, r3
 8006294:	d8f7      	bhi.n	8006286 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d108      	bne.n	80062ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	441a      	add	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	441a      	add	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d118      	bne.n	8006300 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	4b14      	ldr	r3, [pc, #80]	@ (8006324 <prvInsertBlockIntoFreeList+0xac>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d00d      	beq.n	80062f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	601a      	str	r2, [r3, #0]
 80062f4:	e008      	b.n	8006308 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006324 <prvInsertBlockIntoFreeList+0xac>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	e003      	b.n	8006308 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d002      	beq.n	8006316 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr
 8006320:	20001a78 	.word	0x20001a78
 8006324:	20001a80 	.word	0x20001a80

08006328 <siprintf>:
 8006328:	b40e      	push	{r1, r2, r3}
 800632a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800632e:	b510      	push	{r4, lr}
 8006330:	2400      	movs	r4, #0
 8006332:	b09d      	sub	sp, #116	@ 0x74
 8006334:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006336:	9002      	str	r0, [sp, #8]
 8006338:	9006      	str	r0, [sp, #24]
 800633a:	9107      	str	r1, [sp, #28]
 800633c:	9104      	str	r1, [sp, #16]
 800633e:	4809      	ldr	r0, [pc, #36]	@ (8006364 <siprintf+0x3c>)
 8006340:	4909      	ldr	r1, [pc, #36]	@ (8006368 <siprintf+0x40>)
 8006342:	f853 2b04 	ldr.w	r2, [r3], #4
 8006346:	9105      	str	r1, [sp, #20]
 8006348:	6800      	ldr	r0, [r0, #0]
 800634a:	a902      	add	r1, sp, #8
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006350:	f000 f9a0 	bl	8006694 <_svfiprintf_r>
 8006354:	9b02      	ldr	r3, [sp, #8]
 8006356:	701c      	strb	r4, [r3, #0]
 8006358:	b01d      	add	sp, #116	@ 0x74
 800635a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800635e:	b003      	add	sp, #12
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000010 	.word	0x20000010
 8006368:	ffff0208 	.word	0xffff0208

0800636c <memset>:
 800636c:	4603      	mov	r3, r0
 800636e:	4402      	add	r2, r0
 8006370:	4293      	cmp	r3, r2
 8006372:	d100      	bne.n	8006376 <memset+0xa>
 8006374:	4770      	bx	lr
 8006376:	f803 1b01 	strb.w	r1, [r3], #1
 800637a:	e7f9      	b.n	8006370 <memset+0x4>

0800637c <__errno>:
 800637c:	4b01      	ldr	r3, [pc, #4]	@ (8006384 <__errno+0x8>)
 800637e:	6818      	ldr	r0, [r3, #0]
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	20000010 	.word	0x20000010

08006388 <__libc_init_array>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	2600      	movs	r6, #0
 800638c:	4d0c      	ldr	r5, [pc, #48]	@ (80063c0 <__libc_init_array+0x38>)
 800638e:	4c0d      	ldr	r4, [pc, #52]	@ (80063c4 <__libc_init_array+0x3c>)
 8006390:	1b64      	subs	r4, r4, r5
 8006392:	10a4      	asrs	r4, r4, #2
 8006394:	42a6      	cmp	r6, r4
 8006396:	d109      	bne.n	80063ac <__libc_init_array+0x24>
 8006398:	f000 fc76 	bl	8006c88 <_init>
 800639c:	2600      	movs	r6, #0
 800639e:	4d0a      	ldr	r5, [pc, #40]	@ (80063c8 <__libc_init_array+0x40>)
 80063a0:	4c0a      	ldr	r4, [pc, #40]	@ (80063cc <__libc_init_array+0x44>)
 80063a2:	1b64      	subs	r4, r4, r5
 80063a4:	10a4      	asrs	r4, r4, #2
 80063a6:	42a6      	cmp	r6, r4
 80063a8:	d105      	bne.n	80063b6 <__libc_init_array+0x2e>
 80063aa:	bd70      	pop	{r4, r5, r6, pc}
 80063ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b0:	4798      	blx	r3
 80063b2:	3601      	adds	r6, #1
 80063b4:	e7ee      	b.n	8006394 <__libc_init_array+0xc>
 80063b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ba:	4798      	blx	r3
 80063bc:	3601      	adds	r6, #1
 80063be:	e7f2      	b.n	80063a6 <__libc_init_array+0x1e>
 80063c0:	08006e4c 	.word	0x08006e4c
 80063c4:	08006e4c 	.word	0x08006e4c
 80063c8:	08006e4c 	.word	0x08006e4c
 80063cc:	08006e50 	.word	0x08006e50

080063d0 <__retarget_lock_acquire_recursive>:
 80063d0:	4770      	bx	lr

080063d2 <__retarget_lock_release_recursive>:
 80063d2:	4770      	bx	lr

080063d4 <memcpy>:
 80063d4:	440a      	add	r2, r1
 80063d6:	4291      	cmp	r1, r2
 80063d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	4770      	bx	lr
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	4291      	cmp	r1, r2
 80063e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ec:	d1f9      	bne.n	80063e2 <memcpy+0xe>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <_free_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4605      	mov	r5, r0
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d040      	beq.n	800647a <_free_r+0x8a>
 80063f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fc:	1f0c      	subs	r4, r1, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bfb8      	it	lt
 8006402:	18e4      	addlt	r4, r4, r3
 8006404:	f000 f8de 	bl	80065c4 <__malloc_lock>
 8006408:	4a1c      	ldr	r2, [pc, #112]	@ (800647c <_free_r+0x8c>)
 800640a:	6813      	ldr	r3, [r2, #0]
 800640c:	b933      	cbnz	r3, 800641c <_free_r+0x2c>
 800640e:	6063      	str	r3, [r4, #4]
 8006410:	6014      	str	r4, [r2, #0]
 8006412:	4628      	mov	r0, r5
 8006414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006418:	f000 b8da 	b.w	80065d0 <__malloc_unlock>
 800641c:	42a3      	cmp	r3, r4
 800641e:	d908      	bls.n	8006432 <_free_r+0x42>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	1821      	adds	r1, r4, r0
 8006424:	428b      	cmp	r3, r1
 8006426:	bf01      	itttt	eq
 8006428:	6819      	ldreq	r1, [r3, #0]
 800642a:	685b      	ldreq	r3, [r3, #4]
 800642c:	1809      	addeq	r1, r1, r0
 800642e:	6021      	streq	r1, [r4, #0]
 8006430:	e7ed      	b.n	800640e <_free_r+0x1e>
 8006432:	461a      	mov	r2, r3
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	b10b      	cbz	r3, 800643c <_free_r+0x4c>
 8006438:	42a3      	cmp	r3, r4
 800643a:	d9fa      	bls.n	8006432 <_free_r+0x42>
 800643c:	6811      	ldr	r1, [r2, #0]
 800643e:	1850      	adds	r0, r2, r1
 8006440:	42a0      	cmp	r0, r4
 8006442:	d10b      	bne.n	800645c <_free_r+0x6c>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	4401      	add	r1, r0
 8006448:	1850      	adds	r0, r2, r1
 800644a:	4283      	cmp	r3, r0
 800644c:	6011      	str	r1, [r2, #0]
 800644e:	d1e0      	bne.n	8006412 <_free_r+0x22>
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4408      	add	r0, r1
 8006456:	6010      	str	r0, [r2, #0]
 8006458:	6053      	str	r3, [r2, #4]
 800645a:	e7da      	b.n	8006412 <_free_r+0x22>
 800645c:	d902      	bls.n	8006464 <_free_r+0x74>
 800645e:	230c      	movs	r3, #12
 8006460:	602b      	str	r3, [r5, #0]
 8006462:	e7d6      	b.n	8006412 <_free_r+0x22>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	1821      	adds	r1, r4, r0
 8006468:	428b      	cmp	r3, r1
 800646a:	bf01      	itttt	eq
 800646c:	6819      	ldreq	r1, [r3, #0]
 800646e:	685b      	ldreq	r3, [r3, #4]
 8006470:	1809      	addeq	r1, r1, r0
 8006472:	6021      	streq	r1, [r4, #0]
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	6054      	str	r4, [r2, #4]
 8006478:	e7cb      	b.n	8006412 <_free_r+0x22>
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	20001bdc 	.word	0x20001bdc

08006480 <sbrk_aligned>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	4e0f      	ldr	r6, [pc, #60]	@ (80064c0 <sbrk_aligned+0x40>)
 8006484:	460c      	mov	r4, r1
 8006486:	6831      	ldr	r1, [r6, #0]
 8006488:	4605      	mov	r5, r0
 800648a:	b911      	cbnz	r1, 8006492 <sbrk_aligned+0x12>
 800648c:	f000 fba8 	bl	8006be0 <_sbrk_r>
 8006490:	6030      	str	r0, [r6, #0]
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f000 fba3 	bl	8006be0 <_sbrk_r>
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	d103      	bne.n	80064a6 <sbrk_aligned+0x26>
 800649e:	f04f 34ff 	mov.w	r4, #4294967295
 80064a2:	4620      	mov	r0, r4
 80064a4:	bd70      	pop	{r4, r5, r6, pc}
 80064a6:	1cc4      	adds	r4, r0, #3
 80064a8:	f024 0403 	bic.w	r4, r4, #3
 80064ac:	42a0      	cmp	r0, r4
 80064ae:	d0f8      	beq.n	80064a2 <sbrk_aligned+0x22>
 80064b0:	1a21      	subs	r1, r4, r0
 80064b2:	4628      	mov	r0, r5
 80064b4:	f000 fb94 	bl	8006be0 <_sbrk_r>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d1f2      	bne.n	80064a2 <sbrk_aligned+0x22>
 80064bc:	e7ef      	b.n	800649e <sbrk_aligned+0x1e>
 80064be:	bf00      	nop
 80064c0:	20001bd8 	.word	0x20001bd8

080064c4 <_malloc_r>:
 80064c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c8:	1ccd      	adds	r5, r1, #3
 80064ca:	f025 0503 	bic.w	r5, r5, #3
 80064ce:	3508      	adds	r5, #8
 80064d0:	2d0c      	cmp	r5, #12
 80064d2:	bf38      	it	cc
 80064d4:	250c      	movcc	r5, #12
 80064d6:	2d00      	cmp	r5, #0
 80064d8:	4606      	mov	r6, r0
 80064da:	db01      	blt.n	80064e0 <_malloc_r+0x1c>
 80064dc:	42a9      	cmp	r1, r5
 80064de:	d904      	bls.n	80064ea <_malloc_r+0x26>
 80064e0:	230c      	movs	r3, #12
 80064e2:	6033      	str	r3, [r6, #0]
 80064e4:	2000      	movs	r0, #0
 80064e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065c0 <_malloc_r+0xfc>
 80064ee:	f000 f869 	bl	80065c4 <__malloc_lock>
 80064f2:	f8d8 3000 	ldr.w	r3, [r8]
 80064f6:	461c      	mov	r4, r3
 80064f8:	bb44      	cbnz	r4, 800654c <_malloc_r+0x88>
 80064fa:	4629      	mov	r1, r5
 80064fc:	4630      	mov	r0, r6
 80064fe:	f7ff ffbf 	bl	8006480 <sbrk_aligned>
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	4604      	mov	r4, r0
 8006506:	d158      	bne.n	80065ba <_malloc_r+0xf6>
 8006508:	f8d8 4000 	ldr.w	r4, [r8]
 800650c:	4627      	mov	r7, r4
 800650e:	2f00      	cmp	r7, #0
 8006510:	d143      	bne.n	800659a <_malloc_r+0xd6>
 8006512:	2c00      	cmp	r4, #0
 8006514:	d04b      	beq.n	80065ae <_malloc_r+0xea>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	4639      	mov	r1, r7
 800651a:	4630      	mov	r0, r6
 800651c:	eb04 0903 	add.w	r9, r4, r3
 8006520:	f000 fb5e 	bl	8006be0 <_sbrk_r>
 8006524:	4581      	cmp	r9, r0
 8006526:	d142      	bne.n	80065ae <_malloc_r+0xea>
 8006528:	6821      	ldr	r1, [r4, #0]
 800652a:	4630      	mov	r0, r6
 800652c:	1a6d      	subs	r5, r5, r1
 800652e:	4629      	mov	r1, r5
 8006530:	f7ff ffa6 	bl	8006480 <sbrk_aligned>
 8006534:	3001      	adds	r0, #1
 8006536:	d03a      	beq.n	80065ae <_malloc_r+0xea>
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	442b      	add	r3, r5
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	f8d8 3000 	ldr.w	r3, [r8]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	bb62      	cbnz	r2, 80065a0 <_malloc_r+0xdc>
 8006546:	f8c8 7000 	str.w	r7, [r8]
 800654a:	e00f      	b.n	800656c <_malloc_r+0xa8>
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	1b52      	subs	r2, r2, r5
 8006550:	d420      	bmi.n	8006594 <_malloc_r+0xd0>
 8006552:	2a0b      	cmp	r2, #11
 8006554:	d917      	bls.n	8006586 <_malloc_r+0xc2>
 8006556:	1961      	adds	r1, r4, r5
 8006558:	42a3      	cmp	r3, r4
 800655a:	6025      	str	r5, [r4, #0]
 800655c:	bf18      	it	ne
 800655e:	6059      	strne	r1, [r3, #4]
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	bf08      	it	eq
 8006564:	f8c8 1000 	streq.w	r1, [r8]
 8006568:	5162      	str	r2, [r4, r5]
 800656a:	604b      	str	r3, [r1, #4]
 800656c:	4630      	mov	r0, r6
 800656e:	f000 f82f 	bl	80065d0 <__malloc_unlock>
 8006572:	f104 000b 	add.w	r0, r4, #11
 8006576:	1d23      	adds	r3, r4, #4
 8006578:	f020 0007 	bic.w	r0, r0, #7
 800657c:	1ac2      	subs	r2, r0, r3
 800657e:	bf1c      	itt	ne
 8006580:	1a1b      	subne	r3, r3, r0
 8006582:	50a3      	strne	r3, [r4, r2]
 8006584:	e7af      	b.n	80064e6 <_malloc_r+0x22>
 8006586:	6862      	ldr	r2, [r4, #4]
 8006588:	42a3      	cmp	r3, r4
 800658a:	bf0c      	ite	eq
 800658c:	f8c8 2000 	streq.w	r2, [r8]
 8006590:	605a      	strne	r2, [r3, #4]
 8006592:	e7eb      	b.n	800656c <_malloc_r+0xa8>
 8006594:	4623      	mov	r3, r4
 8006596:	6864      	ldr	r4, [r4, #4]
 8006598:	e7ae      	b.n	80064f8 <_malloc_r+0x34>
 800659a:	463c      	mov	r4, r7
 800659c:	687f      	ldr	r7, [r7, #4]
 800659e:	e7b6      	b.n	800650e <_malloc_r+0x4a>
 80065a0:	461a      	mov	r2, r3
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d1fb      	bne.n	80065a0 <_malloc_r+0xdc>
 80065a8:	2300      	movs	r3, #0
 80065aa:	6053      	str	r3, [r2, #4]
 80065ac:	e7de      	b.n	800656c <_malloc_r+0xa8>
 80065ae:	230c      	movs	r3, #12
 80065b0:	4630      	mov	r0, r6
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	f000 f80c 	bl	80065d0 <__malloc_unlock>
 80065b8:	e794      	b.n	80064e4 <_malloc_r+0x20>
 80065ba:	6005      	str	r5, [r0, #0]
 80065bc:	e7d6      	b.n	800656c <_malloc_r+0xa8>
 80065be:	bf00      	nop
 80065c0:	20001bdc 	.word	0x20001bdc

080065c4 <__malloc_lock>:
 80065c4:	4801      	ldr	r0, [pc, #4]	@ (80065cc <__malloc_lock+0x8>)
 80065c6:	f7ff bf03 	b.w	80063d0 <__retarget_lock_acquire_recursive>
 80065ca:	bf00      	nop
 80065cc:	20001bd4 	.word	0x20001bd4

080065d0 <__malloc_unlock>:
 80065d0:	4801      	ldr	r0, [pc, #4]	@ (80065d8 <__malloc_unlock+0x8>)
 80065d2:	f7ff befe 	b.w	80063d2 <__retarget_lock_release_recursive>
 80065d6:	bf00      	nop
 80065d8:	20001bd4 	.word	0x20001bd4

080065dc <__ssputs_r>:
 80065dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065e0:	461f      	mov	r7, r3
 80065e2:	688e      	ldr	r6, [r1, #8]
 80065e4:	4682      	mov	sl, r0
 80065e6:	42be      	cmp	r6, r7
 80065e8:	460c      	mov	r4, r1
 80065ea:	4690      	mov	r8, r2
 80065ec:	680b      	ldr	r3, [r1, #0]
 80065ee:	d82d      	bhi.n	800664c <__ssputs_r+0x70>
 80065f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065f8:	d026      	beq.n	8006648 <__ssputs_r+0x6c>
 80065fa:	6965      	ldr	r5, [r4, #20]
 80065fc:	6909      	ldr	r1, [r1, #16]
 80065fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006602:	eba3 0901 	sub.w	r9, r3, r1
 8006606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800660a:	1c7b      	adds	r3, r7, #1
 800660c:	444b      	add	r3, r9
 800660e:	106d      	asrs	r5, r5, #1
 8006610:	429d      	cmp	r5, r3
 8006612:	bf38      	it	cc
 8006614:	461d      	movcc	r5, r3
 8006616:	0553      	lsls	r3, r2, #21
 8006618:	d527      	bpl.n	800666a <__ssputs_r+0x8e>
 800661a:	4629      	mov	r1, r5
 800661c:	f7ff ff52 	bl	80064c4 <_malloc_r>
 8006620:	4606      	mov	r6, r0
 8006622:	b360      	cbz	r0, 800667e <__ssputs_r+0xa2>
 8006624:	464a      	mov	r2, r9
 8006626:	6921      	ldr	r1, [r4, #16]
 8006628:	f7ff fed4 	bl	80063d4 <memcpy>
 800662c:	89a3      	ldrh	r3, [r4, #12]
 800662e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	6126      	str	r6, [r4, #16]
 800663a:	444e      	add	r6, r9
 800663c:	6026      	str	r6, [r4, #0]
 800663e:	463e      	mov	r6, r7
 8006640:	6165      	str	r5, [r4, #20]
 8006642:	eba5 0509 	sub.w	r5, r5, r9
 8006646:	60a5      	str	r5, [r4, #8]
 8006648:	42be      	cmp	r6, r7
 800664a:	d900      	bls.n	800664e <__ssputs_r+0x72>
 800664c:	463e      	mov	r6, r7
 800664e:	4632      	mov	r2, r6
 8006650:	4641      	mov	r1, r8
 8006652:	6820      	ldr	r0, [r4, #0]
 8006654:	f000 faaa 	bl	8006bac <memmove>
 8006658:	2000      	movs	r0, #0
 800665a:	68a3      	ldr	r3, [r4, #8]
 800665c:	1b9b      	subs	r3, r3, r6
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	4433      	add	r3, r6
 8006664:	6023      	str	r3, [r4, #0]
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	462a      	mov	r2, r5
 800666c:	f000 fad6 	bl	8006c1c <_realloc_r>
 8006670:	4606      	mov	r6, r0
 8006672:	2800      	cmp	r0, #0
 8006674:	d1e0      	bne.n	8006638 <__ssputs_r+0x5c>
 8006676:	4650      	mov	r0, sl
 8006678:	6921      	ldr	r1, [r4, #16]
 800667a:	f7ff feb9 	bl	80063f0 <_free_r>
 800667e:	230c      	movs	r3, #12
 8006680:	f8ca 3000 	str.w	r3, [sl]
 8006684:	89a3      	ldrh	r3, [r4, #12]
 8006686:	f04f 30ff 	mov.w	r0, #4294967295
 800668a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800668e:	81a3      	strh	r3, [r4, #12]
 8006690:	e7e9      	b.n	8006666 <__ssputs_r+0x8a>
	...

08006694 <_svfiprintf_r>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	4698      	mov	r8, r3
 800669a:	898b      	ldrh	r3, [r1, #12]
 800669c:	4607      	mov	r7, r0
 800669e:	061b      	lsls	r3, r3, #24
 80066a0:	460d      	mov	r5, r1
 80066a2:	4614      	mov	r4, r2
 80066a4:	b09d      	sub	sp, #116	@ 0x74
 80066a6:	d510      	bpl.n	80066ca <_svfiprintf_r+0x36>
 80066a8:	690b      	ldr	r3, [r1, #16]
 80066aa:	b973      	cbnz	r3, 80066ca <_svfiprintf_r+0x36>
 80066ac:	2140      	movs	r1, #64	@ 0x40
 80066ae:	f7ff ff09 	bl	80064c4 <_malloc_r>
 80066b2:	6028      	str	r0, [r5, #0]
 80066b4:	6128      	str	r0, [r5, #16]
 80066b6:	b930      	cbnz	r0, 80066c6 <_svfiprintf_r+0x32>
 80066b8:	230c      	movs	r3, #12
 80066ba:	603b      	str	r3, [r7, #0]
 80066bc:	f04f 30ff 	mov.w	r0, #4294967295
 80066c0:	b01d      	add	sp, #116	@ 0x74
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066c6:	2340      	movs	r3, #64	@ 0x40
 80066c8:	616b      	str	r3, [r5, #20]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ce:	2320      	movs	r3, #32
 80066d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066d4:	2330      	movs	r3, #48	@ 0x30
 80066d6:	f04f 0901 	mov.w	r9, #1
 80066da:	f8cd 800c 	str.w	r8, [sp, #12]
 80066de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006878 <_svfiprintf_r+0x1e4>
 80066e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066e6:	4623      	mov	r3, r4
 80066e8:	469a      	mov	sl, r3
 80066ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066ee:	b10a      	cbz	r2, 80066f4 <_svfiprintf_r+0x60>
 80066f0:	2a25      	cmp	r2, #37	@ 0x25
 80066f2:	d1f9      	bne.n	80066e8 <_svfiprintf_r+0x54>
 80066f4:	ebba 0b04 	subs.w	fp, sl, r4
 80066f8:	d00b      	beq.n	8006712 <_svfiprintf_r+0x7e>
 80066fa:	465b      	mov	r3, fp
 80066fc:	4622      	mov	r2, r4
 80066fe:	4629      	mov	r1, r5
 8006700:	4638      	mov	r0, r7
 8006702:	f7ff ff6b 	bl	80065dc <__ssputs_r>
 8006706:	3001      	adds	r0, #1
 8006708:	f000 80a7 	beq.w	800685a <_svfiprintf_r+0x1c6>
 800670c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800670e:	445a      	add	r2, fp
 8006710:	9209      	str	r2, [sp, #36]	@ 0x24
 8006712:	f89a 3000 	ldrb.w	r3, [sl]
 8006716:	2b00      	cmp	r3, #0
 8006718:	f000 809f 	beq.w	800685a <_svfiprintf_r+0x1c6>
 800671c:	2300      	movs	r3, #0
 800671e:	f04f 32ff 	mov.w	r2, #4294967295
 8006722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006726:	f10a 0a01 	add.w	sl, sl, #1
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	9307      	str	r3, [sp, #28]
 800672e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006732:	931a      	str	r3, [sp, #104]	@ 0x68
 8006734:	4654      	mov	r4, sl
 8006736:	2205      	movs	r2, #5
 8006738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673c:	484e      	ldr	r0, [pc, #312]	@ (8006878 <_svfiprintf_r+0x1e4>)
 800673e:	f000 fa5f 	bl	8006c00 <memchr>
 8006742:	9a04      	ldr	r2, [sp, #16]
 8006744:	b9d8      	cbnz	r0, 800677e <_svfiprintf_r+0xea>
 8006746:	06d0      	lsls	r0, r2, #27
 8006748:	bf44      	itt	mi
 800674a:	2320      	movmi	r3, #32
 800674c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006750:	0711      	lsls	r1, r2, #28
 8006752:	bf44      	itt	mi
 8006754:	232b      	movmi	r3, #43	@ 0x2b
 8006756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800675a:	f89a 3000 	ldrb.w	r3, [sl]
 800675e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006760:	d015      	beq.n	800678e <_svfiprintf_r+0xfa>
 8006762:	4654      	mov	r4, sl
 8006764:	2000      	movs	r0, #0
 8006766:	f04f 0c0a 	mov.w	ip, #10
 800676a:	9a07      	ldr	r2, [sp, #28]
 800676c:	4621      	mov	r1, r4
 800676e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006772:	3b30      	subs	r3, #48	@ 0x30
 8006774:	2b09      	cmp	r3, #9
 8006776:	d94b      	bls.n	8006810 <_svfiprintf_r+0x17c>
 8006778:	b1b0      	cbz	r0, 80067a8 <_svfiprintf_r+0x114>
 800677a:	9207      	str	r2, [sp, #28]
 800677c:	e014      	b.n	80067a8 <_svfiprintf_r+0x114>
 800677e:	eba0 0308 	sub.w	r3, r0, r8
 8006782:	fa09 f303 	lsl.w	r3, r9, r3
 8006786:	4313      	orrs	r3, r2
 8006788:	46a2      	mov	sl, r4
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	e7d2      	b.n	8006734 <_svfiprintf_r+0xa0>
 800678e:	9b03      	ldr	r3, [sp, #12]
 8006790:	1d19      	adds	r1, r3, #4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	9103      	str	r1, [sp, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	bfbb      	ittet	lt
 800679a:	425b      	neglt	r3, r3
 800679c:	f042 0202 	orrlt.w	r2, r2, #2
 80067a0:	9307      	strge	r3, [sp, #28]
 80067a2:	9307      	strlt	r3, [sp, #28]
 80067a4:	bfb8      	it	lt
 80067a6:	9204      	strlt	r2, [sp, #16]
 80067a8:	7823      	ldrb	r3, [r4, #0]
 80067aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80067ac:	d10a      	bne.n	80067c4 <_svfiprintf_r+0x130>
 80067ae:	7863      	ldrb	r3, [r4, #1]
 80067b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b2:	d132      	bne.n	800681a <_svfiprintf_r+0x186>
 80067b4:	9b03      	ldr	r3, [sp, #12]
 80067b6:	3402      	adds	r4, #2
 80067b8:	1d1a      	adds	r2, r3, #4
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	9203      	str	r2, [sp, #12]
 80067be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067c2:	9305      	str	r3, [sp, #20]
 80067c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800687c <_svfiprintf_r+0x1e8>
 80067c8:	2203      	movs	r2, #3
 80067ca:	4650      	mov	r0, sl
 80067cc:	7821      	ldrb	r1, [r4, #0]
 80067ce:	f000 fa17 	bl	8006c00 <memchr>
 80067d2:	b138      	cbz	r0, 80067e4 <_svfiprintf_r+0x150>
 80067d4:	2240      	movs	r2, #64	@ 0x40
 80067d6:	9b04      	ldr	r3, [sp, #16]
 80067d8:	eba0 000a 	sub.w	r0, r0, sl
 80067dc:	4082      	lsls	r2, r0
 80067de:	4313      	orrs	r3, r2
 80067e0:	3401      	adds	r4, #1
 80067e2:	9304      	str	r3, [sp, #16]
 80067e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067e8:	2206      	movs	r2, #6
 80067ea:	4825      	ldr	r0, [pc, #148]	@ (8006880 <_svfiprintf_r+0x1ec>)
 80067ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067f0:	f000 fa06 	bl	8006c00 <memchr>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	d036      	beq.n	8006866 <_svfiprintf_r+0x1d2>
 80067f8:	4b22      	ldr	r3, [pc, #136]	@ (8006884 <_svfiprintf_r+0x1f0>)
 80067fa:	bb1b      	cbnz	r3, 8006844 <_svfiprintf_r+0x1b0>
 80067fc:	9b03      	ldr	r3, [sp, #12]
 80067fe:	3307      	adds	r3, #7
 8006800:	f023 0307 	bic.w	r3, r3, #7
 8006804:	3308      	adds	r3, #8
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680a:	4433      	add	r3, r6
 800680c:	9309      	str	r3, [sp, #36]	@ 0x24
 800680e:	e76a      	b.n	80066e6 <_svfiprintf_r+0x52>
 8006810:	460c      	mov	r4, r1
 8006812:	2001      	movs	r0, #1
 8006814:	fb0c 3202 	mla	r2, ip, r2, r3
 8006818:	e7a8      	b.n	800676c <_svfiprintf_r+0xd8>
 800681a:	2300      	movs	r3, #0
 800681c:	f04f 0c0a 	mov.w	ip, #10
 8006820:	4619      	mov	r1, r3
 8006822:	3401      	adds	r4, #1
 8006824:	9305      	str	r3, [sp, #20]
 8006826:	4620      	mov	r0, r4
 8006828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800682c:	3a30      	subs	r2, #48	@ 0x30
 800682e:	2a09      	cmp	r2, #9
 8006830:	d903      	bls.n	800683a <_svfiprintf_r+0x1a6>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0c6      	beq.n	80067c4 <_svfiprintf_r+0x130>
 8006836:	9105      	str	r1, [sp, #20]
 8006838:	e7c4      	b.n	80067c4 <_svfiprintf_r+0x130>
 800683a:	4604      	mov	r4, r0
 800683c:	2301      	movs	r3, #1
 800683e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006842:	e7f0      	b.n	8006826 <_svfiprintf_r+0x192>
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462a      	mov	r2, r5
 800684a:	4638      	mov	r0, r7
 800684c:	4b0e      	ldr	r3, [pc, #56]	@ (8006888 <_svfiprintf_r+0x1f4>)
 800684e:	a904      	add	r1, sp, #16
 8006850:	f3af 8000 	nop.w
 8006854:	1c42      	adds	r2, r0, #1
 8006856:	4606      	mov	r6, r0
 8006858:	d1d6      	bne.n	8006808 <_svfiprintf_r+0x174>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	065b      	lsls	r3, r3, #25
 800685e:	f53f af2d 	bmi.w	80066bc <_svfiprintf_r+0x28>
 8006862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006864:	e72c      	b.n	80066c0 <_svfiprintf_r+0x2c>
 8006866:	ab03      	add	r3, sp, #12
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	462a      	mov	r2, r5
 800686c:	4638      	mov	r0, r7
 800686e:	4b06      	ldr	r3, [pc, #24]	@ (8006888 <_svfiprintf_r+0x1f4>)
 8006870:	a904      	add	r1, sp, #16
 8006872:	f000 f87d 	bl	8006970 <_printf_i>
 8006876:	e7ed      	b.n	8006854 <_svfiprintf_r+0x1c0>
 8006878:	08006e0e 	.word	0x08006e0e
 800687c:	08006e14 	.word	0x08006e14
 8006880:	08006e18 	.word	0x08006e18
 8006884:	00000000 	.word	0x00000000
 8006888:	080065dd 	.word	0x080065dd

0800688c <_printf_common>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	4616      	mov	r6, r2
 8006892:	4698      	mov	r8, r3
 8006894:	688a      	ldr	r2, [r1, #8]
 8006896:	690b      	ldr	r3, [r1, #16]
 8006898:	4607      	mov	r7, r0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfb8      	it	lt
 800689e:	4613      	movlt	r3, r2
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068a6:	460c      	mov	r4, r1
 80068a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068ac:	b10a      	cbz	r2, 80068b2 <_printf_common+0x26>
 80068ae:	3301      	adds	r3, #1
 80068b0:	6033      	str	r3, [r6, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	0699      	lsls	r1, r3, #26
 80068b6:	bf42      	ittt	mi
 80068b8:	6833      	ldrmi	r3, [r6, #0]
 80068ba:	3302      	addmi	r3, #2
 80068bc:	6033      	strmi	r3, [r6, #0]
 80068be:	6825      	ldr	r5, [r4, #0]
 80068c0:	f015 0506 	ands.w	r5, r5, #6
 80068c4:	d106      	bne.n	80068d4 <_printf_common+0x48>
 80068c6:	f104 0a19 	add.w	sl, r4, #25
 80068ca:	68e3      	ldr	r3, [r4, #12]
 80068cc:	6832      	ldr	r2, [r6, #0]
 80068ce:	1a9b      	subs	r3, r3, r2
 80068d0:	42ab      	cmp	r3, r5
 80068d2:	dc2b      	bgt.n	800692c <_printf_common+0xa0>
 80068d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068d8:	6822      	ldr	r2, [r4, #0]
 80068da:	3b00      	subs	r3, #0
 80068dc:	bf18      	it	ne
 80068de:	2301      	movne	r3, #1
 80068e0:	0692      	lsls	r2, r2, #26
 80068e2:	d430      	bmi.n	8006946 <_printf_common+0xba>
 80068e4:	4641      	mov	r1, r8
 80068e6:	4638      	mov	r0, r7
 80068e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068ec:	47c8      	blx	r9
 80068ee:	3001      	adds	r0, #1
 80068f0:	d023      	beq.n	800693a <_printf_common+0xae>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	f003 0306 	and.w	r3, r3, #6
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	bf14      	ite	ne
 80068fe:	2500      	movne	r5, #0
 8006900:	6833      	ldreq	r3, [r6, #0]
 8006902:	f04f 0600 	mov.w	r6, #0
 8006906:	bf08      	it	eq
 8006908:	68e5      	ldreq	r5, [r4, #12]
 800690a:	f104 041a 	add.w	r4, r4, #26
 800690e:	bf08      	it	eq
 8006910:	1aed      	subeq	r5, r5, r3
 8006912:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006916:	bf08      	it	eq
 8006918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800691c:	4293      	cmp	r3, r2
 800691e:	bfc4      	itt	gt
 8006920:	1a9b      	subgt	r3, r3, r2
 8006922:	18ed      	addgt	r5, r5, r3
 8006924:	42b5      	cmp	r5, r6
 8006926:	d11a      	bne.n	800695e <_printf_common+0xd2>
 8006928:	2000      	movs	r0, #0
 800692a:	e008      	b.n	800693e <_printf_common+0xb2>
 800692c:	2301      	movs	r3, #1
 800692e:	4652      	mov	r2, sl
 8006930:	4641      	mov	r1, r8
 8006932:	4638      	mov	r0, r7
 8006934:	47c8      	blx	r9
 8006936:	3001      	adds	r0, #1
 8006938:	d103      	bne.n	8006942 <_printf_common+0xb6>
 800693a:	f04f 30ff 	mov.w	r0, #4294967295
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	3501      	adds	r5, #1
 8006944:	e7c1      	b.n	80068ca <_printf_common+0x3e>
 8006946:	2030      	movs	r0, #48	@ 0x30
 8006948:	18e1      	adds	r1, r4, r3
 800694a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800694e:	1c5a      	adds	r2, r3, #1
 8006950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006954:	4422      	add	r2, r4
 8006956:	3302      	adds	r3, #2
 8006958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800695c:	e7c2      	b.n	80068e4 <_printf_common+0x58>
 800695e:	2301      	movs	r3, #1
 8006960:	4622      	mov	r2, r4
 8006962:	4641      	mov	r1, r8
 8006964:	4638      	mov	r0, r7
 8006966:	47c8      	blx	r9
 8006968:	3001      	adds	r0, #1
 800696a:	d0e6      	beq.n	800693a <_printf_common+0xae>
 800696c:	3601      	adds	r6, #1
 800696e:	e7d9      	b.n	8006924 <_printf_common+0x98>

08006970 <_printf_i>:
 8006970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	7e0f      	ldrb	r7, [r1, #24]
 8006976:	4691      	mov	r9, r2
 8006978:	2f78      	cmp	r7, #120	@ 0x78
 800697a:	4680      	mov	r8, r0
 800697c:	460c      	mov	r4, r1
 800697e:	469a      	mov	sl, r3
 8006980:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006986:	d807      	bhi.n	8006998 <_printf_i+0x28>
 8006988:	2f62      	cmp	r7, #98	@ 0x62
 800698a:	d80a      	bhi.n	80069a2 <_printf_i+0x32>
 800698c:	2f00      	cmp	r7, #0
 800698e:	f000 80d1 	beq.w	8006b34 <_printf_i+0x1c4>
 8006992:	2f58      	cmp	r7, #88	@ 0x58
 8006994:	f000 80b8 	beq.w	8006b08 <_printf_i+0x198>
 8006998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800699c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069a0:	e03a      	b.n	8006a18 <_printf_i+0xa8>
 80069a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069a6:	2b15      	cmp	r3, #21
 80069a8:	d8f6      	bhi.n	8006998 <_printf_i+0x28>
 80069aa:	a101      	add	r1, pc, #4	@ (adr r1, 80069b0 <_printf_i+0x40>)
 80069ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069b0:	08006a09 	.word	0x08006a09
 80069b4:	08006a1d 	.word	0x08006a1d
 80069b8:	08006999 	.word	0x08006999
 80069bc:	08006999 	.word	0x08006999
 80069c0:	08006999 	.word	0x08006999
 80069c4:	08006999 	.word	0x08006999
 80069c8:	08006a1d 	.word	0x08006a1d
 80069cc:	08006999 	.word	0x08006999
 80069d0:	08006999 	.word	0x08006999
 80069d4:	08006999 	.word	0x08006999
 80069d8:	08006999 	.word	0x08006999
 80069dc:	08006b1b 	.word	0x08006b1b
 80069e0:	08006a47 	.word	0x08006a47
 80069e4:	08006ad5 	.word	0x08006ad5
 80069e8:	08006999 	.word	0x08006999
 80069ec:	08006999 	.word	0x08006999
 80069f0:	08006b3d 	.word	0x08006b3d
 80069f4:	08006999 	.word	0x08006999
 80069f8:	08006a47 	.word	0x08006a47
 80069fc:	08006999 	.word	0x08006999
 8006a00:	08006999 	.word	0x08006999
 8006a04:	08006add 	.word	0x08006add
 8006a08:	6833      	ldr	r3, [r6, #0]
 8006a0a:	1d1a      	adds	r2, r3, #4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6032      	str	r2, [r6, #0]
 8006a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e09c      	b.n	8006b56 <_printf_i+0x1e6>
 8006a1c:	6833      	ldr	r3, [r6, #0]
 8006a1e:	6820      	ldr	r0, [r4, #0]
 8006a20:	1d19      	adds	r1, r3, #4
 8006a22:	6031      	str	r1, [r6, #0]
 8006a24:	0606      	lsls	r6, r0, #24
 8006a26:	d501      	bpl.n	8006a2c <_printf_i+0xbc>
 8006a28:	681d      	ldr	r5, [r3, #0]
 8006a2a:	e003      	b.n	8006a34 <_printf_i+0xc4>
 8006a2c:	0645      	lsls	r5, r0, #25
 8006a2e:	d5fb      	bpl.n	8006a28 <_printf_i+0xb8>
 8006a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a34:	2d00      	cmp	r5, #0
 8006a36:	da03      	bge.n	8006a40 <_printf_i+0xd0>
 8006a38:	232d      	movs	r3, #45	@ 0x2d
 8006a3a:	426d      	negs	r5, r5
 8006a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a40:	230a      	movs	r3, #10
 8006a42:	4858      	ldr	r0, [pc, #352]	@ (8006ba4 <_printf_i+0x234>)
 8006a44:	e011      	b.n	8006a6a <_printf_i+0xfa>
 8006a46:	6821      	ldr	r1, [r4, #0]
 8006a48:	6833      	ldr	r3, [r6, #0]
 8006a4a:	0608      	lsls	r0, r1, #24
 8006a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a50:	d402      	bmi.n	8006a58 <_printf_i+0xe8>
 8006a52:	0649      	lsls	r1, r1, #25
 8006a54:	bf48      	it	mi
 8006a56:	b2ad      	uxthmi	r5, r5
 8006a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a5a:	6033      	str	r3, [r6, #0]
 8006a5c:	bf14      	ite	ne
 8006a5e:	230a      	movne	r3, #10
 8006a60:	2308      	moveq	r3, #8
 8006a62:	4850      	ldr	r0, [pc, #320]	@ (8006ba4 <_printf_i+0x234>)
 8006a64:	2100      	movs	r1, #0
 8006a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a6a:	6866      	ldr	r6, [r4, #4]
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	60a6      	str	r6, [r4, #8]
 8006a70:	db05      	blt.n	8006a7e <_printf_i+0x10e>
 8006a72:	6821      	ldr	r1, [r4, #0]
 8006a74:	432e      	orrs	r6, r5
 8006a76:	f021 0104 	bic.w	r1, r1, #4
 8006a7a:	6021      	str	r1, [r4, #0]
 8006a7c:	d04b      	beq.n	8006b16 <_printf_i+0x1a6>
 8006a7e:	4616      	mov	r6, r2
 8006a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a84:	fb03 5711 	mls	r7, r3, r1, r5
 8006a88:	5dc7      	ldrb	r7, [r0, r7]
 8006a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a8e:	462f      	mov	r7, r5
 8006a90:	42bb      	cmp	r3, r7
 8006a92:	460d      	mov	r5, r1
 8006a94:	d9f4      	bls.n	8006a80 <_printf_i+0x110>
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d10b      	bne.n	8006ab2 <_printf_i+0x142>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	07df      	lsls	r7, r3, #31
 8006a9e:	d508      	bpl.n	8006ab2 <_printf_i+0x142>
 8006aa0:	6923      	ldr	r3, [r4, #16]
 8006aa2:	6861      	ldr	r1, [r4, #4]
 8006aa4:	4299      	cmp	r1, r3
 8006aa6:	bfde      	ittt	le
 8006aa8:	2330      	movle	r3, #48	@ 0x30
 8006aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ab2:	1b92      	subs	r2, r2, r6
 8006ab4:	6122      	str	r2, [r4, #16]
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	4621      	mov	r1, r4
 8006aba:	4640      	mov	r0, r8
 8006abc:	f8cd a000 	str.w	sl, [sp]
 8006ac0:	aa03      	add	r2, sp, #12
 8006ac2:	f7ff fee3 	bl	800688c <_printf_common>
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d14a      	bne.n	8006b60 <_printf_i+0x1f0>
 8006aca:	f04f 30ff 	mov.w	r0, #4294967295
 8006ace:	b004      	add	sp, #16
 8006ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	f043 0320 	orr.w	r3, r3, #32
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	2778      	movs	r7, #120	@ 0x78
 8006ade:	4832      	ldr	r0, [pc, #200]	@ (8006ba8 <_printf_i+0x238>)
 8006ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ae4:	6823      	ldr	r3, [r4, #0]
 8006ae6:	6831      	ldr	r1, [r6, #0]
 8006ae8:	061f      	lsls	r7, r3, #24
 8006aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aee:	d402      	bmi.n	8006af6 <_printf_i+0x186>
 8006af0:	065f      	lsls	r7, r3, #25
 8006af2:	bf48      	it	mi
 8006af4:	b2ad      	uxthmi	r5, r5
 8006af6:	6031      	str	r1, [r6, #0]
 8006af8:	07d9      	lsls	r1, r3, #31
 8006afa:	bf44      	itt	mi
 8006afc:	f043 0320 	orrmi.w	r3, r3, #32
 8006b00:	6023      	strmi	r3, [r4, #0]
 8006b02:	b11d      	cbz	r5, 8006b0c <_printf_i+0x19c>
 8006b04:	2310      	movs	r3, #16
 8006b06:	e7ad      	b.n	8006a64 <_printf_i+0xf4>
 8006b08:	4826      	ldr	r0, [pc, #152]	@ (8006ba4 <_printf_i+0x234>)
 8006b0a:	e7e9      	b.n	8006ae0 <_printf_i+0x170>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	f023 0320 	bic.w	r3, r3, #32
 8006b12:	6023      	str	r3, [r4, #0]
 8006b14:	e7f6      	b.n	8006b04 <_printf_i+0x194>
 8006b16:	4616      	mov	r6, r2
 8006b18:	e7bd      	b.n	8006a96 <_printf_i+0x126>
 8006b1a:	6833      	ldr	r3, [r6, #0]
 8006b1c:	6825      	ldr	r5, [r4, #0]
 8006b1e:	1d18      	adds	r0, r3, #4
 8006b20:	6961      	ldr	r1, [r4, #20]
 8006b22:	6030      	str	r0, [r6, #0]
 8006b24:	062e      	lsls	r6, r5, #24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	d501      	bpl.n	8006b2e <_printf_i+0x1be>
 8006b2a:	6019      	str	r1, [r3, #0]
 8006b2c:	e002      	b.n	8006b34 <_printf_i+0x1c4>
 8006b2e:	0668      	lsls	r0, r5, #25
 8006b30:	d5fb      	bpl.n	8006b2a <_printf_i+0x1ba>
 8006b32:	8019      	strh	r1, [r3, #0]
 8006b34:	2300      	movs	r3, #0
 8006b36:	4616      	mov	r6, r2
 8006b38:	6123      	str	r3, [r4, #16]
 8006b3a:	e7bc      	b.n	8006ab6 <_printf_i+0x146>
 8006b3c:	6833      	ldr	r3, [r6, #0]
 8006b3e:	2100      	movs	r1, #0
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	6032      	str	r2, [r6, #0]
 8006b44:	681e      	ldr	r6, [r3, #0]
 8006b46:	6862      	ldr	r2, [r4, #4]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f859 	bl	8006c00 <memchr>
 8006b4e:	b108      	cbz	r0, 8006b54 <_printf_i+0x1e4>
 8006b50:	1b80      	subs	r0, r0, r6
 8006b52:	6060      	str	r0, [r4, #4]
 8006b54:	6863      	ldr	r3, [r4, #4]
 8006b56:	6123      	str	r3, [r4, #16]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b5e:	e7aa      	b.n	8006ab6 <_printf_i+0x146>
 8006b60:	4632      	mov	r2, r6
 8006b62:	4649      	mov	r1, r9
 8006b64:	4640      	mov	r0, r8
 8006b66:	6923      	ldr	r3, [r4, #16]
 8006b68:	47d0      	blx	sl
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d0ad      	beq.n	8006aca <_printf_i+0x15a>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	079b      	lsls	r3, r3, #30
 8006b72:	d413      	bmi.n	8006b9c <_printf_i+0x22c>
 8006b74:	68e0      	ldr	r0, [r4, #12]
 8006b76:	9b03      	ldr	r3, [sp, #12]
 8006b78:	4298      	cmp	r0, r3
 8006b7a:	bfb8      	it	lt
 8006b7c:	4618      	movlt	r0, r3
 8006b7e:	e7a6      	b.n	8006ace <_printf_i+0x15e>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4632      	mov	r2, r6
 8006b84:	4649      	mov	r1, r9
 8006b86:	4640      	mov	r0, r8
 8006b88:	47d0      	blx	sl
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	d09d      	beq.n	8006aca <_printf_i+0x15a>
 8006b8e:	3501      	adds	r5, #1
 8006b90:	68e3      	ldr	r3, [r4, #12]
 8006b92:	9903      	ldr	r1, [sp, #12]
 8006b94:	1a5b      	subs	r3, r3, r1
 8006b96:	42ab      	cmp	r3, r5
 8006b98:	dcf2      	bgt.n	8006b80 <_printf_i+0x210>
 8006b9a:	e7eb      	b.n	8006b74 <_printf_i+0x204>
 8006b9c:	2500      	movs	r5, #0
 8006b9e:	f104 0619 	add.w	r6, r4, #25
 8006ba2:	e7f5      	b.n	8006b90 <_printf_i+0x220>
 8006ba4:	08006e1f 	.word	0x08006e1f
 8006ba8:	08006e30 	.word	0x08006e30

08006bac <memmove>:
 8006bac:	4288      	cmp	r0, r1
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	eb01 0402 	add.w	r4, r1, r2
 8006bb4:	d902      	bls.n	8006bbc <memmove+0x10>
 8006bb6:	4284      	cmp	r4, r0
 8006bb8:	4623      	mov	r3, r4
 8006bba:	d807      	bhi.n	8006bcc <memmove+0x20>
 8006bbc:	1e43      	subs	r3, r0, #1
 8006bbe:	42a1      	cmp	r1, r4
 8006bc0:	d008      	beq.n	8006bd4 <memmove+0x28>
 8006bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bca:	e7f8      	b.n	8006bbe <memmove+0x12>
 8006bcc:	4601      	mov	r1, r0
 8006bce:	4402      	add	r2, r0
 8006bd0:	428a      	cmp	r2, r1
 8006bd2:	d100      	bne.n	8006bd6 <memmove+0x2a>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bde:	e7f7      	b.n	8006bd0 <memmove+0x24>

08006be0 <_sbrk_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	2300      	movs	r3, #0
 8006be4:	4d05      	ldr	r5, [pc, #20]	@ (8006bfc <_sbrk_r+0x1c>)
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fa f968 	bl	8000ec0 <_sbrk>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_sbrk_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_sbrk_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	20001bd0 	.word	0x20001bd0

08006c00 <memchr>:
 8006c00:	4603      	mov	r3, r0
 8006c02:	b510      	push	{r4, lr}
 8006c04:	b2c9      	uxtb	r1, r1
 8006c06:	4402      	add	r2, r0
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	d101      	bne.n	8006c12 <memchr+0x12>
 8006c0e:	2000      	movs	r0, #0
 8006c10:	e003      	b.n	8006c1a <memchr+0x1a>
 8006c12:	7804      	ldrb	r4, [r0, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	428c      	cmp	r4, r1
 8006c18:	d1f6      	bne.n	8006c08 <memchr+0x8>
 8006c1a:	bd10      	pop	{r4, pc}

08006c1c <_realloc_r>:
 8006c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c20:	4607      	mov	r7, r0
 8006c22:	4614      	mov	r4, r2
 8006c24:	460d      	mov	r5, r1
 8006c26:	b921      	cbnz	r1, 8006c32 <_realloc_r+0x16>
 8006c28:	4611      	mov	r1, r2
 8006c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2e:	f7ff bc49 	b.w	80064c4 <_malloc_r>
 8006c32:	b92a      	cbnz	r2, 8006c40 <_realloc_r+0x24>
 8006c34:	f7ff fbdc 	bl	80063f0 <_free_r>
 8006c38:	4625      	mov	r5, r4
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c40:	f000 f81a 	bl	8006c78 <_malloc_usable_size_r>
 8006c44:	4284      	cmp	r4, r0
 8006c46:	4606      	mov	r6, r0
 8006c48:	d802      	bhi.n	8006c50 <_realloc_r+0x34>
 8006c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c4e:	d8f4      	bhi.n	8006c3a <_realloc_r+0x1e>
 8006c50:	4621      	mov	r1, r4
 8006c52:	4638      	mov	r0, r7
 8006c54:	f7ff fc36 	bl	80064c4 <_malloc_r>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	b908      	cbnz	r0, 8006c60 <_realloc_r+0x44>
 8006c5c:	4645      	mov	r5, r8
 8006c5e:	e7ec      	b.n	8006c3a <_realloc_r+0x1e>
 8006c60:	42b4      	cmp	r4, r6
 8006c62:	4622      	mov	r2, r4
 8006c64:	4629      	mov	r1, r5
 8006c66:	bf28      	it	cs
 8006c68:	4632      	movcs	r2, r6
 8006c6a:	f7ff fbb3 	bl	80063d4 <memcpy>
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4638      	mov	r0, r7
 8006c72:	f7ff fbbd 	bl	80063f0 <_free_r>
 8006c76:	e7f1      	b.n	8006c5c <_realloc_r+0x40>

08006c78 <_malloc_usable_size_r>:
 8006c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c7c:	1f18      	subs	r0, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bfbc      	itt	lt
 8006c82:	580b      	ldrlt	r3, [r1, r0]
 8006c84:	18c0      	addlt	r0, r0, r3
 8006c86:	4770      	bx	lr

08006c88 <_init>:
 8006c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8a:	bf00      	nop
 8006c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8e:	bc08      	pop	{r3}
 8006c90:	469e      	mov	lr, r3
 8006c92:	4770      	bx	lr

08006c94 <_fini>:
 8006c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c96:	bf00      	nop
 8006c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c9a:	bc08      	pop	{r3}
 8006c9c:	469e      	mov	lr, r3
 8006c9e:	4770      	bx	lr
